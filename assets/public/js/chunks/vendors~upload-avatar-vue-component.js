(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{30:function(t,e,i){t.exports=function(t){"use strict";function e(t,e,i){t&&e&&i&&(document.addEventListener?t.addEventListener(e,i,!1):t.attachEvent("on"+e,i))}function i(t,e,i){t&&e&&(document.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent("on"+e,i))}t=t&&t.hasOwnProperty("default")?t.default:t;var n={props:{tagName:{type:String,default:"span"},trigger:{type:String,default:"hover",validator:function(t){return["clickToOpen","click","clickToToggle","hover","focus"].indexOf(t)>-1}},delayOnMouseOver:{type:Number,default:10},delayOnMouseOut:{type:Number,default:10},disabled:{type:Boolean,default:!1},content:String,enterActiveClass:String,leaveActiveClass:String,boundariesSelector:String,reference:{},forceShow:{type:Boolean,default:!1},dataValue:{default:null},appendToBody:{type:Boolean,default:!1},visibleArrow:{type:Boolean,default:!0},transition:{type:String,default:""},stopPropagation:{type:Boolean,default:!1},preventDefault:{type:Boolean,default:!1},options:{type:Object,default:function(){return{}}},rootClass:{type:String,default:""}},data:function(){return{referenceElm:null,popperJS:null,showPopper:!1,currentPlacement:"",popperOptions:{placement:"bottom",computeStyle:{gpuAcceleration:!1}}}},watch:{showPopper:function(t){t?(this.$emit("show",this),this.popperJS&&this.popperJS.enableEventListeners(),this.updatePopper()):(this.popperJS&&this.popperJS.disableEventListeners(),this.$emit("hide",this))},forceShow:{handler:function(t){this[t?"doShow":"doClose"]()},immediate:!0},disabled:function(t){t&&(this.showPopper=!1)}},created:function(){this.appendedArrow=!1,this.appendedToBody=!1,this.popperOptions=Object.assign(this.popperOptions,this.options)},mounted:function(){switch(this.referenceElm=this.reference||this.$slots.reference[0].elm,this.popper=this.$slots.default[0].elm,this.trigger){case"clickToOpen":e(this.referenceElm,"click",this.doShow),e(document,"click",this.handleDocumentClick);break;case"click":case"clickToToggle":e(this.referenceElm,"click",this.doToggle),e(document,"click",this.handleDocumentClick);break;case"hover":e(this.referenceElm,"mouseover",this.onMouseOver),e(this.popper,"mouseover",this.onMouseOver),e(this.referenceElm,"mouseout",this.onMouseOut),e(this.popper,"mouseout",this.onMouseOut);break;case"focus":e(this.referenceElm,"focus",this.onMouseOver),e(this.popper,"focus",this.onMouseOver),e(this.referenceElm,"blur",this.onMouseOut),e(this.popper,"blur",this.onMouseOut)}},methods:{doToggle:function(t){this.stopPropagation&&t.stopPropagation(),this.preventDefault&&t.preventDefault(),this.forceShow||(this.showPopper=!this.showPopper)},doShow:function(){this.showPopper=!0},doClose:function(){this.showPopper=!1},doDestroy:function(){this.showPopper||(this.popperJS&&(this.popperJS.destroy(),this.popperJS=null),this.appendedToBody&&(this.appendedToBody=!1,document.body.removeChild(this.popper.parentElement)))},createPopper:function(){var e=this;this.$nextTick(function(){if(e.visibleArrow&&e.appendArrow(e.popper),e.appendToBody&&!e.appendedToBody&&(e.appendedToBody=!0,document.body.appendChild(e.popper.parentElement)),e.popperJS&&e.popperJS.destroy&&e.popperJS.destroy(),e.boundariesSelector){var i=document.querySelector(e.boundariesSelector);i&&(e.popperOptions.modifiers=Object.assign({},e.popperOptions.modifiers),e.popperOptions.modifiers.preventOverflow=Object.assign({},e.popperOptions.modifiers.preventOverflow),e.popperOptions.modifiers.preventOverflow.boundariesElement=i)}e.popperOptions.onCreate=function(){e.$emit("created",e),e.$nextTick(e.updatePopper)},e.popperJS=new t(e.referenceElm,e.popper,e.popperOptions)})},destroyPopper:function(){i(this.referenceElm,"click",this.doToggle),i(this.referenceElm,"mouseup",this.doClose),i(this.referenceElm,"mousedown",this.doShow),i(this.referenceElm,"focus",this.doShow),i(this.referenceElm,"blur",this.doClose),i(this.referenceElm,"mouseout",this.onMouseOut),i(this.referenceElm,"mouseover",this.onMouseOver),i(document,"click",this.handleDocumentClick),this.showPopper=!1,this.doDestroy()},appendArrow:function(t){if(!this.appendedArrow){this.appendedArrow=!0;var e=document.createElement("div");e.setAttribute("x-arrow",""),e.className="popper__arrow",t.appendChild(e)}},updatePopper:function(){this.popperJS?this.popperJS.scheduleUpdate():this.createPopper()},onMouseOver:function(){var t=this;clearTimeout(this._timer),this._timer=setTimeout(function(){t.showPopper=!0},this.delayOnMouseOver)},onMouseOut:function(){var t=this;clearTimeout(this._timer),this._timer=setTimeout(function(){t.showPopper=!1},this.delayOnMouseOut)},handleDocumentClick:function(t){this.$el&&this.referenceElm&&!this.elementContains(this.$el,t.target)&&!this.elementContains(this.referenceElm,t.target)&&this.popper&&!this.elementContains(this.popper,t.target)&&(this.$emit("documentClick",this),this.forceShow||(this.showPopper=!1))},elementContains:function(t,e){return"function"==typeof t.contains&&t.contains(e)}},destroyed:function(){this.destroyPopper()}};const o=n;return n.__file="popper.js.vue",function(t,e,i,n,o,r,a,s,h,c){"function"==typeof a&&(a,a=!1);const p="function"==typeof i?i.options:i;let l;if(t&&t.render&&(p.render=t.render,p.staticRenderFns=t.staticRenderFns,p._compiled=!0),l)if(p.functional){const t=p.render;p.render=function(e,i){return l.call(i),t(e,i)}}else{const t=p.beforeCreate;p.beforeCreate=t?[].concat(t,l):[l]}return i}({render:function(){var t=this,e=t.$createElement,i=t._self._c||e;return i(t.tagName,{tag:"component"},[i("transition",{attrs:{name:t.transition,"enter-active-class":t.enterActiveClass,"leave-active-class":t.leaveActiveClass},on:{"after-leave":t.doDestroy}},[i("span",{directives:[{name:"show",rawName:"v-show",value:!t.disabled&&t.showPopper,expression:"!disabled && showPopper"}],ref:"popper",class:t.rootClass},[t._t("default",[t._v(t._s(t.content))])],2)]),t._v(" "),t._t("reference")],2)},staticRenderFns:[]},0,o,0,0,0,void 0)}(i(53))},31:function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,o=i(54),r=(n=o)&&n.__esModule?n:{default:n};var a="undefined"==typeof window?[String,Array]:[String,Array,Element,NodeList];e.default={render:function(t){return t("div",{style:this.containerStyle},[t("img",{ref:"img",attrs:{src:this.src,alt:this.alt||"image",style:"max-width: 100%"},style:this.imgStyle})])},props:{containerStyle:Object,src:{type:String,default:""},alt:String,imgStyle:Object,viewMode:Number,dragMode:String,aspectRatio:Number,data:Object,preview:a,responsive:{type:Boolean,default:!0},restore:{type:Boolean,default:!0},checkCrossOrigin:{type:Boolean,default:!0},checkOrientation:{type:Boolean,default:!0},modal:{type:Boolean,default:!0},guides:{type:Boolean,default:!0},center:{type:Boolean,default:!0},highlight:{type:Boolean,default:!0},background:{type:Boolean,default:!0},autoCrop:{type:Boolean,default:!0},autoCropArea:Number,movable:{type:Boolean,default:!0},rotatable:{type:Boolean,default:!0},scalable:{type:Boolean,default:!0},zoomable:{type:Boolean,default:!0},zoomOnTouch:{type:Boolean,default:!0},zoomOnWheel:{type:Boolean,default:!0},wheelZoomRatio:Number,cropBoxMovable:{type:Boolean,default:!0},cropBoxResizable:{type:Boolean,default:!0},toggleDragModeOnDblclick:{type:Boolean,default:!0},minCanvasWidth:Number,minCanvasHeight:Number,minCropBoxWidth:Number,minCropBoxHeight:Number,minContainerWidth:Number,minContainerHeight:Number,ready:Function,cropstart:Function,cropmove:Function,cropend:Function,crop:Function,zoom:Function},mounted:function(){var t=this.$options.props,e=(t.containerStyle,t.src,t.alt,t.imgStyle,function(t,e){var i={};for(var n in t)e.indexOf(n)>=0||Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=t[n]);return i}(t,["containerStyle","src","alt","imgStyle"])),i={};for(var n in e)void 0!==this[n]&&(i[n]=this[n]);this.cropper=new r.default(this.$refs.img,i)},methods:{reset:function(){return this.cropper.reset()},clear:function(){return this.cropper.clear()},initCrop:function(){return this.cropper.crop()},replace:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return this.cropper.replace(t,e)},enable:function(){return this.cropper.enable()},disable:function(){return this.cropper.disable()},destroy:function(){return this.cropper.destroy()},move:function(t,e){return this.cropper.move(t,e)},moveTo:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;return this.cropper.moveTo(t,e)},relativeZoom:function(t,e){return this.cropper.zoom(t,e)},zoomTo:function(t,e){return this.cropper.zoomTo(t,e)},rotate:function(t){return this.cropper.rotate(t)},rotateTo:function(t){return this.cropper.rotateTo(t)},scaleX:function(t){return this.cropper.scaleX(t)},scaleY:function(t){return this.cropper.scaleY(t)},scale:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;return this.cropper.scale(t,e)},getData:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return this.cropper.getData(t)},setData:function(t){return this.cropper.setData(t)},getContainerData:function(){return this.cropper.getContainerData()},getImageData:function(){return this.cropper.getImageData()},getCanvasData:function(){return this.cropper.getCanvasData()},setCanvasData:function(t){return this.cropper.setCanvasData(t)},getCropBoxData:function(){return this.cropper.getCropBoxData()},setCropBoxData:function(t){return this.cropper.setCropBoxData(t)},getCroppedCanvas:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.cropper.getCroppedCanvas(t)},setAspectRatio:function(t){return this.cropper.setAspectRatio(t)},setDragMode:function(t){return this.cropper.setDragMode(t)}}}},53:function(t,e,i){"use strict";i.r(e),function(t){var i="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,n=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(i&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}();var o=i&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},n))}};function r(t){return t&&"[object Function]"==={}.toString.call(t)}function a(t,e){if(1!==t.nodeType)return[];var i=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?i[e]:i}function s(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function h(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=a(t),i=e.overflow,n=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(i+o+n)?t:h(s(t))}function c(t){return t&&t.referenceNode?t.referenceNode:t}var p=i&&!(!window.MSInputMethodContext||!document.documentMode),l=i&&/MSIE 10/.test(navigator.userAgent);function d(t){return 11===t?p:10===t?l:p||l}function u(t){if(!t)return document.documentElement;for(var e=d(10)?document.body:null,i=t.offsetParent||null;i===e&&t.nextElementSibling;)i=(t=t.nextElementSibling).offsetParent;var n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TH","TD","TABLE"].indexOf(i.nodeName)&&"static"===a(i,"position")?u(i):i:t?t.ownerDocument.documentElement:document.documentElement}function f(t){return null!==t.parentNode?f(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?t:e,o=i?e:t,r=document.createRange();r.setStart(n,0),r.setEnd(o,0);var a,s,h=r.commonAncestorContainer;if(t!==h&&e!==h||n.contains(o))return"BODY"===(s=(a=h).nodeName)||"HTML"!==s&&u(a.firstElementChild)!==a?u(h):h;var c=f(t);return c.host?m(c.host,e):m(t,f(e).host)}function g(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var n=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||n)[e]}return t[e]}function v(t,e){var i="x"===e?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(t["border"+i+"Width"])+parseFloat(t["border"+n+"Width"])}function w(t,e,i,n){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],d(10)?parseInt(i["offset"+t])+parseInt(n["margin"+("Height"===t?"Top":"Left")])+parseInt(n["margin"+("Height"===t?"Bottom":"Right")]):0)}function b(t){var e=t.body,i=t.documentElement,n=d(10)&&getComputedStyle(i);return{height:w("Height",e,i,n),width:w("Width",e,i,n)}}var y=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},x=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),C=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},M=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function O(t){return M({},t,{right:t.left+t.width,bottom:t.top+t.height})}function D(t){var e={};try{if(d(10)){e=t.getBoundingClientRect();var i=g(t,"top"),n=g(t,"left");e.top+=i,e.left+=n,e.bottom+=i,e.right+=n}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},r="HTML"===t.nodeName?b(t.ownerDocument):{},s=r.width||t.clientWidth||o.width,h=r.height||t.clientHeight||o.height,c=t.offsetWidth-s,p=t.offsetHeight-h;if(c||p){var l=a(t);c-=v(l,"x"),p-=v(l,"y"),o.width-=c,o.height-=p}return O(o)}function E(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=d(10),o="HTML"===e.nodeName,r=D(t),s=D(e),c=h(t),p=a(e),l=parseFloat(p.borderTopWidth),u=parseFloat(p.borderLeftWidth);i&&o&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var f=O({top:r.top-s.top-l,left:r.left-s.left-u,width:r.width,height:r.height});if(f.marginTop=0,f.marginLeft=0,!n&&o){var m=parseFloat(p.marginTop),v=parseFloat(p.marginLeft);f.top-=l-m,f.bottom-=l-m,f.left-=u-v,f.right-=u-v,f.marginTop=m,f.marginLeft=v}return(n&&!i?e.contains(c):e===c&&"BODY"!==c.nodeName)&&(f=function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=g(e,"top"),o=g(e,"left"),r=i?-1:1;return t.top+=n*r,t.bottom+=n*r,t.left+=o*r,t.right+=o*r,t}(f,e)),f}function B(t){if(!t||!t.parentElement||d())return document.documentElement;for(var e=t.parentElement;e&&"none"===a(e,"transform");)e=e.parentElement;return e||document.documentElement}function T(t,e,i,n){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r={top:0,left:0},p=o?B(t):m(t,c(e));if("viewport"===n)r=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=t.ownerDocument.documentElement,n=E(t,i),o=Math.max(i.clientWidth,window.innerWidth||0),r=Math.max(i.clientHeight,window.innerHeight||0),a=e?0:g(i),s=e?0:g(i,"left");return O({top:a-n.top+n.marginTop,left:s-n.left+n.marginLeft,width:o,height:r})}(p,o);else{var l=void 0;"scrollParent"===n?"BODY"===(l=h(s(e))).nodeName&&(l=t.ownerDocument.documentElement):l="window"===n?t.ownerDocument.documentElement:n;var d=E(l,p,o);if("HTML"!==l.nodeName||function t(e){var i=e.nodeName;if("BODY"===i||"HTML"===i)return!1;if("fixed"===a(e,"position"))return!0;var n=s(e);return!!n&&t(n)}(p))r=d;else{var u=b(t.ownerDocument),f=u.height,v=u.width;r.top+=d.top-d.marginTop,r.bottom=f+d.top,r.left+=d.left-d.marginLeft,r.right=v+d.left}}var w="number"==typeof(i=i||0);return r.left+=w?i:i.left||0,r.top+=w?i:i.top||0,r.right-=w?i:i.right||0,r.bottom-=w?i:i.bottom||0,r}function k(t,e,i,n,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=T(i,n,r,o),s={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},h=Object.keys(s).map(function(t){return M({key:t},s[t],{area:(e=s[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=h.filter(function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight}),p=c.length>0?c[0].key:h[0].key,l=t.split("-")[1];return p+(l?"-"+l:"")}function S(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(i,n?B(e):m(e,c(i)),n)}function N(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),i=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),n=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+n,height:t.offsetHeight+i}}function L(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function W(t,e,i){i=i.split("-")[0];var n=N(t),o={width:n.width,height:n.height},r=-1!==["right","left"].indexOf(i),a=r?"top":"left",s=r?"left":"top",h=r?"height":"width",c=r?"width":"height";return o[a]=e[a]+e[h]/2-n[h]/2,o[s]=i===s?e[s]-n[c]:e[L(s)],o}function H(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function P(t,e,i){return(void 0===i?t:t.slice(0,function(t,e,i){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===i});var n=H(t,function(t){return t[e]===i});return t.indexOf(n)}(t,"name",i))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&r(i)&&(e.offsets.popper=O(e.offsets.popper),e.offsets.reference=O(e.offsets.reference),e=i(e,t))}),e}function A(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=S(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=k(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=W(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=P(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function R(t,e){return t.some(function(t){var i=t.name;return t.enabled&&i===e})}function z(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length;n++){var o=e[n],r=o?""+o+i:t;if(void 0!==document.body.style[r])return r}return null}function j(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[z("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function Y(t){var e=t.ownerDocument;return e?e.defaultView:window}function X(t,e,i,n){i.updateBound=n,Y(t).addEventListener("resize",i.updateBound,{passive:!0});var o=h(t);return function t(e,i,n,o){var r="BODY"===e.nodeName,a=r?e.ownerDocument.defaultView:e;a.addEventListener(i,n,{passive:!0}),r||t(h(a.parentNode),i,n,o),o.push(a)}(o,"scroll",i.updateBound,i.scrollParents),i.scrollElement=o,i.eventsEnabled=!0,i}function I(){this.state.eventsEnabled||(this.state=X(this.reference,this.options,this.state,this.scheduleUpdate))}function F(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,Y(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function U(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function _(t,e){Object.keys(e).forEach(function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&U(e[i])&&(n="px"),t.style[i]=e[i]+n})}var $=i&&/Firefox/i.test(navigator.userAgent);function q(t,e,i){var n=H(t,function(t){return t.name===e}),o=!!n&&t.some(function(t){return t.name===i&&t.enabled&&t.order<n.order});if(!o){var r="`"+e+"`",a="`"+i+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}var J=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=J.slice(3);function K(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=V.indexOf(t),n=V.slice(i+1).concat(V.slice(0,i));return e?n.reverse():n}var Z={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function G(t,e,i,n){var o=[0,0],r=-1!==["right","left"].indexOf(n),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(H(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var h=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(h)[0]]),[a[s].split(h)[1]].concat(a.slice(s+1))]:[a];return(c=c.map(function(t,n){var o=(1===n?!r:r)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,i,n){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],a=o[2];if(!r)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=i;break;case"%":case"%r":default:s=n}return O(s)[e]/100*r}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}(t,o,e,i)})})).forEach(function(t,e){t.forEach(function(i,n){U(i)&&(o[e]+=i*("-"===t[n-1]?-1:1))})}),o}var Q={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],n=e.split("-")[1];if(n){var o=t.offsets,r=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(i),h=s?"left":"top",c=s?"width":"height",p={start:C({},h,r[h]),end:C({},h,r[h]+r[c]-a[c])};t.offsets.popper=M({},a,p[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i=e.offset,n=t.placement,o=t.offsets,r=o.popper,a=o.reference,s=n.split("-")[0],h=void 0;return h=U(+i)?[+i,0]:G(i,r,a,s),"left"===s?(r.top+=h[0],r.left-=h[1]):"right"===s?(r.top+=h[0],r.left+=h[1]):"top"===s?(r.left+=h[0],r.top-=h[1]):"bottom"===s&&(r.left+=h[0],r.top+=h[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||u(t.instance.popper);t.instance.reference===i&&(i=u(i));var n=z("transform"),o=t.instance.popper.style,r=o.top,a=o.left,s=o[n];o.top="",o.left="",o[n]="";var h=T(t.instance.popper,t.instance.reference,e.padding,i,t.positionFixed);o.top=r,o.left=a,o[n]=s,e.boundaries=h;var c=e.priority,p=t.offsets.popper,l={primary:function(t){var i=p[t];return p[t]<h[t]&&!e.escapeWithReference&&(i=Math.max(p[t],h[t])),C({},t,i)},secondary:function(t){var i="right"===t?"left":"top",n=p[i];return p[t]>h[t]&&!e.escapeWithReference&&(n=Math.min(p[i],h[t]-("right"===t?p.width:p.height))),C({},i,n)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";p=M({},p,l[e](t))}),t.offsets.popper=p,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,n=e.reference,o=t.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",h=a?"left":"top",c=a?"width":"height";return i[s]<r(n[h])&&(t.offsets.popper[h]=r(n[h])-i[c]),i[h]>r(n[s])&&(t.offsets.popper[h]=r(n[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var i;if(!q(t.instance.modifiers,"arrow","keepTogether"))return t;var n=e.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],r=t.offsets,s=r.popper,h=r.reference,c=-1!==["left","right"].indexOf(o),p=c?"height":"width",l=c?"Top":"Left",d=l.toLowerCase(),u=c?"left":"top",f=c?"bottom":"right",m=N(n)[p];h[f]-m<s[d]&&(t.offsets.popper[d]-=s[d]-(h[f]-m)),h[d]+m>s[f]&&(t.offsets.popper[d]+=h[d]+m-s[f]),t.offsets.popper=O(t.offsets.popper);var g=h[d]+h[p]/2-m/2,v=a(t.instance.popper),w=parseFloat(v["margin"+l]),b=parseFloat(v["border"+l+"Width"]),y=g-t.offsets.popper[d]-w-b;return y=Math.max(Math.min(s[p]-m,y),0),t.arrowElement=n,t.offsets.arrow=(C(i={},d,Math.round(y)),C(i,u,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(R(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=T(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),n=t.placement.split("-")[0],o=L(n),r=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case Z.FLIP:a=[n,o];break;case Z.CLOCKWISE:a=K(n);break;case Z.COUNTERCLOCKWISE:a=K(n,!0);break;default:a=e.behavior}return a.forEach(function(s,h){if(n!==s||a.length===h+1)return t;n=t.placement.split("-")[0],o=L(n);var c=t.offsets.popper,p=t.offsets.reference,l=Math.floor,d="left"===n&&l(c.right)>l(p.left)||"right"===n&&l(c.left)<l(p.right)||"top"===n&&l(c.bottom)>l(p.top)||"bottom"===n&&l(c.top)<l(p.bottom),u=l(c.left)<l(i.left),f=l(c.right)>l(i.right),m=l(c.top)<l(i.top),g=l(c.bottom)>l(i.bottom),v="left"===n&&u||"right"===n&&f||"top"===n&&m||"bottom"===n&&g,w=-1!==["top","bottom"].indexOf(n),b=!!e.flipVariations&&(w&&"start"===r&&u||w&&"end"===r&&f||!w&&"start"===r&&m||!w&&"end"===r&&g),y=!!e.flipVariationsByContent&&(w&&"start"===r&&f||w&&"end"===r&&u||!w&&"start"===r&&g||!w&&"end"===r&&m),x=b||y;(d||v||x)&&(t.flipped=!0,(d||v)&&(n=a[h+1]),x&&(r=function(t){return"end"===t?"start":"start"===t?"end":t}(r)),t.placement=n+(r?"-"+r:""),t.offsets.popper=M({},t.offsets.popper,W(t.instance.popper,t.offsets.reference,t.placement)),t=P(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],n=t.offsets,o=n.popper,r=n.reference,a=-1!==["left","right"].indexOf(i),s=-1===["top","left"].indexOf(i);return o[a?"left":"top"]=r[i]-(s?o[a?"width":"height"]:0),t.placement=L(e),t.offsets.popper=O(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!q(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=H(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,n=e.y,o=t.offsets.popper,r=H(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==r?r:e.gpuAcceleration,s=u(t.instance.popper),h=D(s),c={position:o.position},p=function(t,e){var i=t.offsets,n=i.popper,o=i.reference,r=Math.round,a=Math.floor,s=function(t){return t},h=r(o.width),c=r(n.width),p=-1!==["left","right"].indexOf(t.placement),l=-1!==t.placement.indexOf("-"),d=e?p||l||h%2==c%2?r:a:s,u=e?r:s;return{left:d(h%2==1&&c%2==1&&!l&&e?n.left-1:n.left),top:u(n.top),bottom:u(n.bottom),right:d(n.right)}}(t,window.devicePixelRatio<2||!$),l="bottom"===i?"top":"bottom",d="right"===n?"left":"right",f=z("transform"),m=void 0,g=void 0;if(g="bottom"===l?"HTML"===s.nodeName?-s.clientHeight+p.bottom:-h.height+p.bottom:p.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+p.right:-h.width+p.right:p.left,a&&f)c[f]="translate3d("+m+"px, "+g+"px, 0)",c[l]=0,c[d]=0,c.willChange="transform";else{var v="bottom"===l?-1:1,w="right"===d?-1:1;c[l]=g*v,c[d]=m*w,c.willChange=l+", "+d}var b={"x-placement":t.placement};return t.attributes=M({},b,t.attributes),t.styles=M({},c,t.styles),t.arrowStyles=M({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,i;return _(t.instance.popper,t.styles),e=t.instance.popper,i=t.attributes,Object.keys(i).forEach(function(t){!1!==i[t]?e.setAttribute(t,i[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&_(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,n,o){var r=S(o,e,t,i.positionFixed),a=k(i.placement,r,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",a),_(e,{position:i.positionFixed?"fixed":"absolute"}),i},gpuAcceleration:void 0}}},tt=function(){function t(e,i){var n=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};y(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=o(this.update.bind(this)),this.options=M({},t.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(M({},t.Defaults.modifiers,a.modifiers)).forEach(function(e){n.options.modifiers[e]=M({},t.Defaults.modifiers[e]||{},a.modifiers?a.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return M({name:t},n.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&r(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)}),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return x(t,[{key:"update",value:function(){return A.call(this)}},{key:"destroy",value:function(){return j.call(this)}},{key:"enableEventListeners",value:function(){return I.call(this)}},{key:"disableEventListeners",value:function(){return F.call(this)}}]),t}();tt.Utils=("undefined"!=typeof window?window:t).PopperUtils,tt.placements=J,tt.Defaults=Q,e.default=tt}.call(this,i(28))},54:function(t,e,i){t.exports=function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}function e(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function i(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function n(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),i.push.apply(i,n)}return i}function o(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(o,!0).forEach(function(e){i(t,e,o[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(o).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))})}return t}function r(t){return function(t){if(Array.isArray(t)){for(var e=0,i=new Array(t.length);e<t.length;e++)i[e]=t[e];return i}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var a="undefined"!=typeof window&&void 0!==window.document,s=a?window:{},h=!!a&&"ontouchstart"in s.document.documentElement,c=!!a&&"PointerEvent"in s,p="".concat("cropper","-crop"),l="".concat("cropper","-disabled"),d="".concat("cropper","-hidden"),u="".concat("cropper","-hide"),f="".concat("cropper","-invisible"),m="".concat("cropper","-modal"),g="".concat("cropper","-move"),v="".concat("cropper","Action"),w="".concat("cropper","Preview"),b=h?"touchstart":"mousedown",y=h?"touchmove":"mousemove",x=h?"touchend touchcancel":"mouseup",C=c?"pointerdown":b,M=c?"pointermove":y,O=c?"pointerup pointercancel":x,D=/^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/,E=/^data:/,B=/^data:image\/jpeg;base64,/,T=/^img|canvas$/i,k={viewMode:0,dragMode:"crop",initialAspectRatio:NaN,aspectRatio:NaN,data:null,preview:"",responsive:!0,restore:!0,checkCrossOrigin:!0,checkOrientation:!0,modal:!0,guides:!0,center:!0,highlight:!0,background:!0,autoCrop:!0,autoCropArea:.8,movable:!0,rotatable:!0,scalable:!0,zoomable:!0,zoomOnTouch:!0,zoomOnWheel:!0,wheelZoomRatio:.1,cropBoxMovable:!0,cropBoxResizable:!0,toggleDragModeOnDblclick:!0,minCanvasWidth:0,minCanvasHeight:0,minCropBoxWidth:0,minCropBoxHeight:0,minContainerWidth:200,minContainerHeight:100,ready:null,cropstart:null,cropmove:null,cropend:null,crop:null,zoom:null},S=Number.isNaN||s.isNaN;function N(t){return"number"==typeof t&&!S(t)}var L=function(t){return t>0&&t<1/0};function W(t){return void 0===t}function H(e){return"object"===t(e)&&null!==e}var P=Object.prototype.hasOwnProperty;function A(t){if(!H(t))return!1;try{var e=t.constructor,i=e.prototype;return e&&i&&P.call(i,"isPrototypeOf")}catch(t){return!1}}function R(t){return"function"==typeof t}var z=Array.prototype.slice;function j(t){return Array.from?Array.from(t):z.call(t)}function Y(t,e){return t&&R(e)&&(Array.isArray(t)||N(t.length)?j(t).forEach(function(i,n){e.call(t,i,n,t)}):H(t)&&Object.keys(t).forEach(function(i){e.call(t,t[i],i,t)})),t}var X=Object.assign||function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];return H(t)&&i.length>0&&i.forEach(function(e){H(e)&&Object.keys(e).forEach(function(i){t[i]=e[i]})}),t},I=/\.\d*(?:0|9){12}\d*$/;function F(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e11;return I.test(t)?Math.round(t*e)/e:t}var U=/^width|height|left|top|marginLeft|marginTop$/;function _(t,e){var i=t.style;Y(e,function(t,e){U.test(e)&&N(t)&&(t="".concat(t,"px")),i[e]=t})}function $(t,e){if(e)if(N(t.length))Y(t,function(t){$(t,e)});else if(t.classList)t.classList.add(e);else{var i=t.className.trim();i?i.indexOf(e)<0&&(t.className="".concat(i," ").concat(e)):t.className=e}}function q(t,e){e&&(N(t.length)?Y(t,function(t){q(t,e)}):t.classList?t.classList.remove(e):t.className.indexOf(e)>=0&&(t.className=t.className.replace(e,"")))}function J(t,e,i){e&&(N(t.length)?Y(t,function(t){J(t,e,i)}):i?$(t,e):q(t,e))}var V=/([a-z\d])([A-Z])/g;function K(t){return t.replace(V,"$1-$2").toLowerCase()}function Z(t,e){return H(t[e])?t[e]:t.dataset?t.dataset[e]:t.getAttribute("data-".concat(K(e)))}function G(t,e,i){H(i)?t[e]=i:t.dataset?t.dataset[e]=i:t.setAttribute("data-".concat(K(e)),i)}var Q=/\s\s*/,tt=function(){var t=!1;if(a){var e=!1,i=function(){},n=Object.defineProperty({},"once",{get:function(){return t=!0,e},set:function(t){e=t}});s.addEventListener("test",i,n),s.removeEventListener("test",i,n)}return t}();function et(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i;e.trim().split(Q).forEach(function(e){if(!tt){var r=t.listeners;r&&r[e]&&r[e][i]&&(o=r[e][i],delete r[e][i],0===Object.keys(r[e]).length&&delete r[e],0===Object.keys(r).length&&delete t.listeners)}t.removeEventListener(e,o,n)})}function it(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=i;e.trim().split(Q).forEach(function(e){if(n.once&&!tt){var r=t.listeners,a=void 0===r?{}:r;o=function(){delete a[e][i],t.removeEventListener(e,o,n);for(var r=arguments.length,s=new Array(r),h=0;h<r;h++)s[h]=arguments[h];i.apply(t,s)},a[e]||(a[e]={}),a[e][i]&&t.removeEventListener(e,a[e][i],n),a[e][i]=o,t.listeners=a}t.addEventListener(e,o,n)})}function nt(t,e,i){var n;return R(Event)&&R(CustomEvent)?n=new CustomEvent(e,{detail:i,bubbles:!0,cancelable:!0}):(n=document.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,i),t.dispatchEvent(n)}function ot(t){var e=t.getBoundingClientRect();return{left:e.left+(window.pageXOffset-document.documentElement.clientLeft),top:e.top+(window.pageYOffset-document.documentElement.clientTop)}}var rt=s.location,at=/^(\w+:)\/\/([^:/?#]*):?(\d*)/i;function st(t){var e=t.match(at);return null!==e&&(e[1]!==rt.protocol||e[2]!==rt.hostname||e[3]!==rt.port)}function ht(t){var e="timestamp=".concat((new Date).getTime());return t+(-1===t.indexOf("?")?"?":"&")+e}function ct(t){var e=t.rotate,i=t.scaleX,n=t.scaleY,o=t.translateX,r=t.translateY,a=[];N(o)&&0!==o&&a.push("translateX(".concat(o,"px)")),N(r)&&0!==r&&a.push("translateY(".concat(r,"px)")),N(e)&&0!==e&&a.push("rotate(".concat(e,"deg)")),N(i)&&1!==i&&a.push("scaleX(".concat(i,")")),N(n)&&1!==n&&a.push("scaleY(".concat(n,")"));var s=a.length?a.join(" "):"none";return{WebkitTransform:s,msTransform:s,transform:s}}function pt(t,e){var i=t.pageX,n=t.pageY,r={endX:i,endY:n};return e?r:o({startX:i,startY:n},r)}function lt(t){var e=t.aspectRatio,i=t.height,n=t.width,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"contain",r=L(n),a=L(i);if(r&&a){var s=i*e;"contain"===o&&s>n||"cover"===o&&s<n?i=n/e:n=i*e}else r?i=n/e:a&&(n=i*e);return{width:n,height:i}}function dt(t,e,i,n){var o=e.aspectRatio,a=e.naturalWidth,s=e.naturalHeight,h=e.rotate,c=void 0===h?0:h,p=e.scaleX,l=void 0===p?1:p,d=e.scaleY,u=void 0===d?1:d,f=i.aspectRatio,m=i.naturalWidth,g=i.naturalHeight,v=n.fillColor,w=void 0===v?"transparent":v,b=n.imageSmoothingEnabled,y=void 0===b||b,x=n.imageSmoothingQuality,C=void 0===x?"low":x,M=n.maxWidth,O=void 0===M?1/0:M,D=n.maxHeight,E=void 0===D?1/0:D,B=n.minWidth,T=void 0===B?0:B,k=n.minHeight,S=void 0===k?0:k,N=document.createElement("canvas"),L=N.getContext("2d"),W=lt({aspectRatio:f,width:O,height:E}),H=lt({aspectRatio:f,width:T,height:S},"cover"),P=Math.min(W.width,Math.max(H.width,m)),A=Math.min(W.height,Math.max(H.height,g)),R=lt({aspectRatio:o,width:O,height:E}),z=lt({aspectRatio:o,width:T,height:S},"cover"),j=Math.min(R.width,Math.max(z.width,a)),Y=Math.min(R.height,Math.max(z.height,s)),X=[-j/2,-Y/2,j,Y];return N.width=F(P),N.height=F(A),L.fillStyle=w,L.fillRect(0,0,P,A),L.save(),L.translate(P/2,A/2),L.rotate(c*Math.PI/180),L.scale(l,u),L.imageSmoothingEnabled=y,L.imageSmoothingQuality=C,L.drawImage.apply(L,[t].concat(r(X.map(function(t){return Math.floor(F(t))})))),L.restore(),N}var ut=String.fromCharCode,ft=/^data:.*,/;function mt(t){var e,i=new DataView(t);try{var n,o,r;if(255===i.getUint8(0)&&216===i.getUint8(1))for(var a=i.byteLength,s=2;s+1<a;){if(255===i.getUint8(s)&&225===i.getUint8(s+1)){o=s;break}s+=1}if(o){var h=o+10;if("Exif"===function(t,e,i){var n="";i+=e;for(var o=e;o<i;o+=1)n+=ut(t.getUint8(o));return n}(i,o+4,4)){var c=i.getUint16(h);if(((n=18761===c)||19789===c)&&42===i.getUint16(h+2,n)){var p=i.getUint32(h+4,n);p>=8&&(r=h+p)}}}if(r){var l,d,u=i.getUint16(r,n);for(d=0;d<u;d+=1)if(l=r+12*d+2,274===i.getUint16(l,n)){l+=8,e=i.getUint16(l,n),i.setUint16(l,1,n);break}}}catch(t){e=1}return e}var gt={render:function(){this.initContainer(),this.initCanvas(),this.initCropBox(),this.renderCanvas(),this.cropped&&this.renderCropBox()},initContainer:function(){var t=this.element,e=this.options,i=this.container,n=this.cropper;$(n,d),q(t,d);var o={width:Math.max(i.offsetWidth,Number(e.minContainerWidth)||200),height:Math.max(i.offsetHeight,Number(e.minContainerHeight)||100)};this.containerData=o,_(n,{width:o.width,height:o.height}),$(t,d),q(n,d)},initCanvas:function(){var t=this.containerData,e=this.imageData,i=this.options.viewMode,n=Math.abs(e.rotate)%180==90,o=n?e.naturalHeight:e.naturalWidth,r=n?e.naturalWidth:e.naturalHeight,a=o/r,s=t.width,h=t.height;t.height*a>t.width?3===i?s=t.height*a:h=t.width/a:3===i?h=t.width/a:s=t.height*a;var c={aspectRatio:a,naturalWidth:o,naturalHeight:r,width:s,height:h};c.left=(t.width-s)/2,c.top=(t.height-h)/2,c.oldLeft=c.left,c.oldTop=c.top,this.canvasData=c,this.limited=1===i||2===i,this.limitCanvas(!0,!0),this.initialImageData=X({},e),this.initialCanvasData=X({},c)},limitCanvas:function(t,e){var i=this.options,n=this.containerData,o=this.canvasData,r=this.cropBoxData,a=i.viewMode,s=o.aspectRatio,h=this.cropped&&r;if(t){var c=Number(i.minCanvasWidth)||0,p=Number(i.minCanvasHeight)||0;a>1?(c=Math.max(c,n.width),p=Math.max(p,n.height),3===a&&(p*s>c?c=p*s:p=c/s)):a>0&&(c?c=Math.max(c,h?r.width:0):p?p=Math.max(p,h?r.height:0):h&&(c=r.width,(p=r.height)*s>c?c=p*s:p=c/s));var l=lt({aspectRatio:s,width:c,height:p});c=l.width,p=l.height,o.minWidth=c,o.minHeight=p,o.maxWidth=1/0,o.maxHeight=1/0}if(e)if(a>(h?0:1)){var d=n.width-o.width,u=n.height-o.height;o.minLeft=Math.min(0,d),o.minTop=Math.min(0,u),o.maxLeft=Math.max(0,d),o.maxTop=Math.max(0,u),h&&this.limited&&(o.minLeft=Math.min(r.left,r.left+(r.width-o.width)),o.minTop=Math.min(r.top,r.top+(r.height-o.height)),o.maxLeft=r.left,o.maxTop=r.top,2===a&&(o.width>=n.width&&(o.minLeft=Math.min(0,d),o.maxLeft=Math.max(0,d)),o.height>=n.height&&(o.minTop=Math.min(0,u),o.maxTop=Math.max(0,u))))}else o.minLeft=-o.width,o.minTop=-o.height,o.maxLeft=n.width,o.maxTop=n.height},renderCanvas:function(t,e){var i=this.canvasData,n=this.imageData;if(e){var o=function(t){var e=t.width,i=t.height,n=t.degree;if(90==(n=Math.abs(n)%180))return{width:i,height:e};var o=n%90*Math.PI/180,r=Math.sin(o),a=Math.cos(o),s=e*a+i*r,h=e*r+i*a;return n>90?{width:h,height:s}:{width:s,height:h}}({width:n.naturalWidth*Math.abs(n.scaleX||1),height:n.naturalHeight*Math.abs(n.scaleY||1),degree:n.rotate||0}),r=o.width,a=o.height,s=i.width*(r/i.naturalWidth),h=i.height*(a/i.naturalHeight);i.left-=(s-i.width)/2,i.top-=(h-i.height)/2,i.width=s,i.height=h,i.aspectRatio=r/a,i.naturalWidth=r,i.naturalHeight=a,this.limitCanvas(!0,!1)}(i.width>i.maxWidth||i.width<i.minWidth)&&(i.left=i.oldLeft),(i.height>i.maxHeight||i.height<i.minHeight)&&(i.top=i.oldTop),i.width=Math.min(Math.max(i.width,i.minWidth),i.maxWidth),i.height=Math.min(Math.max(i.height,i.minHeight),i.maxHeight),this.limitCanvas(!1,!0),i.left=Math.min(Math.max(i.left,i.minLeft),i.maxLeft),i.top=Math.min(Math.max(i.top,i.minTop),i.maxTop),i.oldLeft=i.left,i.oldTop=i.top,_(this.canvas,X({width:i.width,height:i.height},ct({translateX:i.left,translateY:i.top}))),this.renderImage(t),this.cropped&&this.limited&&this.limitCropBox(!0,!0)},renderImage:function(t){var e=this.canvasData,i=this.imageData,n=i.naturalWidth*(e.width/e.naturalWidth),o=i.naturalHeight*(e.height/e.naturalHeight);X(i,{width:n,height:o,left:(e.width-n)/2,top:(e.height-o)/2}),_(this.image,X({width:i.width,height:i.height},ct(X({translateX:i.left,translateY:i.top},i)))),t&&this.output()},initCropBox:function(){var t=this.options,e=this.canvasData,i=t.aspectRatio||t.initialAspectRatio,n=Number(t.autoCropArea)||.8,o={width:e.width,height:e.height};i&&(e.height*i>e.width?o.height=o.width/i:o.width=o.height*i),this.cropBoxData=o,this.limitCropBox(!0,!0),o.width=Math.min(Math.max(o.width,o.minWidth),o.maxWidth),o.height=Math.min(Math.max(o.height,o.minHeight),o.maxHeight),o.width=Math.max(o.minWidth,o.width*n),o.height=Math.max(o.minHeight,o.height*n),o.left=e.left+(e.width-o.width)/2,o.top=e.top+(e.height-o.height)/2,o.oldLeft=o.left,o.oldTop=o.top,this.initialCropBoxData=X({},o)},limitCropBox:function(t,e){var i=this.options,n=this.containerData,o=this.canvasData,r=this.cropBoxData,a=this.limited,s=i.aspectRatio;if(t){var h=Number(i.minCropBoxWidth)||0,c=Number(i.minCropBoxHeight)||0,p=a?Math.min(n.width,o.width,o.width+o.left,n.width-o.left):n.width,l=a?Math.min(n.height,o.height,o.height+o.top,n.height-o.top):n.height;h=Math.min(h,n.width),c=Math.min(c,n.height),s&&(h&&c?c*s>h?c=h/s:h=c*s:h?c=h/s:c&&(h=c*s),l*s>p?l=p/s:p=l*s),r.minWidth=Math.min(h,p),r.minHeight=Math.min(c,l),r.maxWidth=p,r.maxHeight=l}e&&(a?(r.minLeft=Math.max(0,o.left),r.minTop=Math.max(0,o.top),r.maxLeft=Math.min(n.width,o.left+o.width)-r.width,r.maxTop=Math.min(n.height,o.top+o.height)-r.height):(r.minLeft=0,r.minTop=0,r.maxLeft=n.width-r.width,r.maxTop=n.height-r.height))},renderCropBox:function(){var t=this.options,e=this.containerData,i=this.cropBoxData;(i.width>i.maxWidth||i.width<i.minWidth)&&(i.left=i.oldLeft),(i.height>i.maxHeight||i.height<i.minHeight)&&(i.top=i.oldTop),i.width=Math.min(Math.max(i.width,i.minWidth),i.maxWidth),i.height=Math.min(Math.max(i.height,i.minHeight),i.maxHeight),this.limitCropBox(!1,!0),i.left=Math.min(Math.max(i.left,i.minLeft),i.maxLeft),i.top=Math.min(Math.max(i.top,i.minTop),i.maxTop),i.oldLeft=i.left,i.oldTop=i.top,t.movable&&t.cropBoxMovable&&G(this.face,v,i.width>=e.width&&i.height>=e.height?"move":"all"),_(this.cropBox,X({width:i.width,height:i.height},ct({translateX:i.left,translateY:i.top}))),this.cropped&&this.limited&&this.limitCanvas(!0,!0),this.disabled||this.output()},output:function(){this.preview(),nt(this.element,"crop",this.getData())}},vt={initPreview:function(){var t=this.element,e=this.crossOrigin,i=this.options.preview,n=e?this.crossOriginUrl:this.url,o=t.alt||"The image to preview",r=document.createElement("img");if(e&&(r.crossOrigin=e),r.src=n,r.alt=o,this.viewBox.appendChild(r),this.viewBoxImage=r,i){var a=i;"string"==typeof i?a=t.ownerDocument.querySelectorAll(i):i.querySelector&&(a=[i]),this.previews=a,Y(a,function(t){var i=document.createElement("img");G(t,w,{width:t.offsetWidth,height:t.offsetHeight,html:t.innerHTML}),e&&(i.crossOrigin=e),i.src=n,i.alt=o,i.style.cssText='display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;"',t.innerHTML="",t.appendChild(i)})}},resetPreview:function(){Y(this.previews,function(t){var e=Z(t,w);_(t,{width:e.width,height:e.height}),t.innerHTML=e.html,function(t,e){if(H(t[e]))try{delete t[e]}catch(i){t[e]=void 0}else if(t.dataset)try{delete t.dataset[e]}catch(i){t.dataset[e]=void 0}else t.removeAttribute("data-".concat(K(e)))}(t,w)})},preview:function(){var t=this.imageData,e=this.canvasData,i=this.cropBoxData,n=i.width,o=i.height,r=t.width,a=t.height,s=i.left-e.left-t.left,h=i.top-e.top-t.top;this.cropped&&!this.disabled&&(_(this.viewBoxImage,X({width:r,height:a},ct(X({translateX:-s,translateY:-h},t)))),Y(this.previews,function(e){var i=Z(e,w),c=i.width,p=i.height,l=c,d=p,u=1;n&&(d=o*(u=c/n)),o&&d>p&&(l=n*(u=p/o),d=p),_(e,{width:l,height:d}),_(e.getElementsByTagName("img")[0],X({width:r*u,height:a*u},ct(X({translateX:-s*u,translateY:-h*u},t))))}))}},wt={bind:function(){var t=this.element,e=this.options,i=this.cropper;R(e.cropstart)&&it(t,"cropstart",e.cropstart),R(e.cropmove)&&it(t,"cropmove",e.cropmove),R(e.cropend)&&it(t,"cropend",e.cropend),R(e.crop)&&it(t,"crop",e.crop),R(e.zoom)&&it(t,"zoom",e.zoom),it(i,C,this.onCropStart=this.cropStart.bind(this)),e.zoomable&&e.zoomOnWheel&&it(i,"wheel",this.onWheel=this.wheel.bind(this),{passive:!1,capture:!0}),e.toggleDragModeOnDblclick&&it(i,"dblclick",this.onDblclick=this.dblclick.bind(this)),it(t.ownerDocument,M,this.onCropMove=this.cropMove.bind(this)),it(t.ownerDocument,O,this.onCropEnd=this.cropEnd.bind(this)),e.responsive&&it(window,"resize",this.onResize=this.resize.bind(this))},unbind:function(){var t=this.element,e=this.options,i=this.cropper;R(e.cropstart)&&et(t,"cropstart",e.cropstart),R(e.cropmove)&&et(t,"cropmove",e.cropmove),R(e.cropend)&&et(t,"cropend",e.cropend),R(e.crop)&&et(t,"crop",e.crop),R(e.zoom)&&et(t,"zoom",e.zoom),et(i,C,this.onCropStart),e.zoomable&&e.zoomOnWheel&&et(i,"wheel",this.onWheel,{passive:!1,capture:!0}),e.toggleDragModeOnDblclick&&et(i,"dblclick",this.onDblclick),et(t.ownerDocument,M,this.onCropMove),et(t.ownerDocument,O,this.onCropEnd),e.responsive&&et(window,"resize",this.onResize)}},bt={resize:function(){var t=this.options,e=this.container,i=this.containerData,n=Number(t.minContainerWidth)||200,o=Number(t.minContainerHeight)||100;if(!(this.disabled||i.width<=n||i.height<=o)){var r,a,s=e.offsetWidth/i.width;1===s&&e.offsetHeight===i.height||(t.restore&&(r=this.getCanvasData(),a=this.getCropBoxData()),this.render(),t.restore&&(this.setCanvasData(Y(r,function(t,e){r[e]=t*s})),this.setCropBoxData(Y(a,function(t,e){a[e]=t*s}))))}},dblclick:function(){var t,e;this.disabled||"none"===this.options.dragMode||this.setDragMode((t=this.dragBox,e=p,(t.classList?t.classList.contains(e):t.className.indexOf(e)>-1)?"move":"crop"))},wheel:function(t){var e=this,i=Number(this.options.wheelZoomRatio)||.1,n=1;this.disabled||(t.preventDefault(),this.wheeling||(this.wheeling=!0,setTimeout(function(){e.wheeling=!1},50),t.deltaY?n=t.deltaY>0?1:-1:t.wheelDelta?n=-t.wheelDelta/120:t.detail&&(n=t.detail>0?1:-1),this.zoom(-n*i,t)))},cropStart:function(t){var e=t.buttons,i=t.button;if(!(this.disabled||("mousedown"===t.type||"pointerdown"===t.type&&"mouse"===t.pointerType)&&(N(e)&&1!==e||N(i)&&0!==i||t.ctrlKey))){var n,o=this.options,r=this.pointers;t.changedTouches?Y(t.changedTouches,function(t){r[t.identifier]=pt(t)}):r[t.pointerId||0]=pt(t),n=Object.keys(r).length>1&&o.zoomable&&o.zoomOnTouch?"zoom":Z(t.target,v),D.test(n)&&!1!==nt(this.element,"cropstart",{originalEvent:t,action:n})&&(t.preventDefault(),this.action=n,this.cropping=!1,"crop"===n&&(this.cropping=!0,$(this.dragBox,m)))}},cropMove:function(t){var e=this.action;if(!this.disabled&&e){var i=this.pointers;t.preventDefault(),!1!==nt(this.element,"cropmove",{originalEvent:t,action:e})&&(t.changedTouches?Y(t.changedTouches,function(t){X(i[t.identifier]||{},pt(t,!0))}):X(i[t.pointerId||0]||{},pt(t,!0)),this.change(t))}},cropEnd:function(t){if(!this.disabled){var e=this.action,i=this.pointers;t.changedTouches?Y(t.changedTouches,function(t){delete i[t.identifier]}):delete i[t.pointerId||0],e&&(t.preventDefault(),Object.keys(i).length||(this.action=""),this.cropping&&(this.cropping=!1,J(this.dragBox,m,this.cropped&&this.options.modal)),nt(this.element,"cropend",{originalEvent:t,action:e}))}}},yt={change:function(t){var e,i=this.options,n=this.canvasData,r=this.containerData,a=this.cropBoxData,s=this.pointers,h=this.action,c=i.aspectRatio,p=a.left,l=a.top,u=a.width,f=a.height,m=p+u,g=l+f,v=0,w=0,b=r.width,y=r.height,x=!0;!c&&t.shiftKey&&(c=u&&f?u/f:1),this.limited&&(v=a.minLeft,w=a.minTop,b=v+Math.min(r.width,n.width,n.left+n.width),y=w+Math.min(r.height,n.height,n.top+n.height));var C=s[Object.keys(s)[0]],M={x:C.endX-C.startX,y:C.endY-C.startY},O=function(t){switch(t){case"e":m+M.x>b&&(M.x=b-m);break;case"w":p+M.x<v&&(M.x=v-p);break;case"n":l+M.y<w&&(M.y=w-l);break;case"s":g+M.y>y&&(M.y=y-g)}};switch(h){case"all":p+=M.x,l+=M.y;break;case"e":if(M.x>=0&&(m>=b||c&&(l<=w||g>=y))){x=!1;break}O("e"),(u+=M.x)<0&&(h="w",p-=u=-u),c&&(f=u/c,l+=(a.height-f)/2);break;case"n":if(M.y<=0&&(l<=w||c&&(p<=v||m>=b))){x=!1;break}O("n"),f-=M.y,l+=M.y,f<0&&(h="s",l-=f=-f),c&&(u=f*c,p+=(a.width-u)/2);break;case"w":if(M.x<=0&&(p<=v||c&&(l<=w||g>=y))){x=!1;break}O("w"),u-=M.x,p+=M.x,u<0&&(h="e",p-=u=-u),c&&(f=u/c,l+=(a.height-f)/2);break;case"s":if(M.y>=0&&(g>=y||c&&(p<=v||m>=b))){x=!1;break}O("s"),(f+=M.y)<0&&(h="n",l-=f=-f),c&&(u=f*c,p+=(a.width-u)/2);break;case"ne":if(c){if(M.y<=0&&(l<=w||m>=b)){x=!1;break}O("n"),f-=M.y,l+=M.y,u=f*c}else O("n"),O("e"),M.x>=0?m<b?u+=M.x:M.y<=0&&l<=w&&(x=!1):u+=M.x,M.y<=0?l>w&&(f-=M.y,l+=M.y):(f-=M.y,l+=M.y);u<0&&f<0?(h="sw",l-=f=-f,p-=u=-u):u<0?(h="nw",p-=u=-u):f<0&&(h="se",l-=f=-f);break;case"nw":if(c){if(M.y<=0&&(l<=w||p<=v)){x=!1;break}O("n"),f-=M.y,l+=M.y,u=f*c,p+=a.width-u}else O("n"),O("w"),M.x<=0?p>v?(u-=M.x,p+=M.x):M.y<=0&&l<=w&&(x=!1):(u-=M.x,p+=M.x),M.y<=0?l>w&&(f-=M.y,l+=M.y):(f-=M.y,l+=M.y);u<0&&f<0?(h="se",l-=f=-f,p-=u=-u):u<0?(h="ne",p-=u=-u):f<0&&(h="sw",l-=f=-f);break;case"sw":if(c){if(M.x<=0&&(p<=v||g>=y)){x=!1;break}O("w"),u-=M.x,p+=M.x,f=u/c}else O("s"),O("w"),M.x<=0?p>v?(u-=M.x,p+=M.x):M.y>=0&&g>=y&&(x=!1):(u-=M.x,p+=M.x),M.y>=0?g<y&&(f+=M.y):f+=M.y;u<0&&f<0?(h="ne",l-=f=-f,p-=u=-u):u<0?(h="se",p-=u=-u):f<0&&(h="nw",l-=f=-f);break;case"se":if(c){if(M.x>=0&&(m>=b||g>=y)){x=!1;break}O("e"),f=(u+=M.x)/c}else O("s"),O("e"),M.x>=0?m<b?u+=M.x:M.y>=0&&g>=y&&(x=!1):u+=M.x,M.y>=0?g<y&&(f+=M.y):f+=M.y;u<0&&f<0?(h="nw",l-=f=-f,p-=u=-u):u<0?(h="sw",p-=u=-u):f<0&&(h="ne",l-=f=-f);break;case"move":this.move(M.x,M.y),x=!1;break;case"zoom":this.zoom(function(t){var e=o({},t),i=[];return Y(t,function(t,n){delete e[n],Y(e,function(e){var n=Math.abs(t.startX-e.startX),o=Math.abs(t.startY-e.startY),r=Math.abs(t.endX-e.endX),a=Math.abs(t.endY-e.endY),s=Math.sqrt(n*n+o*o),h=(Math.sqrt(r*r+a*a)-s)/s;i.push(h)})}),i.sort(function(t,e){return Math.abs(t)<Math.abs(e)}),i[0]}(s),t),x=!1;break;case"crop":if(!M.x||!M.y){x=!1;break}e=ot(this.cropper),p=C.startX-e.left,l=C.startY-e.top,u=a.minWidth,f=a.minHeight,M.x>0?h=M.y>0?"se":"ne":M.x<0&&(p-=u,h=M.y>0?"sw":"nw"),M.y<0&&(l-=f),this.cropped||(q(this.cropBox,d),this.cropped=!0,this.limited&&this.limitCropBox(!0,!0))}x&&(a.width=u,a.height=f,a.left=p,a.top=l,this.action=h,this.renderCropBox()),Y(s,function(t){t.startX=t.endX,t.startY=t.endY})}},xt={crop:function(){return!this.ready||this.cropped||this.disabled||(this.cropped=!0,this.limitCropBox(!0,!0),this.options.modal&&$(this.dragBox,m),q(this.cropBox,d),this.setCropBoxData(this.initialCropBoxData)),this},reset:function(){return this.ready&&!this.disabled&&(this.imageData=X({},this.initialImageData),this.canvasData=X({},this.initialCanvasData),this.cropBoxData=X({},this.initialCropBoxData),this.renderCanvas(),this.cropped&&this.renderCropBox()),this},clear:function(){return this.cropped&&!this.disabled&&(X(this.cropBoxData,{left:0,top:0,width:0,height:0}),this.cropped=!1,this.renderCropBox(),this.limitCanvas(!0,!0),this.renderCanvas(),q(this.dragBox,m),$(this.cropBox,d)),this},replace:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return!this.disabled&&t&&(this.isImg&&(this.element.src=t),e?(this.url=t,this.image.src=t,this.ready&&(this.viewBoxImage.src=t,Y(this.previews,function(e){e.getElementsByTagName("img")[0].src=t}))):(this.isImg&&(this.replaced=!0),this.options.data=null,this.uncreate(),this.load(t))),this},enable:function(){return this.ready&&this.disabled&&(this.disabled=!1,q(this.cropper,l)),this},disable:function(){return this.ready&&!this.disabled&&(this.disabled=!0,$(this.cropper,l)),this},destroy:function(){var t=this.element;return t.cropper?(t.cropper=void 0,this.isImg&&this.replaced&&(t.src=this.originalUrl),this.uncreate(),this):this},move:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=this.canvasData,n=i.left,o=i.top;return this.moveTo(W(t)?t:n+Number(t),W(e)?e:o+Number(e))},moveTo:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=this.canvasData,n=!1;return t=Number(t),e=Number(e),this.ready&&!this.disabled&&this.options.movable&&(N(t)&&(i.left=t,n=!0),N(e)&&(i.top=e,n=!0),n&&this.renderCanvas(!0)),this},zoom:function(t,e){var i=this.canvasData;return t=(t=Number(t))<0?1/(1-t):1+t,this.zoomTo(i.width*t/i.naturalWidth,null,e)},zoomTo:function(t,e,i){var n=this.options,o=this.canvasData,r=o.width,a=o.height,s=o.naturalWidth,h=o.naturalHeight;if((t=Number(t))>=0&&this.ready&&!this.disabled&&n.zoomable){var c=s*t,p=h*t;if(!1===nt(this.element,"zoom",{ratio:t,oldRatio:r/s,originalEvent:i}))return this;if(i){var l=this.pointers,d=ot(this.cropper),u=l&&Object.keys(l).length?function(t){var e=0,i=0,n=0;return Y(t,function(t){var o=t.startX,r=t.startY;e+=o,i+=r,n+=1}),{pageX:e/=n,pageY:i/=n}}(l):{pageX:i.pageX,pageY:i.pageY};o.left-=(c-r)*((u.pageX-d.left-o.left)/r),o.top-=(p-a)*((u.pageY-d.top-o.top)/a)}else A(e)&&N(e.x)&&N(e.y)?(o.left-=(c-r)*((e.x-o.left)/r),o.top-=(p-a)*((e.y-o.top)/a)):(o.left-=(c-r)/2,o.top-=(p-a)/2);o.width=c,o.height=p,this.renderCanvas(!0)}return this},rotate:function(t){return this.rotateTo((this.imageData.rotate||0)+Number(t))},rotateTo:function(t){return N(t=Number(t))&&this.ready&&!this.disabled&&this.options.rotatable&&(this.imageData.rotate=t%360,this.renderCanvas(!0,!0)),this},scaleX:function(t){var e=this.imageData.scaleY;return this.scale(t,N(e)?e:1)},scaleY:function(t){var e=this.imageData.scaleX;return this.scale(N(e)?e:1,t)},scale:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,i=this.imageData,n=!1;return t=Number(t),e=Number(e),this.ready&&!this.disabled&&this.options.scalable&&(N(t)&&(i.scaleX=t,n=!0),N(e)&&(i.scaleY=e,n=!0),n&&this.renderCanvas(!0,!0)),this},getData:function(){var t,e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=this.options,n=this.imageData,o=this.canvasData,r=this.cropBoxData;if(this.ready&&this.cropped){t={x:r.left-o.left,y:r.top-o.top,width:r.width,height:r.height};var a=n.width/n.naturalWidth;if(Y(t,function(e,i){t[i]=e/a}),e){var s=Math.round(t.y+t.height),h=Math.round(t.x+t.width);t.x=Math.round(t.x),t.y=Math.round(t.y),t.width=h-t.x,t.height=s-t.y}}else t={x:0,y:0,width:0,height:0};return i.rotatable&&(t.rotate=n.rotate||0),i.scalable&&(t.scaleX=n.scaleX||1,t.scaleY=n.scaleY||1),t},setData:function(t){var e=this.options,i=this.imageData,n=this.canvasData,o={};if(this.ready&&!this.disabled&&A(t)){var r=!1;e.rotatable&&N(t.rotate)&&t.rotate!==i.rotate&&(i.rotate=t.rotate,r=!0),e.scalable&&(N(t.scaleX)&&t.scaleX!==i.scaleX&&(i.scaleX=t.scaleX,r=!0),N(t.scaleY)&&t.scaleY!==i.scaleY&&(i.scaleY=t.scaleY,r=!0)),r&&this.renderCanvas(!0,!0);var a=i.width/i.naturalWidth;N(t.x)&&(o.left=t.x*a+n.left),N(t.y)&&(o.top=t.y*a+n.top),N(t.width)&&(o.width=t.width*a),N(t.height)&&(o.height=t.height*a),this.setCropBoxData(o)}return this},getContainerData:function(){return this.ready?X({},this.containerData):{}},getImageData:function(){return this.sized?X({},this.imageData):{}},getCanvasData:function(){var t=this.canvasData,e={};return this.ready&&Y(["left","top","width","height","naturalWidth","naturalHeight"],function(i){e[i]=t[i]}),e},setCanvasData:function(t){var e=this.canvasData,i=e.aspectRatio;return this.ready&&!this.disabled&&A(t)&&(N(t.left)&&(e.left=t.left),N(t.top)&&(e.top=t.top),N(t.width)?(e.width=t.width,e.height=t.width/i):N(t.height)&&(e.height=t.height,e.width=t.height*i),this.renderCanvas(!0)),this},getCropBoxData:function(){var t,e=this.cropBoxData;return this.ready&&this.cropped&&(t={left:e.left,top:e.top,width:e.width,height:e.height}),t||{}},setCropBoxData:function(t){var e,i,n=this.cropBoxData,o=this.options.aspectRatio;return this.ready&&this.cropped&&!this.disabled&&A(t)&&(N(t.left)&&(n.left=t.left),N(t.top)&&(n.top=t.top),N(t.width)&&t.width!==n.width&&(e=!0,n.width=t.width),N(t.height)&&t.height!==n.height&&(i=!0,n.height=t.height),o&&(e?n.height=n.width/o:i&&(n.width=n.height*o)),this.renderCropBox()),this},getCroppedCanvas:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!this.ready||!window.HTMLCanvasElement)return null;var e=this.canvasData,i=dt(this.image,this.imageData,e,t);if(!this.cropped)return i;var n=this.getData(),o=n.x,a=n.y,s=n.width,h=n.height,c=i.width/Math.floor(e.naturalWidth);1!==c&&(o*=c,a*=c,s*=c,h*=c);var p=s/h,l=lt({aspectRatio:p,width:t.maxWidth||1/0,height:t.maxHeight||1/0}),d=lt({aspectRatio:p,width:t.minWidth||0,height:t.minHeight||0},"cover"),u=lt({aspectRatio:p,width:t.width||(1!==c?i.width:s),height:t.height||(1!==c?i.height:h)}),f=u.width,m=u.height;f=Math.min(l.width,Math.max(d.width,f)),m=Math.min(l.height,Math.max(d.height,m));var g=document.createElement("canvas"),v=g.getContext("2d");g.width=F(f),g.height=F(m),v.fillStyle=t.fillColor||"transparent",v.fillRect(0,0,f,m);var w=t.imageSmoothingEnabled,b=void 0===w||w,y=t.imageSmoothingQuality;v.imageSmoothingEnabled=b,y&&(v.imageSmoothingQuality=y);var x,C,M,O,D,E,B=i.width,T=i.height,k=o,S=a;k<=-s||k>B?(k=0,x=0,M=0,D=0):k<=0?(M=-k,k=0,D=x=Math.min(B,s+k)):k<=B&&(M=0,D=x=Math.min(s,B-k)),x<=0||S<=-h||S>T?(S=0,C=0,O=0,E=0):S<=0?(O=-S,S=0,E=C=Math.min(T,h+S)):S<=T&&(O=0,E=C=Math.min(h,T-S));var N=[k,S,x,C];if(D>0&&E>0){var L=f/s;N.push(M*L,O*L,D*L,E*L)}return v.drawImage.apply(v,[i].concat(r(N.map(function(t){return Math.floor(F(t))})))),g},setAspectRatio:function(t){var e=this.options;return this.disabled||W(t)||(e.aspectRatio=Math.max(0,t)||NaN,this.ready&&(this.initCropBox(),this.cropped&&this.renderCropBox())),this},setDragMode:function(t){var e=this.options,i=this.dragBox,n=this.face;if(this.ready&&!this.disabled){var o="crop"===t,r=e.movable&&"move"===t;t=o||r?t:"none",e.dragMode=t,G(i,v,t),J(i,p,o),J(i,g,r),e.cropBoxMovable||(G(n,v,t),J(n,p,o),J(n,g,r))}return this}},Ct=s.Cropper,Mt=function(){function t(e){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!e||!T.test(e.tagName))throw new Error("The first argument is required and must be an <img> or <canvas> element.");this.element=e,this.options=X({},k,A(i)&&i),this.cropped=!1,this.disabled=!1,this.pointers={},this.ready=!1,this.reloading=!1,this.replaced=!1,this.sized=!1,this.sizing=!1,this.init()}var i,n,o;return i=t,o=[{key:"noConflict",value:function(){return window.Cropper=Ct,t}},{key:"setDefaults",value:function(t){X(k,A(t)&&t)}}],(n=[{key:"init",value:function(){var t,e=this.element,i=e.tagName.toLowerCase();if(!e.cropper){if(e.cropper=this,"img"===i){if(this.isImg=!0,t=e.getAttribute("src")||"",this.originalUrl=t,!t)return;t=e.src}else"canvas"===i&&window.HTMLCanvasElement&&(t=e.toDataURL());this.load(t)}}},{key:"load",value:function(t){var e=this;if(t){this.url=t,this.imageData={};var i=this.element,n=this.options;if(n.rotatable||n.scalable||(n.checkOrientation=!1),n.checkOrientation&&window.ArrayBuffer)if(E.test(t))B.test(t)?this.read((o=t.replace(ft,""),r=atob(o),a=new ArrayBuffer(r.length),Y(s=new Uint8Array(a),function(t,e){s[e]=r.charCodeAt(e)}),a)):this.clone();else{var o,r,a,s,h=new XMLHttpRequest,c=this.clone.bind(this);this.reloading=!0,this.xhr=h,h.onabort=c,h.onerror=c,h.ontimeout=c,h.onprogress=function(){"image/jpeg"!==h.getResponseHeader("content-type")&&h.abort()},h.onload=function(){e.read(h.response)},h.onloadend=function(){e.reloading=!1,e.xhr=null},n.checkCrossOrigin&&st(t)&&i.crossOrigin&&(t=ht(t)),h.open("GET",t),h.responseType="arraybuffer",h.withCredentials="use-credentials"===i.crossOrigin,h.send()}else this.clone()}}},{key:"read",value:function(t){var e=this.options,i=this.imageData,n=mt(t),o=0,r=1,a=1;if(n>1){this.url=function(t,e){for(var i=[],n=new Uint8Array(t);n.length>0;)i.push(ut.apply(null,j(n.subarray(0,8192)))),n=n.subarray(8192);return"data:".concat(e,";base64,").concat(btoa(i.join("")))}(t,"image/jpeg");var s=function(t){var e=0,i=1,n=1;switch(t){case 2:i=-1;break;case 3:e=-180;break;case 4:n=-1;break;case 5:e=90,n=-1;break;case 6:e=90;break;case 7:e=90,i=-1;break;case 8:e=-90}return{rotate:e,scaleX:i,scaleY:n}}(n);o=s.rotate,r=s.scaleX,a=s.scaleY}e.rotatable&&(i.rotate=o),e.scalable&&(i.scaleX=r,i.scaleY=a),this.clone()}},{key:"clone",value:function(){var t=this.element,e=this.url,i=t.crossOrigin,n=e;this.options.checkCrossOrigin&&st(e)&&(i||(i="anonymous"),n=ht(e)),this.crossOrigin=i,this.crossOriginUrl=n;var o=document.createElement("img");i&&(o.crossOrigin=i),o.src=n||e,o.alt=t.alt||"The image to crop",this.image=o,o.onload=this.start.bind(this),o.onerror=this.stop.bind(this),$(o,u),t.parentNode.insertBefore(o,t.nextSibling)}},{key:"start",value:function(){var t=this,e=this.image;e.onload=null,e.onerror=null,this.sizing=!0;var i=s.navigator&&/(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(s.navigator.userAgent),n=function(e,i){X(t.imageData,{naturalWidth:e,naturalHeight:i,aspectRatio:e/i}),t.sizing=!1,t.sized=!0,t.build()};if(!e.naturalWidth||i){var o=document.createElement("img"),r=document.body||document.documentElement;this.sizingImage=o,o.onload=function(){n(o.width,o.height),i||r.removeChild(o)},o.src=e.src,i||(o.style.cssText="left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;",r.appendChild(o))}else n(e.naturalWidth,e.naturalHeight)}},{key:"stop",value:function(){var t=this.image;t.onload=null,t.onerror=null,t.parentNode.removeChild(t),this.image=null}},{key:"build",value:function(){if(this.sized&&!this.ready){var t=this.element,e=this.options,i=this.image,n=t.parentNode,o=document.createElement("div");o.innerHTML='<div class="cropper-container" touch-action="none"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-cropper-action="e"></span><span class="cropper-line line-n" data-cropper-action="n"></span><span class="cropper-line line-w" data-cropper-action="w"></span><span class="cropper-line line-s" data-cropper-action="s"></span><span class="cropper-point point-e" data-cropper-action="e"></span><span class="cropper-point point-n" data-cropper-action="n"></span><span class="cropper-point point-w" data-cropper-action="w"></span><span class="cropper-point point-s" data-cropper-action="s"></span><span class="cropper-point point-ne" data-cropper-action="ne"></span><span class="cropper-point point-nw" data-cropper-action="nw"></span><span class="cropper-point point-sw" data-cropper-action="sw"></span><span class="cropper-point point-se" data-cropper-action="se"></span></div></div>';var r=o.querySelector(".".concat("cropper","-container")),a=r.querySelector(".".concat("cropper","-canvas")),s=r.querySelector(".".concat("cropper","-drag-box")),h=r.querySelector(".".concat("cropper","-crop-box")),c=h.querySelector(".".concat("cropper","-face"));this.container=n,this.cropper=r,this.canvas=a,this.dragBox=s,this.cropBox=h,this.viewBox=r.querySelector(".".concat("cropper","-view-box")),this.face=c,a.appendChild(i),$(t,d),n.insertBefore(r,t.nextSibling),this.isImg||q(i,u),this.initPreview(),this.bind(),e.initialAspectRatio=Math.max(0,e.initialAspectRatio)||NaN,e.aspectRatio=Math.max(0,e.aspectRatio)||NaN,e.viewMode=Math.max(0,Math.min(3,Math.round(e.viewMode)))||0,$(h,d),e.guides||$(h.getElementsByClassName("".concat("cropper","-dashed")),d),e.center||$(h.getElementsByClassName("".concat("cropper","-center")),d),e.background&&$(r,"".concat("cropper","-bg")),e.highlight||$(c,f),e.cropBoxMovable&&($(c,g),G(c,v,"all")),e.cropBoxResizable||($(h.getElementsByClassName("".concat("cropper","-line")),d),$(h.getElementsByClassName("".concat("cropper","-point")),d)),this.render(),this.ready=!0,this.setDragMode(e.dragMode),e.autoCrop&&this.crop(),this.setData(e.data),R(e.ready)&&it(t,"ready",e.ready,{once:!0}),nt(t,"ready")}}},{key:"unbuild",value:function(){this.ready&&(this.ready=!1,this.unbind(),this.resetPreview(),this.cropper.parentNode.removeChild(this.cropper),q(this.element,d))}},{key:"uncreate",value:function(){this.ready?(this.unbuild(),this.ready=!1,this.cropped=!1):this.sizing?(this.sizingImage.onload=null,this.sizing=!1,this.sized=!1):this.reloading?(this.xhr.onabort=null,this.xhr.abort()):this.image&&this.stop()}}])&&e(i.prototype,n),o&&e(i,o),t}();return X(Mt.prototype,gt,vt,wt,bt,yt,xt),Mt}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXBvcHBlcmpzL2Rpc3QvdnVlLXBvcHBlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1jcm9wcGVyanMvZGlzdC9WdWVDcm9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wb3BwZXIuanMvZGlzdC9lc20vcG9wcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcm9wcGVyanMvZGlzdC9jcm9wcGVyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlIiwidCIsIm8iLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImhhc093blByb3BlcnR5IiwiZGVmYXVsdCIsIm4iLCJwcm9wcyIsInRhZ05hbWUiLCJ0eXBlIiwiU3RyaW5nIiwidHJpZ2dlciIsInZhbGlkYXRvciIsImluZGV4T2YiLCJkZWxheU9uTW91c2VPdmVyIiwiTnVtYmVyIiwiZGVsYXlPbk1vdXNlT3V0IiwiZGlzYWJsZWQiLCJCb29sZWFuIiwiY29udGVudCIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiYm91bmRhcmllc1NlbGVjdG9yIiwicmVmZXJlbmNlIiwiZm9yY2VTaG93IiwiZGF0YVZhbHVlIiwiYXBwZW5kVG9Cb2R5IiwidmlzaWJsZUFycm93IiwidHJhbnNpdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0Iiwib3B0aW9ucyIsIk9iamVjdCIsInJvb3RDbGFzcyIsImRhdGEiLCJyZWZlcmVuY2VFbG0iLCJwb3BwZXJKUyIsInNob3dQb3BwZXIiLCJjdXJyZW50UGxhY2VtZW50IiwicG9wcGVyT3B0aW9ucyIsInBsYWNlbWVudCIsImNvbXB1dGVTdHlsZSIsImdwdUFjY2VsZXJhdGlvbiIsIndhdGNoIiwidGhpcyIsIiRlbWl0IiwiZW5hYmxlRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVQb3BwZXIiLCJkaXNhYmxlRXZlbnRMaXN0ZW5lcnMiLCJoYW5kbGVyIiwiaW1tZWRpYXRlIiwiY3JlYXRlZCIsImFwcGVuZGVkQXJyb3ciLCJhcHBlbmRlZFRvQm9keSIsImFzc2lnbiIsIm1vdW50ZWQiLCIkc2xvdHMiLCJlbG0iLCJwb3BwZXIiLCJkb1Nob3ciLCJoYW5kbGVEb2N1bWVudENsaWNrIiwiZG9Ub2dnbGUiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VPdXQiLCJtZXRob2RzIiwiZG9DbG9zZSIsImRvRGVzdHJveSIsImRlc3Ryb3kiLCJib2R5IiwicmVtb3ZlQ2hpbGQiLCJwYXJlbnRFbGVtZW50IiwiY3JlYXRlUG9wcGVyIiwiJG5leHRUaWNrIiwiYXBwZW5kQXJyb3ciLCJhcHBlbmRDaGlsZCIsInF1ZXJ5U2VsZWN0b3IiLCJtb2RpZmllcnMiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsIm9uQ3JlYXRlIiwiZGVzdHJveVBvcHBlciIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc05hbWUiLCJzY2hlZHVsZVVwZGF0ZSIsImNsZWFyVGltZW91dCIsIl90aW1lciIsInNldFRpbWVvdXQiLCIkZWwiLCJlbGVtZW50Q29udGFpbnMiLCJ0YXJnZXQiLCJjb250YWlucyIsImRlc3Ryb3llZCIsInIiLCJfX2ZpbGUiLCJzIiwiaSIsInAiLCJjIiwiYSIsImQiLCJsIiwicmVuZGVyIiwic3RhdGljUmVuZGVyRm5zIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsImNhbGwiLCJiZWZvcmVDcmVhdGUiLCJjb25jYXQiLCIkY3JlYXRlRWxlbWVudCIsIl9zZWxmIiwiX2MiLCJ0YWciLCJhdHRycyIsIm5hbWUiLCJvbiIsImRpcmVjdGl2ZXMiLCJyYXdOYW1lIiwidmFsdWUiLCJleHByZXNzaW9uIiwicmVmIiwiY2xhc3MiLCJfdCIsIl92IiwiX3MiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsIl9jcm9wcGVyanMiLCJfY3JvcHBlcmpzMiIsIl9fZXNNb2R1bGUiLCJwcmV2aWV3UHJvcFR5cGUiLCJ3aW5kb3ciLCJBcnJheSIsIkVsZW1lbnQiLCJOb2RlTGlzdCIsImgiLCJzdHlsZSIsImNvbnRhaW5lclN0eWxlIiwic3JjIiwiYWx0IiwiaW1nU3R5bGUiLCJ2aWV3TW9kZSIsImRyYWdNb2RlIiwiYXNwZWN0UmF0aW8iLCJwcmV2aWV3IiwicmVzcG9uc2l2ZSIsInJlc3RvcmUiLCJjaGVja0Nyb3NzT3JpZ2luIiwiY2hlY2tPcmllbnRhdGlvbiIsIm1vZGFsIiwiZ3VpZGVzIiwiY2VudGVyIiwiaGlnaGxpZ2h0IiwiYmFja2dyb3VuZCIsImF1dG9Dcm9wIiwiYXV0b0Nyb3BBcmVhIiwibW92YWJsZSIsInJvdGF0YWJsZSIsInNjYWxhYmxlIiwiem9vbWFibGUiLCJ6b29tT25Ub3VjaCIsInpvb21PbldoZWVsIiwid2hlZWxab29tUmF0aW8iLCJjcm9wQm94TW92YWJsZSIsImNyb3BCb3hSZXNpemFibGUiLCJ0b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2siLCJtaW5DYW52YXNXaWR0aCIsIm1pbkNhbnZhc0hlaWdodCIsIm1pbkNyb3BCb3hXaWR0aCIsIm1pbkNyb3BCb3hIZWlnaHQiLCJtaW5Db250YWluZXJXaWR0aCIsIm1pbkNvbnRhaW5lckhlaWdodCIsInJlYWR5IiwiRnVuY3Rpb24iLCJjcm9wc3RhcnQiLCJjcm9wbW92ZSIsImNyb3BlbmQiLCJjcm9wIiwiem9vbSIsIl8kb3B0aW9ucyRwcm9wcyIsIiRvcHRpb25zIiwia2V5cyIsInByb3RvdHlwZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImtleSIsInVuZGVmaW5lZCIsImNyb3BwZXIiLCIkcmVmcyIsImltZyIsInJlc2V0IiwiY2xlYXIiLCJpbml0Q3JvcCIsInJlcGxhY2UiLCJ1cmwiLCJvbmx5Q29sb3JDaGFuZ2VkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZW5hYmxlIiwiZGlzYWJsZSIsIm1vdmUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm1vdmVUbyIsIngiLCJ5IiwicmVsYXRpdmVab29tIiwicmF0aW8iLCJfb3JpZ2luYWxFdmVudCIsInpvb21UbyIsInJvdGF0ZSIsImRlZ3JlZSIsInJvdGF0ZVRvIiwic2NhbGVYIiwiX3NjYWxlWCIsInNjYWxlWSIsIl9zY2FsZVkiLCJzY2FsZSIsImdldERhdGEiLCJyb3VuZGVkIiwic2V0RGF0YSIsImdldENvbnRhaW5lckRhdGEiLCJnZXRJbWFnZURhdGEiLCJnZXRDYW52YXNEYXRhIiwic2V0Q2FudmFzRGF0YSIsImdldENyb3BCb3hEYXRhIiwic2V0Q3JvcEJveERhdGEiLCJnZXRDcm9wcGVkQ2FudmFzIiwic2V0QXNwZWN0UmF0aW8iLCJzZXREcmFnTW9kZSIsIm1vZGUiLCJpc0Jyb3dzZXIiLCJuYXZpZ2F0b3IiLCJ0aW1lb3V0RHVyYXRpb24iLCJsb25nZXJUaW1lb3V0QnJvd3NlcnMiLCJ1c2VyQWdlbnQiLCJkZWJvdW5jZSIsIlByb21pc2UiLCJmbiIsImNhbGxlZCIsInJlc29sdmUiLCJ0aGVuIiwic2NoZWR1bGVkIiwiaXNGdW5jdGlvbiIsImZ1bmN0aW9uVG9DaGVjayIsInRvU3RyaW5nIiwiZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5IiwiZWxlbWVudCIsInByb3BlcnR5Iiwibm9kZVR5cGUiLCJjc3MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UGFyZW50Tm9kZSIsIm5vZGVOYW1lIiwicGFyZW50Tm9kZSIsImhvc3QiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInRlc3QiLCJnZXRSZWZlcmVuY2VOb2RlIiwicmVmZXJlbmNlTm9kZSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsInZlcnNpb24iLCJnZXRPZmZzZXRQYXJlbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJub09mZnNldFBhcmVudCIsIm9mZnNldFBhcmVudCIsIm5leHRFbGVtZW50U2libGluZyIsImdldFJvb3QiLCJub2RlIiwiZmluZENvbW1vbk9mZnNldFBhcmVudCIsImVsZW1lbnQxIiwiZWxlbWVudDIiLCJvcmRlciIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTm9kZSIsIkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyIsInN0YXJ0IiwiZW5kIiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInVwcGVyU2lkZSIsImh0bWwiLCJzY3JvbGxpbmdFbGVtZW50IiwiZ2V0Qm9yZGVyc1NpemUiLCJzdHlsZXMiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsInBhcnNlRmxvYXQiLCJnZXRTaXplIiwiY29tcHV0ZWRTdHlsZSIsIk1hdGgiLCJtYXgiLCJwYXJzZUludCIsImdldFdpbmRvd1NpemVzIiwiaGVpZ2h0Iiwid2lkdGgiLCJjbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJjcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2V4dGVuZHMiLCJzb3VyY2UiLCJnZXRDbGllbnRSZWN0Iiwib2Zmc2V0cyIsInJpZ2h0IiwibGVmdCIsImJvdHRvbSIsInRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwicmVzdWx0Iiwic2l6ZXMiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImhvcml6U2Nyb2xsYmFyIiwib2Zmc2V0V2lkdGgiLCJ2ZXJ0U2Nyb2xsYmFyIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlIiwiY2hpbGRyZW4iLCJwYXJlbnQiLCJmaXhlZFBvc2l0aW9uIiwiaXNIVE1MIiwiY2hpbGRyZW5SZWN0IiwicGFyZW50UmVjdCIsInNjcm9sbFBhcmVudCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsInN1YnRyYWN0IiwibW9kaWZpZXIiLCJpbmNsdWRlU2Nyb2xsIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsImVsIiwiZ2V0Qm91bmRhcmllcyIsInBhZGRpbmciLCJib3VuZGFyaWVzIiwiZXhjbHVkZVNjcm9sbCIsInJlbGF0aXZlT2Zmc2V0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlIiwiYm91bmRhcmllc05vZGUiLCJpc0ZpeGVkIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiY29tcHV0ZUF1dG9QbGFjZW1lbnQiLCJyZWZSZWN0IiwicmVjdHMiLCJzb3J0ZWRBcmVhcyIsIm1hcCIsImFyZWEiLCJfcmVmIiwic29ydCIsImIiLCJmaWx0ZXJlZEFyZWFzIiwiZmlsdGVyIiwiX3JlZjIiLCJjb21wdXRlZFBsYWNlbWVudCIsInZhcmlhdGlvbiIsInNwbGl0IiwiZ2V0UmVmZXJlbmNlT2Zmc2V0cyIsInN0YXRlIiwiZ2V0T3V0ZXJTaXplcyIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblJpZ2h0IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJoYXNoIiwibWF0Y2hlZCIsImdldFBvcHBlck9mZnNldHMiLCJyZWZlcmVuY2VPZmZzZXRzIiwicG9wcGVyUmVjdCIsInBvcHBlck9mZnNldHMiLCJpc0hvcml6IiwibWFpblNpZGUiLCJzZWNvbmRhcnlTaWRlIiwibWVhc3VyZW1lbnQiLCJzZWNvbmRhcnlNZWFzdXJlbWVudCIsImZpbmQiLCJhcnIiLCJjaGVjayIsInJ1bk1vZGlmaWVycyIsImVuZHMiLCJzbGljZSIsInByb3AiLCJmaW5kSW5kZXgiLCJjdXIiLCJtYXRjaCIsImZvckVhY2giLCJjb25zb2xlIiwid2FybiIsImVuYWJsZWQiLCJ1cGRhdGUiLCJpc0Rlc3Ryb3llZCIsImFycm93U3R5bGVzIiwiYXR0cmlidXRlcyIsImZsaXBwZWQiLCJwb3NpdGlvbkZpeGVkIiwiZmxpcCIsIm9yaWdpbmFsUGxhY2VtZW50IiwicG9zaXRpb24iLCJpc0NyZWF0ZWQiLCJvblVwZGF0ZSIsImlzTW9kaWZpZXJFbmFibGVkIiwibW9kaWZpZXJOYW1lIiwic29tZSIsImdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSIsInByZWZpeGVzIiwidXBwZXJQcm9wIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJwcmVmaXgiLCJ0b0NoZWNrIiwicmVtb3ZlQXR0cmlidXRlIiwid2lsbENoYW5nZSIsInJlbW92ZU9uRGVzdHJveSIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwiZXZlbnQiLCJjYWxsYmFjayIsInNjcm9sbFBhcmVudHMiLCJpc0JvZHkiLCJwdXNoIiwiZXZlbnRzRW5hYmxlZCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJpc0Zpbml0ZSIsInNldFN0eWxlcyIsInVuaXQiLCJpc0ZpcmVmb3giLCJpc01vZGlmaWVyUmVxdWlyZWQiLCJyZXF1ZXN0aW5nTmFtZSIsInJlcXVlc3RlZE5hbWUiLCJyZXF1ZXN0aW5nIiwiaXNSZXF1aXJlZCIsIl9yZXF1ZXN0aW5nIiwicmVxdWVzdGVkIiwicGxhY2VtZW50cyIsInZhbGlkUGxhY2VtZW50cyIsImNsb2Nrd2lzZSIsImNvdW50ZXIiLCJpbmRleCIsInJldmVyc2UiLCJCRUhBVklPUlMiLCJGTElQIiwiQ0xPQ0tXSVNFIiwiQ09VTlRFUkNMT0NLV0lTRSIsInBhcnNlT2Zmc2V0Iiwib2Zmc2V0IiwiYmFzZVBsYWNlbWVudCIsInVzZUhlaWdodCIsImZyYWdtZW50cyIsImZyYWciLCJ0cmltIiwiZGl2aWRlciIsInNlYXJjaCIsInNwbGl0UmVnZXgiLCJvcHMiLCJvcCIsIm1lcmdlV2l0aFByZXZpb3VzIiwicmVkdWNlIiwic3RyIiwidG9WYWx1ZSIsImluZGV4MiIsIkRlZmF1bHRzIiwic2hpZnQiLCJzaGlmdHZhcmlhdGlvbiIsIl9kYXRhJG9mZnNldHMiLCJpc1ZlcnRpY2FsIiwic2lkZSIsInNoaWZ0T2Zmc2V0cyIsInRyYW5zZm9ybVByb3AiLCJwb3BwZXJTdHlsZXMiLCJ0cmFuc2Zvcm0iLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5IiwibWluIiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJvcFNpZGUiLCJhcnJvdyIsIl9kYXRhJG9mZnNldHMkYXJyb3ciLCJhcnJvd0VsZW1lbnQiLCJsZW4iLCJzaWRlQ2FwaXRhbGl6ZWQiLCJ0b0xvd2VyQ2FzZSIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJyb3VuZCIsInBsYWNlbWVudE9wcG9zaXRlIiwiZmxpcE9yZGVyIiwiYmVoYXZpb3IiLCJzdGVwIiwicmVmT2Zmc2V0cyIsIm92ZXJsYXBzUmVmIiwib3ZlcmZsb3dzTGVmdCIsIm92ZXJmbG93c1JpZ2h0Iiwib3ZlcmZsb3dzVG9wIiwib3ZlcmZsb3dzQm90dG9tIiwib3ZlcmZsb3dzQm91bmRhcmllcyIsImZsaXBwZWRWYXJpYXRpb25CeVJlZiIsImZsaXBWYXJpYXRpb25zIiwiZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCIsImZsaXBWYXJpYXRpb25zQnlDb250ZW50IiwiZmxpcHBlZFZhcmlhdGlvbiIsImdldE9wcG9zaXRlVmFyaWF0aW9uIiwiaW5uZXIiLCJzdWJ0cmFjdExlbmd0aCIsImhpZGUiLCJib3VuZCIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJ2IiwicmVmZXJlbmNlV2lkdGgiLCJwb3BwZXJXaWR0aCIsImlzVmFyaWF0aW9uIiwiaG9yaXpvbnRhbFRvSW50ZWdlciIsInZlcnRpY2FsVG9JbnRlZ2VyIiwiZ2V0Um91bmRlZE9mZnNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwicHJlZml4ZWRQcm9wZXJ0eSIsImludmVydFRvcCIsImludmVydExlZnQiLCJhcHBseVN0eWxlIiwib25Mb2FkIiwibW9kaWZpZXJPcHRpb25zIiwiUG9wcGVyIiwiX3RoaXMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJiaW5kIiwianF1ZXJ5IiwiVXRpbHMiLCJnbG9iYWwiLCJQb3BwZXJVdGlscyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJfZGVmaW5lUHJvcGVydHkiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJpc0FycmF5IiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIklTX0JST1dTRVIiLCJXSU5ET1ciLCJJU19UT1VDSF9ERVZJQ0UiLCJIQVNfUE9JTlRFUl9FVkVOVCIsIkNMQVNTX0NST1AiLCJDTEFTU19ESVNBQkxFRCIsIkNMQVNTX0hJRERFTiIsIkNMQVNTX0hJREUiLCJDTEFTU19JTlZJU0lCTEUiLCJDTEFTU19NT0RBTCIsIkNMQVNTX01PVkUiLCJEQVRBX0FDVElPTiIsIkRBVEFfUFJFVklFVyIsIkVWRU5UX1RPVUNIX1NUQVJUIiwiRVZFTlRfVE9VQ0hfTU9WRSIsIkVWRU5UX1RPVUNIX0VORCIsIkVWRU5UX1BPSU5URVJfRE9XTiIsIkVWRU5UX1BPSU5URVJfTU9WRSIsIkVWRU5UX1BPSU5URVJfVVAiLCJSRUdFWFBfQUNUSU9OUyIsIlJFR0VYUF9EQVRBX1VSTCIsIlJFR0VYUF9EQVRBX1VSTF9KUEVHIiwiUkVHRVhQX1RBR19OQU1FIiwiREVGQVVMVFMiLCJpbml0aWFsQXNwZWN0UmF0aW8iLCJOYU4iLCJpc051bWJlciIsImlzUG9zaXRpdmVOdW1iZXIiLCJJbmZpbml0eSIsImlzVW5kZWZpbmVkIiwiaXNPYmplY3QiLCJpc1BsYWluT2JqZWN0IiwiX2NvbnN0cnVjdG9yIiwiZXJyb3IiLCJ0b0FycmF5IiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiYXJnIiwiUkVHRVhQX0RFQ0lNQUxTIiwibm9ybWFsaXplRGVjaW1hbE51bWJlciIsInRpbWVzIiwiUkVHRVhQX1NVRkZJWCIsInNldFN0eWxlIiwiYWRkQ2xhc3MiLCJlbGVtIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJ0b2dnbGVDbGFzcyIsImFkZGVkIiwiUkVHRVhQX0NBTUVMX0NBU0UiLCJ0b1BhcmFtQ2FzZSIsImRhdGFzZXQiLCJnZXRBdHRyaWJ1dGUiLCJSRUdFWFBfU1BBQ0VTIiwib25jZVN1cHBvcnRlZCIsInN1cHBvcnRlZCIsIm9uY2UiLCJsaXN0ZW5lciIsImdldCIsInNldCIsInJlbW92ZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYWRkTGlzdGVuZXIiLCJfaGFuZGxlciIsIl9lbGVtZW50JGxpc3RlbmVycyIsIl9sZW4yIiwiX2tleTIiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJnZXRPZmZzZXQiLCJib3giLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJwYWdlWU9mZnNldCIsImNsaWVudFRvcCIsImxvY2F0aW9uIiwiUkVHRVhQX09SSUdJTlMiLCJpc0Nyb3NzT3JpZ2luVVJMIiwicGFydHMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsImFkZFRpbWVzdGFtcCIsInRpbWVzdGFtcCIsIkRhdGUiLCJnZXRUaW1lIiwiZ2V0VHJhbnNmb3JtcyIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidmFsdWVzIiwiam9pbiIsIldlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwiZ2V0UG9pbnRlciIsImVuZE9ubHkiLCJwYWdlWCIsInBhZ2VZIiwiZW5kWCIsImVuZFkiLCJzdGFydFgiLCJzdGFydFkiLCJnZXRBZGp1c3RlZFNpemVzIiwiX3JlZjQiLCJpc1ZhbGlkV2lkdGgiLCJpc1ZhbGlkSGVpZ2h0IiwiYWRqdXN0ZWRXaWR0aCIsImdldFNvdXJjZUNhbnZhcyIsImltYWdlIiwiX3JlZjYiLCJfcmVmNyIsIl9yZWY4IiwiaW1hZ2VBc3BlY3RSYXRpbyIsImltYWdlTmF0dXJhbFdpZHRoIiwibmF0dXJhbFdpZHRoIiwiaW1hZ2VOYXR1cmFsSGVpZ2h0IiwibmF0dXJhbEhlaWdodCIsIl9yZWY2JHJvdGF0ZSIsIl9yZWY2JHNjYWxlWCIsIl9yZWY2JHNjYWxlWSIsIl9yZWY4JGZpbGxDb2xvciIsImZpbGxDb2xvciIsIl9yZWY4JGltYWdlU21vb3RoaW5nRSIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsIl9yZWY4JGltYWdlU21vb3RoaW5nUSIsImltYWdlU21vb3RoaW5nUXVhbGl0eSIsIl9yZWY4JG1heFdpZHRoIiwibWF4V2lkdGgiLCJfcmVmOCRtYXhIZWlnaHQiLCJtYXhIZWlnaHQiLCJfcmVmOCRtaW5XaWR0aCIsIm1pbldpZHRoIiwiX3JlZjgkbWluSGVpZ2h0IiwibWluSGVpZ2h0IiwiY2FudmFzIiwiY29udGV4dCIsImdldENvbnRleHQiLCJtYXhTaXplcyIsIm1pblNpemVzIiwiZGVzdE1heFNpemVzIiwiZGVzdE1pblNpemVzIiwiZGVzdFdpZHRoIiwiZGVzdEhlaWdodCIsInBhcmFtcyIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwic2F2ZSIsInRyYW5zbGF0ZSIsIlBJIiwiZHJhd0ltYWdlIiwicGFyYW0iLCJmcm9tQ2hhckNvZGUiLCJSRUdFWFBfREFUQV9VUkxfSEVBRCIsInJlc2V0QW5kR2V0T3JpZW50YXRpb24iLCJhcnJheUJ1ZmZlciIsIm9yaWVudGF0aW9uIiwiZGF0YVZpZXciLCJEYXRhVmlldyIsImxpdHRsZUVuZGlhbiIsImFwcDFTdGFydCIsImlmZFN0YXJ0IiwiZ2V0VWludDgiLCJieXRlTGVuZ3RoIiwidGlmZk9mZnNldCIsImdldFN0cmluZ0Zyb21DaGFyQ29kZSIsImVuZGlhbm5lc3MiLCJnZXRVaW50MTYiLCJmaXJzdElGRE9mZnNldCIsImdldFVpbnQzMiIsIl9vZmZzZXQiLCJfbGVuZ3RoIiwic2V0VWludDE2IiwiaW5pdENvbnRhaW5lciIsImluaXRDYW52YXMiLCJpbml0Q3JvcEJveCIsInJlbmRlckNhbnZhcyIsImNyb3BwZWQiLCJyZW5kZXJDcm9wQm94IiwiY29udGFpbmVyIiwiY29udGFpbmVyRGF0YSIsImltYWdlRGF0YSIsInJvdGF0ZWQiLCJhYnMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImNhbnZhc0RhdGEiLCJvbGRMZWZ0Iiwib2xkVG9wIiwibGltaXRlZCIsImxpbWl0Q2FudmFzIiwiaW5pdGlhbEltYWdlRGF0YSIsImluaXRpYWxDYW52YXNEYXRhIiwic2l6ZUxpbWl0ZWQiLCJwb3NpdGlvbkxpbWl0ZWQiLCJjcm9wQm94RGF0YSIsIl9nZXRBZGp1c3RlZFNpemVzIiwibmV3Q2FudmFzTGVmdCIsIm5ld0NhbnZhc1RvcCIsIm1pbkxlZnQiLCJtaW5Ub3AiLCJtYXhMZWZ0IiwibWF4VG9wIiwiY2hhbmdlZCIsInRyYW5zZm9ybWVkIiwiX2dldFJvdGF0ZWRTaXplcyIsIl9yZWY1IiwiYXJjIiwic2luQXJjIiwic2luIiwiY29zQXJjIiwiY29zIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJnZXRSb3RhdGVkU2l6ZXMiLCJyZW5kZXJJbWFnZSIsImxpbWl0Q3JvcEJveCIsIm91dHB1dCIsImluaXRpYWxDcm9wQm94RGF0YSIsIm1heENyb3BCb3hXaWR0aCIsIm1heENyb3BCb3hIZWlnaHQiLCJmYWNlIiwiY3JvcEJveCIsImluaXRQcmV2aWV3IiwiY3Jvc3NPcmlnaW4iLCJjcm9zc09yaWdpblVybCIsInZpZXdCb3giLCJ2aWV3Qm94SW1hZ2UiLCJwcmV2aWV3cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbm5lckhUTUwiLCJjc3NUZXh0IiwicmVzZXRQcmV2aWV3IiwicmVtb3ZlRGF0YSIsImNyb3BCb3hXaWR0aCIsImNyb3BCb3hIZWlnaHQiLCJvcmlnaW5hbFdpZHRoIiwib3JpZ2luYWxIZWlnaHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImV2ZW50cyIsIm9uQ3JvcFN0YXJ0IiwiY3JvcFN0YXJ0Iiwib25XaGVlbCIsIndoZWVsIiwiY2FwdHVyZSIsIm9uRGJsY2xpY2siLCJkYmxjbGljayIsIm9uQ3JvcE1vdmUiLCJjcm9wTW92ZSIsIm9uQ3JvcEVuZCIsImNyb3BFbmQiLCJvblJlc2l6ZSIsInJlc2l6ZSIsInVuYmluZCIsImhhbmRsZXJzIiwiZHJhZ0JveCIsImRlbHRhIiwid2hlZWxpbmciLCJkZWx0YVkiLCJ3aGVlbERlbHRhIiwiYnV0dG9ucyIsImJ1dHRvbiIsInBvaW50ZXJUeXBlIiwiY3RybEtleSIsImFjdGlvbiIsInBvaW50ZXJzIiwiY2hhbmdlZFRvdWNoZXMiLCJ0b3VjaCIsImlkZW50aWZpZXIiLCJwb2ludGVySWQiLCJvcmlnaW5hbEV2ZW50IiwiY3JvcHBpbmciLCJjaGFuZ2UiLCJyZW5kZXJhYmxlIiwic2hpZnRLZXkiLCJwb2ludGVyIiwicG9pbnRlcnMyIiwicmF0aW9zIiwicG9pbnRlcjIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInoxIiwic3FydCIsImdldE1heFpvb21SYXRpbyIsImhhc1NhbWVTaXplIiwiaXNJbWciLCJyZXBsYWNlZCIsInVuY3JlYXRlIiwibG9hZCIsIm9yaWdpbmFsVXJsIiwiX3RoaXMkY2FudmFzRGF0YSIsInBpdm90Iiwib2xkUmF0aW8iLCJjb3VudCIsIl9yZWYzIiwiZ2V0UG9pbnRlcnNDZW50ZXIiLCJzaXplZCIsIndpZHRoQ2hhbmdlZCIsImhlaWdodENoYW5nZWQiLCJIVE1MQ2FudmFzRWxlbWVudCIsIl90aGlzJGdldERhdGEiLCJpbml0aWFsWCIsImluaXRpYWxZIiwiaW5pdGlhbFdpZHRoIiwiaW5pdGlhbEhlaWdodCIsIl9vcHRpb25zJGltYWdlU21vb3RoaSIsInNyY1dpZHRoIiwic3JjSGVpZ2h0IiwiZHN0WCIsImRzdFkiLCJkc3RXaWR0aCIsImRzdEhlaWdodCIsInNvdXJjZVdpZHRoIiwic291cmNlSGVpZ2h0Iiwic3JjWCIsInNyY1kiLCJjcm9wcGFibGUiLCJBbm90aGVyQ3JvcHBlciIsIkNyb3BwZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJFcnJvciIsInJlbG9hZGluZyIsInNpemluZyIsImluaXQiLCJ0b0RhdGFVUkwiLCJBcnJheUJ1ZmZlciIsInJlYWQiLCJiYXNlNjQiLCJiaW5hcnkiLCJhdG9iIiwidWludDgiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsImNsb25lIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsIm9ucHJvZ3Jlc3MiLCJnZXRSZXNwb25zZUhlYWRlciIsImFib3J0Iiwib25sb2FkIiwicmVzcG9uc2UiLCJvbmxvYWRlbmQiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwid2l0aENyZWRlbnRpYWxzIiwic2VuZCIsIm1pbWVUeXBlIiwiY2h1bmtzIiwic3ViYXJyYXkiLCJidG9hIiwiYXJyYXlCdWZmZXJUb0RhdGFVUkwiLCJfcGFyc2VPcmllbnRhdGlvbiIsInBhcnNlT3JpZW50YXRpb24iLCJzdG9wIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJfdGhpczIiLCJpc0lPU1dlYktpdCIsImRvbmUiLCJidWlsZCIsInNpemluZ0ltYWdlIiwidGVtcGxhdGUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidW5idWlsZCIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiI2RUFBb0VBLEVBQU9DLFFBQXNJLFNBQVNDLEdBQUcsYUFBYSxTQUFTQyxFQUFFRCxFQUFFQyxFQUFFQyxHQUFHRixHQUFHQyxHQUFHQyxJQUFJQyxTQUFTQyxpQkFBaUJKLEVBQUVJLGlCQUFpQkgsRUFBRUMsR0FBRSxHQUFJRixFQUFFSyxZQUFZLEtBQUtKLEVBQUVDLElBQUksU0FBU0EsRUFBRUYsRUFBRUMsRUFBRUMsR0FBR0YsR0FBR0MsSUFBSUUsU0FBU0csb0JBQW9CTixFQUFFTSxvQkFBb0JMLEVBQUVDLEdBQUUsR0FBSUYsRUFBRU8sWUFBWSxLQUFLTixFQUFFQyxJQUFJRixFQUFFQSxHQUFHQSxFQUFFUSxlQUFlLFdBQVdSLEVBQUVTLFFBQVFULEVBQUUsSUFBSVUsRUFBRSxDQUFDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsS0FBS0MsT0FBT0wsUUFBUSxRQUFRTSxRQUFRLENBQUNGLEtBQUtDLE9BQU9MLFFBQVEsUUFBUU8sVUFBVSxTQUFTaEIsR0FBRyxNQUFNLENBQUMsY0FBYyxRQUFRLGdCQUFnQixRQUFRLFNBQVNpQixRQUFRakIsSUFBSSxJQUFJa0IsaUJBQWlCLENBQUNMLEtBQUtNLE9BQU9WLFFBQVEsSUFBSVcsZ0JBQWdCLENBQUNQLEtBQUtNLE9BQU9WLFFBQVEsSUFBSVksU0FBUyxDQUFDUixLQUFLUyxRQUFRYixTQUFRLEdBQUljLFFBQVFULE9BQU9VLGlCQUFpQlYsT0FBT1csaUJBQWlCWCxPQUFPWSxtQkFBbUJaLE9BQU9hLFVBQVUsR0FBR0MsVUFBVSxDQUFDZixLQUFLUyxRQUFRYixTQUFRLEdBQUlvQixVQUFVLENBQUNwQixRQUFRLE1BQU1xQixhQUFhLENBQUNqQixLQUFLUyxRQUFRYixTQUFRLEdBQUlzQixhQUFh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YXNzZXRzL3B1YmxpYy9qcy9jaHVua3MvdmVuZG9yc351cGxvYWQtYXZhdGFyLXZ1ZS1jb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJwb3BwZXIuanNcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wicG9wcGVyLmpzXCJdLHQpOihlPWV8fHNlbGYpLlZ1ZVBvcHBlcj10KGUuUG9wcGVyKX0odGhpcyxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUsdCxvKXtlJiZ0JiZvJiYoZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIodCxvLCExKTplLmF0dGFjaEV2ZW50KFwib25cIit0LG8pKX1mdW5jdGlvbiBvKGUsdCxvKXtlJiZ0JiYoZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcj9lLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxvLCExKTplLmRldGFjaEV2ZW50KFwib25cIit0LG8pKX1lPWUmJmUuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplO3ZhciBuPXtwcm9wczp7dGFnTmFtZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInNwYW5cIn0sdHJpZ2dlcjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImhvdmVyXCIsdmFsaWRhdG9yOmZ1bmN0aW9uKGUpe3JldHVybltcImNsaWNrVG9PcGVuXCIsXCJjbGlja1wiLFwiY2xpY2tUb1RvZ2dsZVwiLFwiaG92ZXJcIixcImZvY3VzXCJdLmluZGV4T2YoZSk+LTF9fSxkZWxheU9uTW91c2VPdmVyOnt0eXBlOk51bWJlcixkZWZhdWx0OjEwfSxkZWxheU9uTW91c2VPdXQ6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTB9LGRpc2FibGVkOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sY29udGVudDpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsYm91bmRhcmllc1NlbGVjdG9yOlN0cmluZyxyZWZlcmVuY2U6e30sZm9yY2VTaG93Ont0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sZGF0YVZhbHVlOntkZWZhdWx0Om51bGx9LGFwcGVuZFRvQm9keTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHZpc2libGVBcnJvdzp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LHRyYW5zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn0sc3RvcFByb3BhZ2F0aW9uOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scHJldmVudERlZmF1bHQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxvcHRpb25zOnt0eXBlOk9iamVjdCxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue319fSxyb290Q2xhc3M6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJcIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cmVmZXJlbmNlRWxtOm51bGwscG9wcGVySlM6bnVsbCxzaG93UG9wcGVyOiExLGN1cnJlbnRQbGFjZW1lbnQ6XCJcIixwb3BwZXJPcHRpb25zOntwbGFjZW1lbnQ6XCJib3R0b21cIixjb21wdXRlU3R5bGU6e2dwdUFjY2VsZXJhdGlvbjohMX19fX0sd2F0Y2g6e3Nob3dQb3BwZXI6ZnVuY3Rpb24oZSl7ZT8odGhpcy4kZW1pdChcInNob3dcIix0aGlzKSx0aGlzLnBvcHBlckpTJiZ0aGlzLnBvcHBlckpTLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCksdGhpcy51cGRhdGVQb3BwZXIoKSk6KHRoaXMucG9wcGVySlMmJnRoaXMucG9wcGVySlMuZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCksdGhpcy4kZW1pdChcImhpZGVcIix0aGlzKSl9LGZvcmNlU2hvdzp7aGFuZGxlcjpmdW5jdGlvbihlKXt0aGlzW2U/XCJkb1Nob3dcIjpcImRvQ2xvc2VcIl0oKX0saW1tZWRpYXRlOiEwfSxkaXNhYmxlZDpmdW5jdGlvbihlKXtlJiYodGhpcy5zaG93UG9wcGVyPSExKX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmFwcGVuZGVkQXJyb3c9ITEsdGhpcy5hcHBlbmRlZFRvQm9keT0hMSx0aGlzLnBvcHBlck9wdGlvbnM9T2JqZWN0LmFzc2lnbih0aGlzLnBvcHBlck9wdGlvbnMsdGhpcy5vcHRpb25zKX0sbW91bnRlZDpmdW5jdGlvbigpe3N3aXRjaCh0aGlzLnJlZmVyZW5jZUVsbT10aGlzLnJlZmVyZW5jZXx8dGhpcy4kc2xvdHMucmVmZXJlbmNlWzBdLmVsbSx0aGlzLnBvcHBlcj10aGlzLiRzbG90cy5kZWZhdWx0WzBdLmVsbSx0aGlzLnRyaWdnZXIpe2Nhc2VcImNsaWNrVG9PcGVuXCI6dCh0aGlzLnJlZmVyZW5jZUVsbSxcImNsaWNrXCIsdGhpcy5kb1Nob3cpLHQoZG9jdW1lbnQsXCJjbGlja1wiLHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayk7YnJlYWs7Y2FzZVwiY2xpY2tcIjpjYXNlXCJjbGlja1RvVG9nZ2xlXCI6dCh0aGlzLnJlZmVyZW5jZUVsbSxcImNsaWNrXCIsdGhpcy5kb1RvZ2dsZSksdChkb2N1bWVudCxcImNsaWNrXCIsdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrKTticmVhaztjYXNlXCJob3ZlclwiOnQodGhpcy5yZWZlcmVuY2VFbG0sXCJtb3VzZW92ZXJcIix0aGlzLm9uTW91c2VPdmVyKSx0KHRoaXMucG9wcGVyLFwibW91c2VvdmVyXCIsdGhpcy5vbk1vdXNlT3ZlciksdCh0aGlzLnJlZmVyZW5jZUVsbSxcIm1vdXNlb3V0XCIsdGhpcy5vbk1vdXNlT3V0KSx0KHRoaXMucG9wcGVyLFwibW91c2VvdXRcIix0aGlzLm9uTW91c2VPdXQpO2JyZWFrO2Nhc2VcImZvY3VzXCI6dCh0aGlzLnJlZmVyZW5jZUVsbSxcImZvY3VzXCIsdGhpcy5vbk1vdXNlT3ZlciksdCh0aGlzLnBvcHBlcixcImZvY3VzXCIsdGhpcy5vbk1vdXNlT3ZlciksdCh0aGlzLnJlZmVyZW5jZUVsbSxcImJsdXJcIix0aGlzLm9uTW91c2VPdXQpLHQodGhpcy5wb3BwZXIsXCJibHVyXCIsdGhpcy5vbk1vdXNlT3V0KX19LG1ldGhvZHM6e2RvVG9nZ2xlOmZ1bmN0aW9uKGUpe3RoaXMuc3RvcFByb3BhZ2F0aW9uJiZlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMucHJldmVudERlZmF1bHQmJmUucHJldmVudERlZmF1bHQoKSx0aGlzLmZvcmNlU2hvd3x8KHRoaXMuc2hvd1BvcHBlcj0hdGhpcy5zaG93UG9wcGVyKX0sZG9TaG93OmZ1bmN0aW9uKCl7dGhpcy5zaG93UG9wcGVyPSEwfSxkb0Nsb3NlOmZ1bmN0aW9uKCl7dGhpcy5zaG93UG9wcGVyPSExfSxkb0Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnNob3dQb3BwZXJ8fCh0aGlzLnBvcHBlckpTJiYodGhpcy5wb3BwZXJKUy5kZXN0cm95KCksdGhpcy5wb3BwZXJKUz1udWxsKSx0aGlzLmFwcGVuZGVkVG9Cb2R5JiYodGhpcy5hcHBlbmRlZFRvQm9keT0hMSxkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyLnBhcmVudEVsZW1lbnQpKSl9LGNyZWF0ZVBvcHBlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soZnVuY3Rpb24oKXtpZih0LnZpc2libGVBcnJvdyYmdC5hcHBlbmRBcnJvdyh0LnBvcHBlciksdC5hcHBlbmRUb0JvZHkmJiF0LmFwcGVuZGVkVG9Cb2R5JiYodC5hcHBlbmRlZFRvQm9keT0hMCxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQucG9wcGVyLnBhcmVudEVsZW1lbnQpKSx0LnBvcHBlckpTJiZ0LnBvcHBlckpTLmRlc3Ryb3kmJnQucG9wcGVySlMuZGVzdHJveSgpLHQuYm91bmRhcmllc1NlbGVjdG9yKXt2YXIgbz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQuYm91bmRhcmllc1NlbGVjdG9yKTtvJiYodC5wb3BwZXJPcHRpb25zLm1vZGlmaWVycz1PYmplY3QuYXNzaWduKHt9LHQucG9wcGVyT3B0aW9ucy5tb2RpZmllcnMpLHQucG9wcGVyT3B0aW9ucy5tb2RpZmllcnMucHJldmVudE92ZXJmbG93PU9iamVjdC5hc3NpZ24oe30sdC5wb3BwZXJPcHRpb25zLm1vZGlmaWVycy5wcmV2ZW50T3ZlcmZsb3cpLHQucG9wcGVyT3B0aW9ucy5tb2RpZmllcnMucHJldmVudE92ZXJmbG93LmJvdW5kYXJpZXNFbGVtZW50PW8pfXQucG9wcGVyT3B0aW9ucy5vbkNyZWF0ZT1mdW5jdGlvbigpe3QuJGVtaXQoXCJjcmVhdGVkXCIsdCksdC4kbmV4dFRpY2sodC51cGRhdGVQb3BwZXIpfSx0LnBvcHBlckpTPW5ldyBlKHQucmVmZXJlbmNlRWxtLHQucG9wcGVyLHQucG9wcGVyT3B0aW9ucyl9KX0sZGVzdHJveVBvcHBlcjpmdW5jdGlvbigpe28odGhpcy5yZWZlcmVuY2VFbG0sXCJjbGlja1wiLHRoaXMuZG9Ub2dnbGUpLG8odGhpcy5yZWZlcmVuY2VFbG0sXCJtb3VzZXVwXCIsdGhpcy5kb0Nsb3NlKSxvKHRoaXMucmVmZXJlbmNlRWxtLFwibW91c2Vkb3duXCIsdGhpcy5kb1Nob3cpLG8odGhpcy5yZWZlcmVuY2VFbG0sXCJmb2N1c1wiLHRoaXMuZG9TaG93KSxvKHRoaXMucmVmZXJlbmNlRWxtLFwiYmx1clwiLHRoaXMuZG9DbG9zZSksbyh0aGlzLnJlZmVyZW5jZUVsbSxcIm1vdXNlb3V0XCIsdGhpcy5vbk1vdXNlT3V0KSxvKHRoaXMucmVmZXJlbmNlRWxtLFwibW91c2VvdmVyXCIsdGhpcy5vbk1vdXNlT3Zlciksbyhkb2N1bWVudCxcImNsaWNrXCIsdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrKSx0aGlzLnNob3dQb3BwZXI9ITEsdGhpcy5kb0Rlc3Ryb3koKX0sYXBwZW5kQXJyb3c6ZnVuY3Rpb24oZSl7aWYoIXRoaXMuYXBwZW5kZWRBcnJvdyl7dGhpcy5hcHBlbmRlZEFycm93PSEwO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5zZXRBdHRyaWJ1dGUoXCJ4LWFycm93XCIsXCJcIiksdC5jbGFzc05hbWU9XCJwb3BwZXJfX2Fycm93XCIsZS5hcHBlbmRDaGlsZCh0KX19LHVwZGF0ZVBvcHBlcjpmdW5jdGlvbigpe3RoaXMucG9wcGVySlM/dGhpcy5wb3BwZXJKUy5zY2hlZHVsZVVwZGF0ZSgpOnRoaXMuY3JlYXRlUG9wcGVyKCl9LG9uTW91c2VPdmVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpLHRoaXMuX3RpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLnNob3dQb3BwZXI9ITB9LHRoaXMuZGVsYXlPbk1vdXNlT3Zlcil9LG9uTW91c2VPdXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2NsZWFyVGltZW91dCh0aGlzLl90aW1lciksdGhpcy5fdGltZXI9c2V0VGltZW91dChmdW5jdGlvbigpe2Uuc2hvd1BvcHBlcj0hMX0sdGhpcy5kZWxheU9uTW91c2VPdXQpfSxoYW5kbGVEb2N1bWVudENsaWNrOmZ1bmN0aW9uKGUpe3RoaXMuJGVsJiZ0aGlzLnJlZmVyZW5jZUVsbSYmIXRoaXMuZWxlbWVudENvbnRhaW5zKHRoaXMuJGVsLGUudGFyZ2V0KSYmIXRoaXMuZWxlbWVudENvbnRhaW5zKHRoaXMucmVmZXJlbmNlRWxtLGUudGFyZ2V0KSYmdGhpcy5wb3BwZXImJiF0aGlzLmVsZW1lbnRDb250YWlucyh0aGlzLnBvcHBlcixlLnRhcmdldCkmJih0aGlzLiRlbWl0KFwiZG9jdW1lbnRDbGlja1wiLHRoaXMpLHRoaXMuZm9yY2VTaG93fHwodGhpcy5zaG93UG9wcGVyPSExKSl9LGVsZW1lbnRDb250YWluczpmdW5jdGlvbihlLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY29udGFpbnMmJmUuY29udGFpbnModCl9fSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXt0aGlzLmRlc3Ryb3lQb3BwZXIoKX19O2NvbnN0IHI9bjtuLl9fZmlsZT1cInBvcHBlci5qcy52dWVcIjtyZXR1cm4gZnVuY3Rpb24oZSx0LG8sbixyLHMsaSxwLGMsYSl7XCJmdW5jdGlvblwiPT10eXBlb2YgaSYmKGM9cCxwPWksaT0hMSk7Y29uc3QgZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBvP28ub3B0aW9uczpvO2xldCBsO2lmKGUmJmUucmVuZGVyJiYoZC5yZW5kZXI9ZS5yZW5kZXIsZC5zdGF0aWNSZW5kZXJGbnM9ZS5zdGF0aWNSZW5kZXJGbnMsZC5fY29tcGlsZWQ9ITAsciYmKGQuZnVuY3Rpb25hbD0hMCkpLG4mJihkLl9zY29wZUlkPW4pLHM/KGw9ZnVuY3Rpb24oZSl7KGU9ZXx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX198fChlPV9fVlVFX1NTUl9DT05URVhUX18pLHQmJnQuY2FsbCh0aGlzLGMoZSkpLGUmJmUuX3JlZ2lzdGVyZWRDb21wb25lbnRzJiZlLl9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQocyl9LGQuX3NzclJlZ2lzdGVyPWwpOnQmJihsPWk/ZnVuY3Rpb24oKXt0LmNhbGwodGhpcyxhKHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkpfTpmdW5jdGlvbihlKXt0LmNhbGwodGhpcyxwKGUpKX0pLGwpaWYoZC5mdW5jdGlvbmFsKXtjb25zdCBlPWQucmVuZGVyO2QucmVuZGVyPWZ1bmN0aW9uKHQsbyl7cmV0dXJuIGwuY2FsbChvKSxlKHQsbyl9fWVsc2V7Y29uc3QgZT1kLmJlZm9yZUNyZWF0ZTtkLmJlZm9yZUNyZWF0ZT1lP1tdLmNvbmNhdChlLGwpOltsXX1yZXR1cm4gb30oe3JlbmRlcjpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1lLiRjcmVhdGVFbGVtZW50LG89ZS5fc2VsZi5fY3x8dDtyZXR1cm4gbyhlLnRhZ05hbWUse3RhZzpcImNvbXBvbmVudFwifSxbbyhcInRyYW5zaXRpb25cIix7YXR0cnM6e25hbWU6ZS50cmFuc2l0aW9uLFwiZW50ZXItYWN0aXZlLWNsYXNzXCI6ZS5lbnRlckFjdGl2ZUNsYXNzLFwibGVhdmUtYWN0aXZlLWNsYXNzXCI6ZS5sZWF2ZUFjdGl2ZUNsYXNzfSxvbjp7XCJhZnRlci1sZWF2ZVwiOmUuZG9EZXN0cm95fX0sW28oXCJzcGFuXCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTohZS5kaXNhYmxlZCYmZS5zaG93UG9wcGVyLGV4cHJlc3Npb246XCIhZGlzYWJsZWQgJiYgc2hvd1BvcHBlclwifV0scmVmOlwicG9wcGVyXCIsY2xhc3M6ZS5yb290Q2xhc3N9LFtlLl90KFwiZGVmYXVsdFwiLFtlLl92KGUuX3MoZS5jb250ZW50KSldKV0sMildKSxlLl92KFwiIFwiKSxlLl90KFwicmVmZXJlbmNlXCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfSx2b2lkIDAscix2b2lkIDAsITEsdm9pZCAwLHZvaWQgMCx2b2lkIDApfSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JvcHBlcmpzID0gcmVxdWlyZSgnY3JvcHBlcmpzJyk7XG5cbnZhciBfY3JvcHBlcmpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nyb3BwZXJqcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIHByZXZpZXdQcm9wVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gW1N0cmluZywgQXJyYXldIDogW1N0cmluZywgQXJyYXksIEVsZW1lbnQsIE5vZGVMaXN0XTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihoKSB7XG4gICAgcmV0dXJuIGgoJ2RpdicsIHsgc3R5bGU6IHRoaXMuY29udGFpbmVyU3R5bGUgfSwgW2goJ2ltZycsIHtcbiAgICAgIHJlZjogJ2ltZycsXG4gICAgICBhdHRyczoge1xuICAgICAgICBzcmM6IHRoaXMuc3JjLFxuICAgICAgICBhbHQ6IHRoaXMuYWx0IHx8ICdpbWFnZScsXG4gICAgICAgIHN0eWxlOiAnbWF4LXdpZHRoOiAxMDAlJ1xuICAgICAgfSxcbiAgICAgIHN0eWxlOiB0aGlzLmltZ1N0eWxlXG4gICAgfSldKTtcbiAgfSxcblxuICBwcm9wczoge1xuICAgIGNvbnRhaW5lclN0eWxlOiBPYmplY3QsXG4gICAgc3JjOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgYWx0OiBTdHJpbmcsXG4gICAgaW1nU3R5bGU6IE9iamVjdCxcblxuICAgIHZpZXdNb2RlOiBOdW1iZXIsXG4gICAgZHJhZ01vZGU6IFN0cmluZyxcbiAgICBhc3BlY3RSYXRpbzogTnVtYmVyLFxuICAgIGRhdGE6IE9iamVjdCxcbiAgICBwcmV2aWV3OiBwcmV2aWV3UHJvcFR5cGUsXG4gICAgcmVzcG9uc2l2ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHJlc3RvcmU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBjaGVja0Nyb3NzT3JpZ2luOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgY2hlY2tPcmllbnRhdGlvbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIG1vZGFsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgZ3VpZGVzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgY2VudGVyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgaGlnaGxpZ2h0OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgYmFja2dyb3VuZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGF1dG9Dcm9wOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgYXV0b0Nyb3BBcmVhOiBOdW1iZXIsXG4gICAgbW92YWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHJvdGF0YWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHNjYWxhYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgem9vbWFibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICB6b29tT25Ub3VjaDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHpvb21PbldoZWVsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgd2hlZWxab29tUmF0aW86IE51bWJlcixcbiAgICBjcm9wQm94TW92YWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGNyb3BCb3hSZXNpemFibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICB0b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2s6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcblxuICAgIG1pbkNhbnZhc1dpZHRoOiBOdW1iZXIsXG4gICAgbWluQ2FudmFzSGVpZ2h0OiBOdW1iZXIsXG4gICAgbWluQ3JvcEJveFdpZHRoOiBOdW1iZXIsXG4gICAgbWluQ3JvcEJveEhlaWdodDogTnVtYmVyLFxuICAgIG1pbkNvbnRhaW5lcldpZHRoOiBOdW1iZXIsXG4gICAgbWluQ29udGFpbmVySGVpZ2h0OiBOdW1iZXIsXG5cbiAgICByZWFkeTogRnVuY3Rpb24sXG4gICAgY3JvcHN0YXJ0OiBGdW5jdGlvbixcbiAgICBjcm9wbW92ZTogRnVuY3Rpb24sXG4gICAgY3JvcGVuZDogRnVuY3Rpb24sXG4gICAgY3JvcDogRnVuY3Rpb24sXG4gICAgem9vbTogRnVuY3Rpb25cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB2YXIgXyRvcHRpb25zJHByb3BzID0gdGhpcy4kb3B0aW9ucy5wcm9wcyxcbiAgICAgICAgY29udGFpbmVyU3R5bGUgPSBfJG9wdGlvbnMkcHJvcHMuY29udGFpbmVyU3R5bGUsXG4gICAgICAgIHNyYyA9IF8kb3B0aW9ucyRwcm9wcy5zcmMsXG4gICAgICAgIGFsdCA9IF8kb3B0aW9ucyRwcm9wcy5hbHQsXG4gICAgICAgIGltZ1N0eWxlID0gXyRvcHRpb25zJHByb3BzLmltZ1N0eWxlLFxuICAgICAgICBkYXRhID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF8kb3B0aW9ucyRwcm9wcywgWydjb250YWluZXJTdHlsZScsICdzcmMnLCAnYWx0JywgJ2ltZ1N0eWxlJ10pO1xuXG4gICAgdmFyIHByb3BzID0ge307XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW2tleV0gPSB0aGlzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5jcm9wcGVyID0gbmV3IF9jcm9wcGVyanMyLmRlZmF1bHQodGhpcy4kcmVmcy5pbWcsIHByb3BzKTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5yZXNldCgpO1xuICAgIH0sXG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5jbGVhcigpO1xuICAgIH0sXG4gICAgaW5pdENyb3A6IGZ1bmN0aW9uIGluaXRDcm9wKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5jcm9wKCk7XG4gICAgfSxcbiAgICByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKHVybCkge1xuICAgICAgdmFyIG9ubHlDb2xvckNoYW5nZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnJlcGxhY2UodXJsLCBvbmx5Q29sb3JDaGFuZ2VkKTtcbiAgICB9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5lbmFibGUoKTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUob2Zmc2V0WCwgb2Zmc2V0WSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5tb3ZlKG9mZnNldFgsIG9mZnNldFkpO1xuICAgIH0sXG4gICAgbW92ZVRvOiBmdW5jdGlvbiBtb3ZlVG8oeCkge1xuICAgICAgdmFyIHkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHg7XG5cbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIubW92ZVRvKHgsIHkpO1xuICAgIH0sXG4gICAgcmVsYXRpdmVab29tOiBmdW5jdGlvbiByZWxhdGl2ZVpvb20ocmF0aW8sIF9vcmlnaW5hbEV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnpvb20ocmF0aW8sIF9vcmlnaW5hbEV2ZW50KTtcbiAgICB9LFxuICAgIHpvb21UbzogZnVuY3Rpb24gem9vbVRvKHJhdGlvLCBfb3JpZ2luYWxFdmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci56b29tVG8ocmF0aW8sIF9vcmlnaW5hbEV2ZW50KTtcbiAgICB9LFxuICAgIHJvdGF0ZTogZnVuY3Rpb24gcm90YXRlKGRlZ3JlZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5yb3RhdGUoZGVncmVlKTtcbiAgICB9LFxuICAgIHJvdGF0ZVRvOiBmdW5jdGlvbiByb3RhdGVUbyhkZWdyZWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIucm90YXRlVG8oZGVncmVlKTtcbiAgICB9LFxuICAgIHNjYWxlWDogZnVuY3Rpb24gc2NhbGVYKF9zY2FsZVgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIuc2NhbGVYKF9zY2FsZVgpO1xuICAgIH0sXG4gICAgc2NhbGVZOiBmdW5jdGlvbiBzY2FsZVkoX3NjYWxlWSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5zY2FsZVkoX3NjYWxlWSk7XG4gICAgfSxcbiAgICBzY2FsZTogZnVuY3Rpb24gc2NhbGUoc2NhbGVYKSB7XG4gICAgICB2YXIgc2NhbGVZID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBzY2FsZVg7XG5cbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgIH0sXG4gICAgZ2V0RGF0YTogZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgICAgIHZhciByb3VuZGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5nZXREYXRhKHJvdW5kZWQpO1xuICAgIH0sXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnNldERhdGEoZGF0YSk7XG4gICAgfSxcbiAgICBnZXRDb250YWluZXJEYXRhOiBmdW5jdGlvbiBnZXRDb250YWluZXJEYXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5nZXRDb250YWluZXJEYXRhKCk7XG4gICAgfSxcbiAgICBnZXRJbWFnZURhdGE6IGZ1bmN0aW9uIGdldEltYWdlRGF0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIuZ2V0SW1hZ2VEYXRhKCk7XG4gICAgfSxcbiAgICBnZXRDYW52YXNEYXRhOiBmdW5jdGlvbiBnZXRDYW52YXNEYXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5nZXRDYW52YXNEYXRhKCk7XG4gICAgfSxcbiAgICBzZXRDYW52YXNEYXRhOiBmdW5jdGlvbiBzZXRDYW52YXNEYXRhKGRhdGEpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIuc2V0Q2FudmFzRGF0YShkYXRhKTtcbiAgICB9LFxuICAgIGdldENyb3BCb3hEYXRhOiBmdW5jdGlvbiBnZXRDcm9wQm94RGF0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyb3BwZXIuZ2V0Q3JvcEJveERhdGEoKTtcbiAgICB9LFxuICAgIHNldENyb3BCb3hEYXRhOiBmdW5jdGlvbiBzZXRDcm9wQm94RGF0YShkYXRhKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnNldENyb3BCb3hEYXRhKGRhdGEpO1xuICAgIH0sXG4gICAgZ2V0Q3JvcHBlZENhbnZhczogZnVuY3Rpb24gZ2V0Q3JvcHBlZENhbnZhcygpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgcmV0dXJuIHRoaXMuY3JvcHBlci5nZXRDcm9wcGVkQ2FudmFzKG9wdGlvbnMpO1xuICAgIH0sXG4gICAgc2V0QXNwZWN0UmF0aW86IGZ1bmN0aW9uIHNldEFzcGVjdFJhdGlvKGFzcGVjdFJhdGlvKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnNldEFzcGVjdFJhdGlvKGFzcGVjdFJhdGlvKTtcbiAgICB9LFxuICAgIHNldERyYWdNb2RlOiBmdW5jdGlvbiBzZXREcmFnTW9kZShtb2RlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcm9wcGVyLnNldERyYWdNb2RlKG1vZGUpO1xuICAgIH1cbiAgfVxufTsiLCIvKiohXG4gKiBAZmlsZU92ZXJ2aWV3IEtpY2thc3MgbGlicmFyeSB0byBjcmVhdGUgYW5kIHBsYWNlIHBvcHBlcnMgbmVhciB0aGVpciByZWZlcmVuY2UgZWxlbWVudHMuXG4gKiBAdmVyc2lvbiAxLjE2LjFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcblxudmFyIHRpbWVvdXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxvbmdlclRpbWVvdXRCcm93c2VycyA9IFsnRWRnZScsICdUcmlkZW50JywgJ0ZpcmVmb3gnXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb25nZXJUaW1lb3V0QnJvd3NlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoaXNCcm93c2VyICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihsb25nZXJUaW1lb3V0QnJvd3NlcnNbaV0pID49IDApIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn0oKTtcblxuZnVuY3Rpb24gbWljcm90YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChjYWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB3aW5kb3cuUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGZuKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRhc2tEZWJvdW5jZShmbikge1xuICB2YXIgc2NoZWR1bGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFzY2hlZHVsZWQpIHtcbiAgICAgIHNjaGVkdWxlZCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIGZuKCk7XG4gICAgICB9LCB0aW1lb3V0RHVyYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHN1cHBvcnRzTWljcm9UYXNrcyA9IGlzQnJvd3NlciAmJiB3aW5kb3cuUHJvbWlzZTtcblxuLyoqXG4qIENyZWF0ZSBhIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGEgbWV0aG9kLCB0aGF0J3MgYXN5bmNocm9ub3VzbHkgZGVmZXJyZWRcbiogYnV0IGNhbGxlZCBpbiB0aGUgbWluaW11bSB0aW1lIHBvc3NpYmxlLlxuKlxuKiBAbWV0aG9kXG4qIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiogQGFyZ3VtZW50IHtGdW5jdGlvbn0gZm5cbiogQHJldHVybnMge0Z1bmN0aW9ufVxuKi9cbnZhciBkZWJvdW5jZSA9IHN1cHBvcnRzTWljcm9UYXNrcyA/IG1pY3JvdGFza0RlYm91bmNlIDogdGFza0RlYm91bmNlO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YXJpYWJsZSBpcyBhIGZ1bmN0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FueX0gZnVuY3Rpb25Ub0NoZWNrIC0gdmFyaWFibGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG86IGlzIGEgZnVuY3Rpb24/XG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY3Rpb25Ub0NoZWNrKSB7XG4gIHZhciBnZXRUeXBlID0ge307XG4gIHJldHVybiBmdW5jdGlvblRvQ2hlY2sgJiYgZ2V0VHlwZS50b1N0cmluZy5jYWxsKGZ1bmN0aW9uVG9DaGVjaykgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogR2V0IENTUyBjb21wdXRlZCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIGNzcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQsIG51bGwpO1xuICByZXR1cm4gcHJvcGVydHkgPyBjc3NbcHJvcGVydHldIDogY3NzO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcmVudE5vZGUgb3IgdGhlIGhvc3Qgb2YgdGhlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQubm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG4gIHJldHVybiBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHNjcm9sbGluZyBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IHNjcm9sbCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gUmV0dXJuIGJvZHksIGBnZXRTY3JvbGxgIHdpbGwgdGFrZSBjYXJlIHRvIGdldCB0aGUgY29ycmVjdCBgc2Nyb2xsVG9wYCBmcm9tIGl0XG4gIGlmICghZWxlbWVudCkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50Lm5vZGVOYW1lKSB7XG4gICAgY2FzZSAnSFRNTCc6XG4gICAgY2FzZSAnQk9EWSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG4gICAgY2FzZSAnI2RvY3VtZW50JzpcbiAgICAgIHJldHVybiBlbGVtZW50LmJvZHk7XG4gIH1cblxuICAvLyBGaXJlZm94IHdhbnQgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcblxuICB2YXIgX2dldFN0eWxlQ29tcHV0ZWRQcm9wID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0U3R5bGVDb21wdXRlZFByb3Aub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WTtcblxuICBpZiAoLyhhdXRvfHNjcm9sbHxvdmVybGF5KS8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCkpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShlbGVtZW50KSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmVmZXJlbmNlIG5vZGUgb2YgdGhlIHJlZmVyZW5jZSBvYmplY3QsIG9yIHRoZSByZWZlcmVuY2Ugb2JqZWN0IGl0c2VsZi5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcmV0dXJucyB7RWxlbWVudH0gcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSB7XG4gIHJldHVybiByZWZlcmVuY2UgJiYgcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgPyByZWZlcmVuY2UucmVmZXJlbmNlTm9kZSA6IHJlZmVyZW5jZTtcbn1cblxudmFyIGlzSUUxMSA9IGlzQnJvd3NlciAmJiAhISh3aW5kb3cuTVNJbnB1dE1ldGhvZENvbnRleHQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBpc0lFMTAgPSBpc0Jyb3dzZXIgJiYgL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgYnJvd3NlciBpcyBJbnRlcm5ldCBFeHBsb3JlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSBpc0lFXG4gKi9cbmZ1bmN0aW9uIGlzSUUodmVyc2lvbikge1xuICBpZiAodmVyc2lvbiA9PT0gMTEpIHtcbiAgICByZXR1cm4gaXNJRTExO1xuICB9XG4gIGlmICh2ZXJzaW9uID09PSAxMCkge1xuICAgIHJldHVybiBpc0lFMTA7XG4gIH1cbiAgcmV0dXJuIGlzSUUxMSB8fCBpc0lFMTA7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb2Zmc2V0IHBhcmVudCBvZiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RWxlbWVudH0gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgdmFyIG5vT2Zmc2V0UGFyZW50ID0gaXNJRSgxMCkgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcblxuICAvLyBOT1RFOiAxIERPTSBhY2Nlc3MgaGVyZVxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQgfHwgbnVsbDtcbiAgLy8gU2tpcCBoaWRkZW4gZWxlbWVudHMgd2hpY2ggZG9uJ3QgaGF2ZSBhbiBvZmZzZXRQYXJlbnRcbiAgd2hpbGUgKG9mZnNldFBhcmVudCA9PT0gbm9PZmZzZXRQYXJlbnQgJiYgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSAoZWxlbWVudCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKS5vZmZzZXRQYXJlbnQ7XG4gIH1cblxuICB2YXIgbm9kZU5hbWUgPSBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50Lm5vZGVOYW1lO1xuXG4gIGlmICghbm9kZU5hbWUgfHwgbm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG5cbiAgLy8gLm9mZnNldFBhcmVudCB3aWxsIHJldHVybiB0aGUgY2xvc2VzdCBUSCwgVEQgb3IgVEFCTEUgaW4gY2FzZVxuICAvLyBubyBvZmZzZXRQYXJlbnQgaXMgcHJlc2VudCwgSSBoYXRlIHRoaXMgam9iLi4uXG4gIGlmIChbJ1RIJywgJ1REJywgJ1RBQkxFJ10uaW5kZXhPZihvZmZzZXRQYXJlbnQubm9kZU5hbWUpICE9PSAtMSAmJiBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkob2Zmc2V0UGFyZW50LCAncG9zaXRpb24nKSA9PT0gJ3N0YXRpYycpIHtcbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50O1xufVxuXG5mdW5jdGlvbiBpc09mZnNldENvbnRhaW5lcihlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnSFRNTCcgfHwgZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpID09PSBlbGVtZW50O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSByb290IG5vZGUgKGRvY3VtZW50LCBzaGFkb3dET00gcm9vdCkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybnMge0VsZW1lbnR9IHJvb3Qgbm9kZVxuICovXG5mdW5jdGlvbiBnZXRSb290KG5vZGUpIHtcbiAgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRSb290KG5vZGUucGFyZW50Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgb2Zmc2V0IHBhcmVudCBjb21tb24gdG8gdGhlIHR3byBwcm92aWRlZCBub2Rlc1xuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MVxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50MlxuICogQHJldHVybnMge0VsZW1lbnR9IGNvbW1vbiBvZmZzZXQgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGVsZW1lbnQyKSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQxIHx8ICFlbGVtZW50MS5ub2RlVHlwZSB8fCAhZWxlbWVudDIgfHwgIWVsZW1lbnQyLm5vZGVUeXBlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIEhlcmUgd2UgbWFrZSBzdXJlIHRvIGdpdmUgYXMgXCJzdGFydFwiIHRoZSBlbGVtZW50IHRoYXQgY29tZXMgZmlyc3QgaW4gdGhlIERPTVxuICB2YXIgb3JkZXIgPSBlbGVtZW50MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50MikgJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORztcbiAgdmFyIHN0YXJ0ID0gb3JkZXIgPyBlbGVtZW50MSA6IGVsZW1lbnQyO1xuICB2YXIgZW5kID0gb3JkZXIgPyBlbGVtZW50MiA6IGVsZW1lbnQxO1xuXG4gIC8vIEdldCBjb21tb24gYW5jZXN0b3IgY29udGFpbmVyXG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKTtcbiAgcmFuZ2Uuc2V0RW5kKGVuZCwgMCk7XG4gIHZhciBjb21tb25BbmNlc3RvckNvbnRhaW5lciA9IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuXG4gIC8vIEJvdGggbm9kZXMgYXJlIGluc2lkZSAjZG9jdW1lbnRcblxuICBpZiAoZWxlbWVudDEgIT09IGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyICYmIGVsZW1lbnQyICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciB8fCBzdGFydC5jb250YWlucyhlbmQpKSB7XG4gICAgaWYgKGlzT2Zmc2V0Q29udGFpbmVyKGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKSkge1xuICAgICAgcmV0dXJuIGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRPZmZzZXRQYXJlbnQoY29tbW9uQW5jZXN0b3JDb250YWluZXIpO1xuICB9XG5cbiAgLy8gb25lIG9mIHRoZSBub2RlcyBpcyBpbnNpZGUgc2hhZG93RE9NLCBmaW5kIHdoaWNoIG9uZVxuICB2YXIgZWxlbWVudDFyb290ID0gZ2V0Um9vdChlbGVtZW50MSk7XG4gIGlmIChlbGVtZW50MXJvb3QuaG9zdCkge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxcm9vdC5ob3N0LCBlbGVtZW50Mik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZpbmRDb21tb25PZmZzZXRQYXJlbnQoZWxlbWVudDEsIGdldFJvb3QoZWxlbWVudDIpLmhvc3QpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHZhbHVlIG9mIHRoZSBnaXZlbiBlbGVtZW50IGluIHRoZSBnaXZlbiBzaWRlICh0b3AgYW5kIGxlZnQpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzaWRlIGB0b3BgIG9yIGBsZWZ0YFxuICogQHJldHVybnMge251bWJlcn0gYW1vdW50IG9mIHNjcm9sbGVkIHBpeGVsc1xuICovXG5mdW5jdGlvbiBnZXRTY3JvbGwoZWxlbWVudCkge1xuICB2YXIgc2lkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ3RvcCc7XG5cbiAgdmFyIHVwcGVyU2lkZSA9IHNpZGUgPT09ICd0b3AnID8gJ3Njcm9sbFRvcCcgOiAnc2Nyb2xsTGVmdCc7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsaW5nRWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGh0bWw7XG4gICAgcmV0dXJuIHNjcm9sbGluZ0VsZW1lbnRbdXBwZXJTaWRlXTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50W3VwcGVyU2lkZV07XG59XG5cbi8qXG4gKiBTdW0gb3Igc3VidHJhY3QgdGhlIGVsZW1lbnQgc2Nyb2xsIHZhbHVlcyAobGVmdCBhbmQgdG9wKSBmcm9tIGEgZ2l2ZW4gcmVjdCBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWN0IC0gUmVjdCBvYmplY3QgeW91IHdhbnQgdG8gY2hhbmdlXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgZnJvbSB0aGUgZnVuY3Rpb24gcmVhZHMgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc3VidHJhY3QgLSBzZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0byBzdWJ0cmFjdCB0aGUgc2Nyb2xsIHZhbHVlc1xuICogQHJldHVybiB7T2JqZWN0fSByZWN0IC0gVGhlIG1vZGlmaWVyIHJlY3Qgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGluY2x1ZGVTY3JvbGwocmVjdCwgZWxlbWVudCkge1xuICB2YXIgc3VidHJhY3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuXG4gIHZhciBzY3JvbGxUb3AgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ3RvcCcpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICB2YXIgbW9kaWZpZXIgPSBzdWJ0cmFjdCA/IC0xIDogMTtcbiAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wICogbW9kaWZpZXI7XG4gIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdCAqIG1vZGlmaWVyO1xuICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbi8qXG4gKiBIZWxwZXIgdG8gZGV0ZWN0IGJvcmRlcnMgb2YgYSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xuICogUmVzdWx0IG9mIGBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHlgIG9uIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyAtIGB4YCBvciBgeWBcbiAqIEByZXR1cm4ge251bWJlcn0gYm9yZGVycyAtIFRoZSBib3JkZXJzIHNpemUgb2YgdGhlIGdpdmVuIGF4aXNcbiAqL1xuXG5mdW5jdGlvbiBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsIGF4aXMpIHtcbiAgdmFyIHNpZGVBID0gYXhpcyA9PT0gJ3gnID8gJ0xlZnQnIDogJ1RvcCc7XG4gIHZhciBzaWRlQiA9IHNpZGVBID09PSAnTGVmdCcgPyAnUmlnaHQnIDogJ0JvdHRvbSc7XG5cbiAgcmV0dXJuIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUEgKyAnV2lkdGgnXSkgKyBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVCICsgJ1dpZHRoJ10pO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5oZWlnaHQ7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgpO1xuICB2YXIgYm9yZGVyTGVmdFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyTGVmdFdpZHRoKTtcblxuICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgcGFyZW50IGlzIGZpeGVkLCB3ZSBtdXN0IGlnbm9yZSBuZWdhdGl2ZSBzY3JvbGwgaW4gb2Zmc2V0IGNhbGNcbiAgaWYgKGZpeGVkUG9zaXRpb24gJiYgaXNIVE1MKSB7XG4gICAgcGFyZW50UmVjdC50b3AgPSBNYXRoLm1heChwYXJlbnRSZWN0LnRvcCwgMCk7XG4gICAgcGFyZW50UmVjdC5sZWZ0ID0gTWF0aC5tYXgocGFyZW50UmVjdC5sZWZ0LCAwKTtcbiAgfVxuICB2YXIgb2Zmc2V0cyA9IGdldENsaWVudFJlY3Qoe1xuICAgIHRvcDogY2hpbGRyZW5SZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wIC0gYm9yZGVyVG9wV2lkdGgsXG4gICAgbGVmdDogY2hpbGRyZW5SZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgLSBib3JkZXJMZWZ0V2lkdGgsXG4gICAgd2lkdGg6IGNoaWxkcmVuUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkcmVuUmVjdC5oZWlnaHRcbiAgfSk7XG4gIG9mZnNldHMubWFyZ2luVG9wID0gMDtcbiAgb2Zmc2V0cy5tYXJnaW5MZWZ0ID0gMDtcblxuICAvLyBTdWJ0cmFjdCBtYXJnaW5zIG9mIGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGl0J3MgYmVpbmcgdXNlZCBhcyBwYXJlbnRcbiAgLy8gd2UgZG8gdGhpcyBvbmx5IG9uIEhUTUwgYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGVsZW1lbnQgdGhhdCBiZWhhdmVzXG4gIC8vIGRpZmZlcmVudGx5IHdoZW4gbWFyZ2lucyBhcmUgYXBwbGllZCB0byBpdC4gVGhlIG1hcmdpbnMgYXJlIGluY2x1ZGVkIGluXG4gIC8vIHRoZSBib3ggb2YgdGhlIGRvY3VtZW50RWxlbWVudCwgaW4gdGhlIG90aGVyIGNhc2VzIG5vdC5cbiAgaWYgKCFpc0lFMTAgJiYgaXNIVE1MKSB7XG4gICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0KTtcblxuICAgIG9mZnNldHMudG9wIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMuYm90dG9tIC09IGJvcmRlclRvcFdpZHRoIC0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubGVmdCAtPSBib3JkZXJMZWZ0V2lkdGggLSBtYXJnaW5MZWZ0O1xuICAgIG9mZnNldHMucmlnaHQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcblxuICAgIC8vIEF0dGFjaCBtYXJnaW5Ub3AgYW5kIG1hcmdpbkxlZnQgYmVjYXVzZSBpbiBzb21lIGNpcmN1bXN0YW5jZXMgd2UgbWF5IG5lZWQgdGhlbVxuICAgIG9mZnNldHMubWFyZ2luVG9wID0gbWFyZ2luVG9wO1xuICAgIG9mZnNldHMubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gIH1cblxuICBpZiAoaXNJRTEwICYmICFmaXhlZFBvc2l0aW9uID8gcGFyZW50LmNvbnRhaW5zKHNjcm9sbFBhcmVudCkgOiBwYXJlbnQgPT09IHNjcm9sbFBhcmVudCAmJiBzY3JvbGxQYXJlbnQubm9kZU5hbWUgIT09ICdCT0RZJykge1xuICAgIG9mZnNldHMgPSBpbmNsdWRlU2Nyb2xsKG9mZnNldHMsIHBhcmVudCk7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn1cblxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRPZmZzZXRSZWN0UmVsYXRpdmVUb0FydGJpdHJhcnlOb2RlKGVsZW1lbnQpIHtcbiAgdmFyIGV4Y2x1ZGVTY3JvbGwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBodG1sID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIHJlbGF0aXZlT2Zmc2V0ID0gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKGVsZW1lbnQsIGh0bWwpO1xuICB2YXIgd2lkdGggPSBNYXRoLm1heChodG1sLmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGh0bWwuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG5cbiAgdmFyIHNjcm9sbFRvcCA9ICFleGNsdWRlU2Nyb2xsID8gZ2V0U2Nyb2xsKGh0bWwpIDogMDtcbiAgdmFyIHNjcm9sbExlZnQgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sLCAnbGVmdCcpIDogMDtcblxuICB2YXIgb2Zmc2V0ID0ge1xuICAgIHRvcDogc2Nyb2xsVG9wIC0gcmVsYXRpdmVPZmZzZXQudG9wICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luVG9wLFxuICAgIGxlZnQ6IHNjcm9sbExlZnQgLSByZWxhdGl2ZU9mZnNldC5sZWZ0ICsgcmVsYXRpdmVPZmZzZXQubWFyZ2luTGVmdCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChvZmZzZXQpO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlbGVtZW50IGlzIGZpeGVkIG9yIGlzIGluc2lkZSBhIGZpeGVkIHBhcmVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGN1c3RvbUNvbnRhaW5lclxuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0byBcImlzRml4ZWQ/XCJcbiAqL1xuZnVuY3Rpb24gaXNGaXhlZChlbGVtZW50KSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50LCAncG9zaXRpb24nKSA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkKHBhcmVudE5vZGUpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBmaXJzdCBwYXJlbnQgb2YgYW4gZWxlbWVudCB0aGF0IGhhcyBhIHRyYW5zZm9ybWVkIHByb3BlcnR5IGRlZmluZWRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IGZpcnN0IHRyYW5zZm9ybWVkIHBhcmVudCBvciBkb2N1bWVudEVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBnZXRGaXhlZFBvc2l0aW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gVGhpcyBjaGVjayBpcyBuZWVkZWQgdG8gYXZvaWQgZXJyb3JzIGluIGNhc2Ugb25lIG9mIHRoZSBlbGVtZW50cyBpc24ndCBkZWZpbmVkIGZvciBhbnkgcmVhc29uXG4gIGlmICghZWxlbWVudCB8fCAhZWxlbWVudC5wYXJlbnRFbGVtZW50IHx8IGlzSUUoKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIGVsID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICB3aGlsZSAoZWwgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsLCAndHJhbnNmb3JtJykgPT09ICdub25lJykge1xuICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWwgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufVxuXG4vKipcbiAqIENvbXB1dGVkIHRoZSBib3VuZGFyaWVzIGxpbWl0cyBhbmQgcmV0dXJuIHRoZW1cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcmVmZXJlbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcGFkZGluZ1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQgLSBFbGVtZW50IHVzZWQgdG8gZGVmaW5lIHRoZSBib3VuZGFyaWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkUG9zaXRpb24gLSBJcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29yZGluYXRlcyBvZiB0aGUgYm91bmRhcmllc1xuICovXG5mdW5jdGlvbiBnZXRCb3VuZGFyaWVzKHBvcHBlciwgcmVmZXJlbmNlLCBwYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcblxuICB2YXIgYm91bmRhcmllcyA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG5cbiAgLy8gSGFuZGxlIHZpZXdwb3J0IGNhc2VcbiAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAndmlld3BvcnQnKSB7XG4gICAgYm91bmRhcmllcyA9IGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShvZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xuICB9IGVsc2Uge1xuICAgIC8vIEhhbmRsZSBvdGhlciBjYXNlcyBiYXNlZCBvbiBET00gZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXNcbiAgICB2YXIgYm91bmRhcmllc05vZGUgPSB2b2lkIDA7XG4gICAgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnc2Nyb2xsUGFyZW50Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShyZWZlcmVuY2UpKTtcbiAgICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIGJvdW5kYXJpZXNOb2RlID0gcG9wcGVyLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYm91bmRhcmllc0VsZW1lbnQgPT09ICd3aW5kb3cnKSB7XG4gICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBib3VuZGFyaWVzRWxlbWVudDtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0cyA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShib3VuZGFyaWVzTm9kZSwgb2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcblxuICAgIC8vIEluIGNhc2Ugb2YgSFRNTCwgd2UgbmVlZCBhIGRpZmZlcmVudCBjb21wdXRhdGlvblxuICAgIGlmIChib3VuZGFyaWVzTm9kZS5ub2RlTmFtZSA9PT0gJ0hUTUwnICYmICFpc0ZpeGVkKG9mZnNldFBhcmVudCkpIHtcbiAgICAgIHZhciBfZ2V0V2luZG93U2l6ZXMgPSBnZXRXaW5kb3dTaXplcyhwb3BwZXIub3duZXJEb2N1bWVudCksXG4gICAgICAgICAgaGVpZ2h0ID0gX2dldFdpbmRvd1NpemVzLmhlaWdodCxcbiAgICAgICAgICB3aWR0aCA9IF9nZXRXaW5kb3dTaXplcy53aWR0aDtcblxuICAgICAgYm91bmRhcmllcy50b3AgKz0gb2Zmc2V0cy50b3AgLSBvZmZzZXRzLm1hcmdpblRvcDtcbiAgICAgIGJvdW5kYXJpZXMuYm90dG9tID0gaGVpZ2h0ICsgb2Zmc2V0cy50b3A7XG4gICAgICBib3VuZGFyaWVzLmxlZnQgKz0gb2Zmc2V0cy5sZWZ0IC0gb2Zmc2V0cy5tYXJnaW5MZWZ0O1xuICAgICAgYm91bmRhcmllcy5yaWdodCA9IHdpZHRoICsgb2Zmc2V0cy5sZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb3IgYWxsIHRoZSBvdGhlciBET00gZWxlbWVudHMsIHRoaXMgb25lIGlzIGdvb2RcbiAgICAgIGJvdW5kYXJpZXMgPSBvZmZzZXRzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBwYWRkaW5nc1xuICBwYWRkaW5nID0gcGFkZGluZyB8fCAwO1xuICB2YXIgaXNQYWRkaW5nTnVtYmVyID0gdHlwZW9mIHBhZGRpbmcgPT09ICdudW1iZXInO1xuICBib3VuZGFyaWVzLmxlZnQgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcubGVmdCB8fCAwO1xuICBib3VuZGFyaWVzLnRvcCArPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy50b3AgfHwgMDtcbiAgYm91bmRhcmllcy5yaWdodCAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5yaWdodCB8fCAwO1xuICBib3VuZGFyaWVzLmJvdHRvbSAtPSBpc1BhZGRpbmdOdW1iZXIgPyBwYWRkaW5nIDogcGFkZGluZy5ib3R0b20gfHwgMDtcblxuICByZXR1cm4gYm91bmRhcmllcztcbn1cblxuZnVuY3Rpb24gZ2V0QXJlYShfcmVmKSB7XG4gIHZhciB3aWR0aCA9IF9yZWYud2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICByZXR1cm4gd2lkdGggKiBoZWlnaHQ7XG59XG5cbi8qKlxuICogVXRpbGl0eSB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgYGF1dG9gIHBsYWNlbWVudCB0byB0aGUgcGxhY2VtZW50IHdpdGggbW9yZVxuICogYXZhaWxhYmxlIHNwYWNlLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQocGxhY2VtZW50LCByZWZSZWN0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIHBhZGRpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDA7XG5cbiAgaWYgKHBsYWNlbWVudC5pbmRleE9mKCdhdXRvJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpO1xuXG4gIHZhciByZWN0cyA9IHtcbiAgICB0b3A6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLndpZHRoLFxuICAgICAgaGVpZ2h0OiByZWZSZWN0LnRvcCAtIGJvdW5kYXJpZXMudG9wXG4gICAgfSxcbiAgICByaWdodDoge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMucmlnaHQgLSByZWZSZWN0LnJpZ2h0LFxuICAgICAgaGVpZ2h0OiBib3VuZGFyaWVzLmhlaWdodFxuICAgIH0sXG4gICAgYm90dG9tOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5ib3R0b20gLSByZWZSZWN0LmJvdHRvbVxuICAgIH0sXG4gICAgbGVmdDoge1xuICAgICAgd2lkdGg6IHJlZlJlY3QubGVmdCAtIGJvdW5kYXJpZXMubGVmdCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9XG4gIH07XG5cbiAgdmFyIHNvcnRlZEFyZWFzID0gT2JqZWN0LmtleXMocmVjdHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcmVjdHNba2V5XSwge1xuICAgICAgYXJlYTogZ2V0QXJlYShyZWN0c1trZXldKVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuYXJlYSAtIGEuYXJlYTtcbiAgfSk7XG5cbiAgdmFyIGZpbHRlcmVkQXJlYXMgPSBzb3J0ZWRBcmVhcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IF9yZWYyLmhlaWdodDtcbiAgICByZXR1cm4gd2lkdGggPj0gcG9wcGVyLmNsaWVudFdpZHRoICYmIGhlaWdodCA+PSBwb3BwZXIuY2xpZW50SGVpZ2h0O1xuICB9KTtcblxuICB2YXIgY29tcHV0ZWRQbGFjZW1lbnQgPSBmaWx0ZXJlZEFyZWFzLmxlbmd0aCA+IDAgPyBmaWx0ZXJlZEFyZWFzWzBdLmtleSA6IHNvcnRlZEFyZWFzWzBdLmtleTtcblxuICB2YXIgdmFyaWF0aW9uID0gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG5cbiAgcmV0dXJuIGNvbXB1dGVkUGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcbn1cblxuLyoqXG4gKiBHZXQgb2Zmc2V0cyB0byB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICogQHBhcmFtIHtFbGVtZW50fSBwb3BwZXIgLSB0aGUgcG9wcGVyIGVsZW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudH0gcmVmZXJlbmNlIC0gdGhlIHJlZmVyZW5jZSBlbGVtZW50ICh0aGUgcG9wcGVyIHdpbGwgYmUgcmVsYXRpdmUgdG8gdGhpcylcbiAqIEBwYXJhbSB7RWxlbWVudH0gZml4ZWRQb3NpdGlvbiAtIGlzIGluIGZpeGVkIHBvc2l0aW9uIG1vZGVcbiAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZU9mZnNldHMoc3RhdGUsIHBvcHBlciwgcmVmZXJlbmNlKSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXG4gIHZhciBjb21tb25PZmZzZXRQYXJlbnQgPSBmaXhlZFBvc2l0aW9uID8gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChwb3BwZXIpIDogZmluZENvbW1vbk9mZnNldFBhcmVudChwb3BwZXIsIGdldFJlZmVyZW5jZU5vZGUocmVmZXJlbmNlKSk7XG4gIHJldHVybiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUocmVmZXJlbmNlLCBjb21tb25PZmZzZXRQYXJlbnQsIGZpeGVkUG9zaXRpb24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3V0ZXIgc2l6ZXMgb2YgdGhlIGdpdmVuIGVsZW1lbnQgKG9mZnNldCBzaXplICsgbWFyZ2lucylcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge09iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgd2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldE91dGVyU2l6ZXMoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB4ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wIHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luQm90dG9tIHx8IDApO1xuICB2YXIgeSA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkxlZnQgfHwgMCkgKyBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5SaWdodCB8fCAwKTtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCArIHksXG4gICAgaGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCArIHhcbiAgfTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBmbGlwcGVkIHBsYWNlbWVudFxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgdmFyIGhhc2ggPSB7IGxlZnQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcsIGJvdHRvbTogJ3RvcCcsIHRvcDogJ2JvdHRvbScgfTtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtPYmplY3R9IHBvc2l0aW9uIC0gQ1NTIHBvc2l0aW9uIHRoZSBQb3BwZXIgd2lsbCBnZXQgYXBwbGllZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0cyAtIHRoZSByZWZlcmVuY2Ugb2Zmc2V0cyAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge1N0cmluZ30gcGxhY2VtZW50IC0gb25lIG9mIHRoZSB2YWxpZCBwbGFjZW1lbnQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gcG9wcGVyT2Zmc2V0cyAtIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvZmZzZXRzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGdldFBvcHBlck9mZnNldHMocG9wcGVyLCByZWZlcmVuY2VPZmZzZXRzLCBwbGFjZW1lbnQpIHtcbiAgcGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG5cbiAgLy8gR2V0IHBvcHBlciBub2RlIHNpemVzXG4gIHZhciBwb3BwZXJSZWN0ID0gZ2V0T3V0ZXJTaXplcyhwb3BwZXIpO1xuXG4gIC8vIEFkZCBwb3NpdGlvbiwgd2lkdGggYW5kIGhlaWdodCB0byBvdXIgb2Zmc2V0cyBvYmplY3RcbiAgdmFyIHBvcHBlck9mZnNldHMgPSB7XG4gICAgd2lkdGg6IHBvcHBlclJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBwb3BwZXJSZWN0LmhlaWdodFxuICB9O1xuXG4gIC8vIGRlcGVuZGluZyBieSB0aGUgcG9wcGVyIHBsYWNlbWVudCB3ZSBoYXZlIHRvIGNvbXB1dGUgaXRzIG9mZnNldHMgc2xpZ2h0bHkgZGlmZmVyZW50bHlcbiAgdmFyIGlzSG9yaXogPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgbWFpblNpZGUgPSBpc0hvcml6ID8gJ3RvcCcgOiAnbGVmdCc7XG4gIHZhciBzZWNvbmRhcnlTaWRlID0gaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgbWVhc3VyZW1lbnQgPSBpc0hvcml6ID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2Vjb25kYXJ5TWVhc3VyZW1lbnQgPSAhaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBwb3BwZXJPZmZzZXRzW21haW5TaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbbWFpblNpZGVdICsgcmVmZXJlbmNlT2Zmc2V0c1ttZWFzdXJlbWVudF0gLyAyIC0gcG9wcGVyUmVjdFttZWFzdXJlbWVudF0gLyAyO1xuICBpZiAocGxhY2VtZW50ID09PSBzZWNvbmRhcnlTaWRlKSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gLSBwb3BwZXJSZWN0W3NlY29uZGFyeU1lYXN1cmVtZW50XTtcbiAgfSBlbHNlIHtcbiAgICBwb3BwZXJPZmZzZXRzW3NlY29uZGFyeVNpZGVdID0gcmVmZXJlbmNlT2Zmc2V0c1tnZXRPcHBvc2l0ZVBsYWNlbWVudChzZWNvbmRhcnlTaWRlKV07XG4gIH1cblxuICByZXR1cm4gcG9wcGVyT2Zmc2V0cztcbn1cblxuLyoqXG4gKiBNaW1pY3MgdGhlIGBmaW5kYCBtZXRob2Qgb2YgQXJyYXlcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZChhcnIsIGNoZWNrKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZCBpZiBzdXBwb3J0ZWRcbiAgaWYgKEFycmF5LnByb3RvdHlwZS5maW5kKSB7XG4gICAgcmV0dXJuIGFyci5maW5kKGNoZWNrKTtcbiAgfVxuXG4gIC8vIHVzZSBgZmlsdGVyYCB0byBvYnRhaW4gdGhlIHNhbWUgYmVoYXZpb3Igb2YgYGZpbmRgXG4gIHJldHVybiBhcnIuZmlsdGVyKGNoZWNrKVswXTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGluZGV4IG9mIHRoZSBtYXRjaGluZyBvYmplY3RcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QXJyYXl9IGFyclxuICogQGFyZ3VtZW50IHByb3BcbiAqIEBhcmd1bWVudCB2YWx1ZVxuICogQHJldHVybnMgaW5kZXggb3IgLTFcbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGFyciwgcHJvcCwgdmFsdWUpIHtcbiAgLy8gdXNlIG5hdGl2ZSBmaW5kSW5kZXggaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XG4gICAgcmV0dXJuIGFyci5maW5kSW5kZXgoZnVuY3Rpb24gKGN1cikge1xuICAgICAgcmV0dXJuIGN1cltwcm9wXSA9PT0gdmFsdWU7XG4gICAgfSk7XG4gIH1cblxuICAvLyB1c2UgYGZpbmRgICsgYGluZGV4T2ZgIGlmIGBmaW5kSW5kZXhgIGlzbid0IHN1cHBvcnRlZFxuICB2YXIgbWF0Y2ggPSBmaW5kKGFyciwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmpbcHJvcF0gPT09IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIGFyci5pbmRleE9mKG1hdGNoKTtcbn1cblxuLyoqXG4gKiBMb29wIHRyb3VnaCB0aGUgbGlzdCBvZiBtb2RpZmllcnMgYW5kIHJ1biB0aGVtIGluIG9yZGVyLFxuICogZWFjaCBvZiB0aGVtIHdpbGwgdGhlbiBlZGl0IHRoZSBkYXRhIG9iamVjdC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICogQHBhcmFtIHtBcnJheX0gbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gZW5kcyAtIE9wdGlvbmFsIG1vZGlmaWVyIG5hbWUgdXNlZCBhcyBzdG9wcGVyXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH1cbiAqL1xuZnVuY3Rpb24gcnVuTW9kaWZpZXJzKG1vZGlmaWVycywgZGF0YSwgZW5kcykge1xuICB2YXIgbW9kaWZpZXJzVG9SdW4gPSBlbmRzID09PSB1bmRlZmluZWQgPyBtb2RpZmllcnMgOiBtb2RpZmllcnMuc2xpY2UoMCwgZmluZEluZGV4KG1vZGlmaWVycywgJ25hbWUnLCBlbmRzKSk7XG5cbiAgbW9kaWZpZXJzVG9SdW4uZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICBpZiAobW9kaWZpZXJbJ2Z1bmN0aW9uJ10pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICBjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7XG4gICAgfVxuICAgIHZhciBmbiA9IG1vZGlmaWVyWydmdW5jdGlvbiddIHx8IG1vZGlmaWVyLmZuOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgIGlmIChtb2RpZmllci5lbmFibGVkICYmIGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAvLyBBZGQgcHJvcGVydGllcyB0byBvZmZzZXRzIHRvIG1ha2UgdGhlbSBhIGNvbXBsZXRlIGNsaWVudFJlY3Qgb2JqZWN0XG4gICAgICAvLyB3ZSBkbyB0aGlzIGJlZm9yZSBlYWNoIG1vZGlmaWVyIHRvIG1ha2Ugc3VyZSB0aGUgcHJldmlvdXMgb25lIGRvZXNuJ3RcbiAgICAgIC8vIG1lc3Mgd2l0aCB0aGVzZSB2YWx1ZXNcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuICAgICAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldENsaWVudFJlY3QoZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSk7XG5cbiAgICAgIGRhdGEgPSBmbihkYXRhLCBtb2RpZmllcik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wcGVyLCBjb21wdXRpbmcgdGhlIG5ldyBvZmZzZXRzIGFuZCBhcHBseWluZ1xuICogdGhlIG5ldyBzdHlsZS48YnIgLz5cbiAqIFByZWZlciBgc2NoZWR1bGVVcGRhdGVgIG92ZXIgYHVwZGF0ZWAgYmVjYXVzZSBvZiBwZXJmb3JtYW5jZSByZWFzb25zLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiB1cGRhdGUoKSB7XG4gIC8vIGlmIHBvcHBlciBpcyBkZXN0cm95ZWQsIGRvbid0IHBlcmZvcm0gYW55IGZ1cnRoZXIgdXBkYXRlXG4gIGlmICh0aGlzLnN0YXRlLmlzRGVzdHJveWVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRhdGEgPSB7XG4gICAgaW5zdGFuY2U6IHRoaXMsXG4gICAgc3R5bGVzOiB7fSxcbiAgICBhcnJvd1N0eWxlczoge30sXG4gICAgYXR0cmlidXRlczoge30sXG4gICAgZmxpcHBlZDogZmFsc2UsXG4gICAgb2Zmc2V0czoge31cbiAgfTtcblxuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZU9mZnNldHModGhpcy5zdGF0ZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIGRhdGEucGxhY2VtZW50ID0gY29tcHV0ZUF1dG9QbGFjZW1lbnQodGhpcy5vcHRpb25zLnBsYWNlbWVudCwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgdGhpcy5wb3BwZXIsIHRoaXMucmVmZXJlbmNlLCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICAvLyBzdG9yZSB0aGUgY29tcHV0ZWQgcGxhY2VtZW50IGluc2lkZSBgb3JpZ2luYWxQbGFjZW1lbnRgXG4gIGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcblxuICBkYXRhLnBvc2l0aW9uRml4ZWQgPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZDtcblxuICAvLyBjb21wdXRlIHRoZSBwb3BwZXIgb2Zmc2V0c1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0UG9wcGVyT2Zmc2V0cyh0aGlzLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIucG9zaXRpb24gPSB0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCA/ICdmaXhlZCcgOiAnYWJzb2x1dGUnO1xuXG4gIC8vIHJ1biB0aGUgbW9kaWZpZXJzXG4gIGRhdGEgPSBydW5Nb2RpZmllcnModGhpcy5tb2RpZmllcnMsIGRhdGEpO1xuXG4gIC8vIHRoZSBmaXJzdCBgdXBkYXRlYCB3aWxsIGNhbGwgYG9uQ3JlYXRlYCBjYWxsYmFja1xuICAvLyB0aGUgb3RoZXIgb25lcyB3aWxsIGNhbGwgYG9uVXBkYXRlYCBjYWxsYmFja1xuICBpZiAoIXRoaXMuc3RhdGUuaXNDcmVhdGVkKSB7XG4gICAgdGhpcy5zdGF0ZS5pc0NyZWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMub3B0aW9ucy5vbkNyZWF0ZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBpcyBlbmFibGVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTW9kaWZpZXJFbmFibGVkKG1vZGlmaWVycywgbW9kaWZpZXJOYW1lKSB7XG4gIHJldHVybiBtb2RpZmllcnMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgICBlbmFibGVkID0gX3JlZi5lbmFibGVkO1xuICAgIHJldHVybiBlbmFibGVkICYmIG5hbWUgPT09IG1vZGlmaWVyTmFtZTtcbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBwcmVmaXhlZCBzdXBwb3J0ZWQgcHJvcGVydHkgbmFtZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHByb3BlcnR5IChjYW1lbENhc2UpXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBwcmVmaXhlZCBwcm9wZXJ0eSAoY2FtZWxDYXNlIG9yIFBhc2NhbENhc2UsIGRlcGVuZGluZyBvbiB0aGUgdmVuZG9yIHByZWZpeClcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKHByb3BlcnR5KSB7XG4gIHZhciBwcmVmaXhlcyA9IFtmYWxzZSwgJ21zJywgJ1dlYmtpdCcsICdNb3onLCAnTyddO1xuICB2YXIgdXBwZXJQcm9wID0gcHJvcGVydHkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHByZWZpeCA9IHByZWZpeGVzW2ldO1xuICAgIHZhciB0b0NoZWNrID0gcHJlZml4ID8gJycgKyBwcmVmaXggKyB1cHBlclByb3AgOiBwcm9wZXJ0eTtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbdG9DaGVja10gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdG9DaGVjaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRGVzdHJveXMgdGhlIHBvcHBlci5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgdGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgLy8gdG91Y2ggRE9NIG9ubHkgaWYgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGlzIGVuYWJsZWRcbiAgaWYgKGlzTW9kaWZpZXJFbmFibGVkKHRoaXMubW9kaWZpZXJzLCAnYXBwbHlTdHlsZScpKSB7XG4gICAgdGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUudG9wID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUubGVmdCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0ID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tID0gJyc7XG4gICAgdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlW2dldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyldID0gJyc7XG4gIH1cblxuICB0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpO1xuXG4gIC8vIHJlbW92ZSB0aGUgcG9wcGVyIGlmIHVzZXIgZXhwbGljaXRseSBhc2tlZCBmb3IgdGhlIGRlbGV0aW9uIG9uIGRlc3Ryb3lcbiAgLy8gZG8gbm90IHVzZSBgcmVtb3ZlYCBiZWNhdXNlIElFMTEgZG9lc24ndCBzdXBwb3J0IGl0XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95KSB7XG4gICAgdGhpcy5wb3BwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBvcHBlcik7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qKlxuICogR2V0IHRoZSB3aW5kb3cgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50XG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvdyhlbGVtZW50KSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFRvU2Nyb2xsUGFyZW50cyhzY3JvbGxQYXJlbnQsIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cykge1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50Lm5vZGVOYW1lID09PSAnQk9EWSc7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBzY3JvbGxQYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHNjcm9sbFBhcmVudDtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGNhbGxiYWNrLCB7IHBhc3NpdmU6IHRydWUgfSk7XG5cbiAgaWYgKCFpc0JvZHkpIHtcbiAgICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoZ2V0U2Nyb2xsUGFyZW50KHRhcmdldC5wYXJlbnROb2RlKSwgZXZlbnQsIGNhbGxiYWNrLCBzY3JvbGxQYXJlbnRzKTtcbiAgfVxuICBzY3JvbGxQYXJlbnRzLnB1c2godGFyZ2V0KTtcbn1cblxuLyoqXG4gKiBTZXR1cCBuZWVkZWQgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNldHVwRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBvcHRpb25zLCBzdGF0ZSwgdXBkYXRlQm91bmQpIHtcbiAgLy8gUmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBzdGF0ZS51cGRhdGVCb3VuZCA9IHVwZGF0ZUJvdW5kO1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIC8vIFNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChyZWZlcmVuY2UpO1xuICBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsRWxlbWVudCwgJ3Njcm9sbCcsIHN0YXRlLnVwZGF0ZUJvdW5kLCBzdGF0ZS5zY3JvbGxQYXJlbnRzKTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IHNjcm9sbEVsZW1lbnQ7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSB0cnVlO1xuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBJdCB3aWxsIGFkZCByZXNpemUvc2Nyb2xsIGV2ZW50cyBhbmQgc3RhcnQgcmVjYWxjdWxhdGluZ1xuICogcG9zaXRpb24gb2YgdGhlIHBvcHBlciBlbGVtZW50IHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycygpIHtcbiAgaWYgKCF0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICB0aGlzLnN0YXRlID0gc2V0dXBFdmVudExpc3RlbmVycyh0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLCB0aGlzLnN0YXRlLCB0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNlZCB0byB1cGRhdGUgdGhlIHBvcHBlciBwb3NpdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBzdGF0ZSkge1xuICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIG9uIHdpbmRvd1xuICBnZXRXaW5kb3cocmVmZXJlbmNlKS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG5cbiAgLy8gUmVtb3ZlIHNjcm9sbCBldmVudCBsaXN0ZW5lciBvbiBzY3JvbGwgcGFyZW50c1xuICBzdGF0ZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCk7XG4gIH0pO1xuXG4gIC8vIFJlc2V0IHN0YXRlXG4gIHN0YXRlLnVwZGF0ZUJvdW5kID0gbnVsbDtcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IFtdO1xuICBzdGF0ZS5zY3JvbGxFbGVtZW50ID0gbnVsbDtcbiAgc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCByZW1vdmUgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHdvbid0IHJlY2FsY3VsYXRlIHBvcHBlciBwb3NpdGlvblxuICogd2hlbiB0aGV5IGFyZSB0cmlnZ2VyZWQuIEl0IGFsc28gd29uJ3QgdHJpZ2dlciBgb25VcGRhdGVgIGNhbGxiYWNrIGFueW1vcmUsXG4gKiB1bmxlc3MgeW91IGNhbGwgYHVwZGF0ZWAgbWV0aG9kIG1hbnVhbGx5LlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG5mdW5jdGlvbiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICh0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQpIHtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKTtcbiAgICB0aGlzLnN0YXRlID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMuc3RhdGUpO1xuICB9XG59XG5cbi8qKlxuICogVGVsbHMgaWYgYSBnaXZlbiBpbnB1dCBpcyBhIG51bWJlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHsqfSBpbnB1dCB0byBjaGVja1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOdW1lcmljKG4pIHtcbiAgcmV0dXJuIG4gIT09ICcnICYmICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHN0eWxlIHRvIHRoZSBnaXZlbiBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYXBwbHkgdGhlIHN0eWxlIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRTdHlsZXMoZWxlbWVudCwgc3R5bGVzKSB7XG4gIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB1bml0ID0gJyc7XG4gICAgLy8gYWRkIHVuaXQgaWYgdGhlIHZhbHVlIGlzIG51bWVyaWMgYW5kIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gICAgaWYgKFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLmluZGV4T2YocHJvcCkgIT09IC0xICYmIGlzTnVtZXJpYyhzdHlsZXNbcHJvcF0pKSB7XG4gICAgICB1bml0ID0gJ3B4JztcbiAgICB9XG4gICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlc1twcm9wXSArIHVuaXQ7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCB0aGUgYXR0cmlidXRlcyB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBhdHRyaWJ1dGVzIHRvXG4gKiBAYXJndW1lbnQge09iamVjdH0gc3R5bGVzXG4gKiBPYmplY3Qgd2l0aCBhIGxpc3Qgb2YgcHJvcGVydGllcyBhbmQgdmFsdWVzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudFxuICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbcHJvcF07XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocHJvcCwgYXR0cmlidXRlc1twcm9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5zdHlsZXMgLSBMaXN0IG9mIHN0eWxlIHByb3BlcnRpZXMgLSB2YWx1ZXMgdG8gYXBwbHkgdG8gcG9wcGVyIGVsZW1lbnRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhLmF0dHJpYnV0ZXMgLSBMaXN0IG9mIGF0dHJpYnV0ZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc2FtZSBkYXRhIG9iamVjdFxuICovXG5mdW5jdGlvbiBhcHBseVN0eWxlKGRhdGEpIHtcbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuc3R5bGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gaW4gdGhpcyB3YXkgd2UgY2FuIG1ha2UgdGhlIDNyZCBwYXJ0eSBtb2RpZmllcnMgYWRkIGN1c3RvbSBzdHlsZXMgdG8gaXRcbiAgLy8gQmUgYXdhcmUsIG1vZGlmaWVycyBjb3VsZCBvdmVycmlkZSB0aGUgcHJvcGVydGllcyBkZWZpbmVkIGluIHRoZSBwcmV2aW91c1xuICAvLyBsaW5lcyBvZiB0aGlzIG1vZGlmaWVyIVxuICBzZXRTdHlsZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuc3R5bGVzKTtcblxuICAvLyBhbnkgcHJvcGVydHkgcHJlc2VudCBpbiBgZGF0YS5hdHRyaWJ1dGVzYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlcixcbiAgLy8gdGhleSB3aWxsIGJlIHNldCBhcyBIVE1MIGF0dHJpYnV0ZXMgb2YgdGhlIGVsZW1lbnRcbiAgc2V0QXR0cmlidXRlcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5hdHRyaWJ1dGVzKTtcblxuICAvLyBpZiBhcnJvd0VsZW1lbnQgaXMgZGVmaW5lZCBhbmQgYXJyb3dTdHlsZXMgaGFzIHNvbWUgcHJvcGVydGllc1xuICBpZiAoZGF0YS5hcnJvd0VsZW1lbnQgJiYgT2JqZWN0LmtleXMoZGF0YS5hcnJvd1N0eWxlcykubGVuZ3RoKSB7XG4gICAgc2V0U3R5bGVzKGRhdGEuYXJyb3dFbGVtZW50LCBkYXRhLmFycm93U3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIFNldCB0aGUgeC1wbGFjZW1lbnQgYXR0cmlidXRlIGJlZm9yZSBldmVyeXRoaW5nIGVsc2UgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkXG4gKiB0byBhZGQgbWFyZ2lucyB0byB0aGUgcG9wcGVyIG1hcmdpbnMgbmVlZHMgdG8gYmUgY2FsY3VsYXRlZCB0byBnZXQgdGhlXG4gKiBjb3JyZWN0IHBvcHBlciBvZmZzZXRzLlxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5tb2RpZmllcnNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZSAtIFRoZSByZWZlcmVuY2UgZWxlbWVudCB1c2VkIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIGVsZW1lbnQgdXNlZCBhcyBwb3BwZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUG9wcGVyLmpzIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZU9uTG9hZChyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBzdGF0ZSkge1xuICAvLyBjb21wdXRlIHJlZmVyZW5jZSBlbGVtZW50IG9mZnNldHNcbiAgdmFyIHJlZmVyZW5jZU9mZnNldHMgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBjb21wdXRlIGF1dG8gcGxhY2VtZW50LCBzdG9yZSBwbGFjZW1lbnQgaW5zaWRlIHRoZSBkYXRhIG9iamVjdCxcbiAgLy8gbW9kaWZpZXJzIHdpbGwgYmUgYWJsZSB0byBlZGl0IGBwbGFjZW1lbnRgIGlmIG5lZWRlZFxuICAvLyBhbmQgcmVmZXIgdG8gb3JpZ2luYWxQbGFjZW1lbnQgdG8ga25vdyB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgdmFyIHBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KG9wdGlvbnMucGxhY2VtZW50LCByZWZlcmVuY2VPZmZzZXRzLCBwb3BwZXIsIHJlZmVyZW5jZSwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCwgb3B0aW9ucy5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtcblxuICBwb3BwZXIuc2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcsIHBsYWNlbWVudCk7XG5cbiAgLy8gQXBwbHkgYHBvc2l0aW9uYCB0byBwb3BwZXIgYmVmb3JlIGFueXRoaW5nIGVsc2UgYmVjYXVzZVxuICAvLyB3aXRob3V0IHRoZSBwb3NpdGlvbiBhcHBsaWVkIHdlIGNhbid0IGd1YXJhbnRlZSBjb3JyZWN0IGNvbXB1dGF0aW9uc1xuICBzZXRTdHlsZXMocG9wcGVyLCB7IHBvc2l0aW9uOiBvcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJyB9KTtcblxuICByZXR1cm4gb3B0aW9ucztcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gc2hvdWxkUm91bmQgLSBJZiB0aGUgb2Zmc2V0cyBzaG91bGQgYmUgcm91bmRlZCBhdCBhbGxcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwb3BwZXIncyBwb3NpdGlvbiBvZmZzZXRzIHJvdW5kZWRcbiAqXG4gKiBUaGUgdGFsZSBvZiBwaXhlbC1wZXJmZWN0IHBvc2l0aW9uaW5nLiBJdCdzIHN0aWxsIG5vdCAxMDAlIHBlcmZlY3QsIGJ1dCBhc1xuICogZ29vZCBhcyBpdCBjYW4gYmUgd2l0aGluIHJlYXNvbi5cbiAqIERpc2N1c3Npb24gaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL0ZlelZyYXN0YS9wb3BwZXIuanMvcHVsbC83MTVcbiAqXG4gKiBMb3cgRFBJIHNjcmVlbnMgY2F1c2UgYSBwb3BwZXIgdG8gYmUgYmx1cnJ5IGlmIG5vdCB1c2luZyBmdWxsIHBpeGVscyAoU2FmYXJpXG4gKiBhcyB3ZWxsIG9uIEhpZ2ggRFBJIHNjcmVlbnMpLlxuICpcbiAqIEZpcmVmb3ggcHJlZmVycyBubyByb3VuZGluZyBmb3IgcG9zaXRpb25pbmcgYW5kIGRvZXMgbm90IGhhdmUgYmx1cnJpbmVzcyBvblxuICogaGlnaCBEUEkgc2NyZWVucy5cbiAqXG4gKiBPbmx5IGhvcml6b250YWwgcGxhY2VtZW50IGFuZCBsZWZ0L3JpZ2h0IHZhbHVlcyBuZWVkIHRvIGJlIGNvbnNpZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHNob3VsZFJvdW5kKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZCxcbiAgICAgIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICB2YXIgbm9Sb3VuZCA9IGZ1bmN0aW9uIG5vUm91bmQodikge1xuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIHZhciByZWZlcmVuY2VXaWR0aCA9IHJvdW5kKHJlZmVyZW5jZS53aWR0aCk7XG4gIHZhciBwb3BwZXJXaWR0aCA9IHJvdW5kKHBvcHBlci53aWR0aCk7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGRhdGEucGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBpc1ZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LmluZGV4T2YoJy0nKSAhPT0gLTE7XG4gIHZhciBzYW1lV2lkdGhQYXJpdHkgPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IHBvcHBlcldpZHRoICUgMjtcbiAgdmFyIGJvdGhPZGRXaWR0aCA9IHJlZmVyZW5jZVdpZHRoICUgMiA9PT0gMSAmJiBwb3BwZXJXaWR0aCAlIDIgPT09IDE7XG5cbiAgdmFyIGhvcml6b250YWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogaXNWZXJ0aWNhbCB8fCBpc1ZhcmlhdGlvbiB8fCBzYW1lV2lkdGhQYXJpdHkgPyByb3VuZCA6IGZsb29yO1xuICB2YXIgdmVydGljYWxUb0ludGVnZXIgPSAhc2hvdWxkUm91bmQgPyBub1JvdW5kIDogcm91bmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBob3Jpem9udGFsVG9JbnRlZ2VyKGJvdGhPZGRXaWR0aCAmJiAhaXNWYXJpYXRpb24gJiYgc2hvdWxkUm91bmQgPyBwb3BwZXIubGVmdCAtIDEgOiBwb3BwZXIubGVmdCksXG4gICAgdG9wOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIudG9wKSxcbiAgICBib3R0b206IHZlcnRpY2FsVG9JbnRlZ2VyKHBvcHBlci5ib3R0b20pLFxuICAgIHJpZ2h0OiBob3Jpem9udGFsVG9JbnRlZ2VyKHBvcHBlci5yaWdodClcbiAgfTtcbn1cblxudmFyIGlzRmlyZWZveCA9IGlzQnJvd3NlciAmJiAvRmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZShkYXRhLCBvcHRpb25zKSB7XG4gIHZhciB4ID0gb3B0aW9ucy54LFxuICAgICAgeSA9IG9wdGlvbnMueTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgLy8gUmVtb3ZlIHRoaXMgbGVnYWN5IHN1cHBvcnQgaW4gUG9wcGVyLmpzIHYyXG5cbiAgdmFyIGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZSc7XG4gIH0pLmdwdUFjY2VsZXJhdGlvbjtcbiAgaWYgKGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO1xuICB9XG4gIHZhciBncHVBY2NlbGVyYXRpb24gPSBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCA/IGxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiA6IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uO1xuXG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuICB2YXIgb2Zmc2V0UGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQpO1xuXG4gIC8vIFN0eWxlc1xuICB2YXIgc3R5bGVzID0ge1xuICAgIHBvc2l0aW9uOiBwb3BwZXIucG9zaXRpb25cbiAgfTtcblxuICB2YXIgb2Zmc2V0cyA9IGdldFJvdW5kZWRPZmZzZXRzKGRhdGEsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDwgMiB8fCAhaXNGaXJlZm94KTtcblxuICB2YXIgc2lkZUEgPSB4ID09PSAnYm90dG9tJyA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gIHZhciBzaWRlQiA9IHkgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG4gIC8vIGlmIGdwdUFjY2VsZXJhdGlvbiBpcyBzZXQgdG8gYHRydWVgIGFuZCB0cmFuc2Zvcm0gaXMgc3VwcG9ydGVkLFxuICAvLyAgd2UgdXNlIGB0cmFuc2xhdGUzZGAgdG8gYXBwbHkgdGhlIHBvc2l0aW9uIHRvIHRoZSBwb3BwZXIgd2VcbiAgLy8gYXV0b21hdGljYWxseSB1c2UgdGhlIHN1cHBvcnRlZCBwcmVmaXhlZCB2ZXJzaW9uIGlmIG5lZWRlZFxuICB2YXIgcHJlZml4ZWRQcm9wZXJ0eSA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG5cbiAgLy8gbm93LCBsZXQncyBtYWtlIGEgc3RlcCBiYWNrIGFuZCBsb29rIGF0IHRoaXMgY29kZSBjbG9zZWx5ICh3dGY/KVxuICAvLyBJZiB0aGUgY29udGVudCBvZiB0aGUgcG9wcGVyIGdyb3dzIG9uY2UgaXQncyBiZWVuIHBvc2l0aW9uZWQsIGl0XG4gIC8vIG1heSBoYXBwZW4gdGhhdCB0aGUgcG9wcGVyIGdldHMgbWlzcGxhY2VkIGJlY2F1c2Ugb2YgdGhlIG5ldyBjb250ZW50XG4gIC8vIG92ZXJmbG93aW5nIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUbyBhdm9pZCB0aGlzIHByb2JsZW0sIHdlIHByb3ZpZGUgdHdvIG9wdGlvbnMgKHggYW5kIHkpLCB3aGljaCBhbGxvd1xuICAvLyB0aGUgY29uc3VtZXIgdG8gZGVmaW5lIHRoZSBvZmZzZXQgb3JpZ2luLlxuICAvLyBJZiB3ZSBwb3NpdGlvbiBhIHBvcHBlciBvbiB0b3Agb2YgYSByZWZlcmVuY2UgZWxlbWVudCwgd2UgY2FuIHNldFxuICAvLyBgeGAgdG8gYHRvcGAgdG8gbWFrZSB0aGUgcG9wcGVyIGdyb3cgdG93YXJkcyBpdHMgdG9wIGluc3RlYWQgb2ZcbiAgLy8gaXRzIGJvdHRvbS5cbiAgdmFyIGxlZnQgPSB2b2lkIDAsXG4gICAgICB0b3AgPSB2b2lkIDA7XG4gIGlmIChzaWRlQSA9PT0gJ2JvdHRvbScpIHtcbiAgICAvLyB3aGVuIG9mZnNldFBhcmVudCBpcyA8aHRtbD4gdGhlIHBvc2l0aW9uaW5nIGlzIHJlbGF0aXZlIHRvIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiAoZXhjbHVkaW5nIHRoZSBzY3JvbGxiYXIpXG4gICAgLy8gYW5kIG5vdCB0aGUgYm90dG9tIG9mIHRoZSBodG1sIGVsZW1lbnRcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0ICsgb2Zmc2V0cy5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IC1vZmZzZXRQYXJlbnRSZWN0LmhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0b3AgPSBvZmZzZXRzLnRvcDtcbiAgfVxuICBpZiAoc2lkZUIgPT09ICdyaWdodCcpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IC1vZmZzZXRQYXJlbnRSZWN0LndpZHRoICsgb2Zmc2V0cy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldHMubGVmdDtcbiAgfVxuICBpZiAoZ3B1QWNjZWxlcmF0aW9uICYmIHByZWZpeGVkUHJvcGVydHkpIHtcbiAgICBzdHlsZXNbcHJlZml4ZWRQcm9wZXJ0eV0gPSAndHJhbnNsYXRlM2QoJyArIGxlZnQgKyAncHgsICcgKyB0b3AgKyAncHgsIDApJztcbiAgICBzdHlsZXNbc2lkZUFdID0gMDtcbiAgICBzdHlsZXNbc2lkZUJdID0gMDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9ICd0cmFuc2Zvcm0nO1xuICB9IGVsc2Uge1xuICAgIC8vIG90aHdlcmlzZSwgd2UgdXNlIHRoZSBzdGFuZGFyZCBgdG9wYCwgYGxlZnRgLCBgYm90dG9tYCBhbmQgYHJpZ2h0YCBwcm9wZXJ0aWVzXG4gICAgdmFyIGludmVydFRvcCA9IHNpZGVBID09PSAnYm90dG9tJyA/IC0xIDogMTtcbiAgICB2YXIgaW52ZXJ0TGVmdCA9IHNpZGVCID09PSAncmlnaHQnID8gLTEgOiAxO1xuICAgIHN0eWxlc1tzaWRlQV0gPSB0b3AgKiBpbnZlcnRUb3A7XG4gICAgc3R5bGVzW3NpZGVCXSA9IGxlZnQgKiBpbnZlcnRMZWZ0O1xuICAgIHN0eWxlcy53aWxsQ2hhbmdlID0gc2lkZUEgKyAnLCAnICsgc2lkZUI7XG4gIH1cblxuICAvLyBBdHRyaWJ1dGVzXG4gIHZhciBhdHRyaWJ1dGVzID0ge1xuICAgICd4LXBsYWNlbWVudCc6IGRhdGEucGxhY2VtZW50XG4gIH07XG5cbiAgLy8gVXBkYXRlIGBkYXRhYCBhdHRyaWJ1dGVzLCBzdHlsZXMgYW5kIGFycm93U3R5bGVzXG4gIGRhdGEuYXR0cmlidXRlcyA9IF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCBkYXRhLmF0dHJpYnV0ZXMpO1xuICBkYXRhLnN0eWxlcyA9IF9leHRlbmRzKHt9LCBzdHlsZXMsIGRhdGEuc3R5bGVzKTtcbiAgZGF0YS5hcnJvd1N0eWxlcyA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMuYXJyb3csIGRhdGEuYXJyb3dTdHlsZXMpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEhlbHBlciB1c2VkIHRvIGtub3cgaWYgdGhlIGdpdmVuIG1vZGlmaWVyIGRlcGVuZHMgZnJvbSBhbm90aGVyIG9uZS48YnIgLz5cbiAqIEl0IGNoZWNrcyBpZiB0aGUgbmVlZGVkIG1vZGlmaWVyIGlzIGxpc3RlZCBhbmQgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVycyAtIGxpc3Qgb2YgbW9kaWZpZXJzXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGluZ05hbWUgLSBuYW1lIG9mIHJlcXVlc3RpbmcgbW9kaWZpZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0ZWROYW1lIC0gbmFtZSBvZiByZXF1ZXN0ZWQgbW9kaWZpZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyUmVxdWlyZWQobW9kaWZpZXJzLCByZXF1ZXN0aW5nTmFtZSwgcmVxdWVzdGVkTmFtZSkge1xuICB2YXIgcmVxdWVzdGluZyA9IGZpbmQobW9kaWZpZXJzLCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSByZXF1ZXN0aW5nTmFtZTtcbiAgfSk7XG5cbiAgdmFyIGlzUmVxdWlyZWQgPSAhIXJlcXVlc3RpbmcgJiYgbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09IHJlcXVlc3RlZE5hbWUgJiYgbW9kaWZpZXIuZW5hYmxlZCAmJiBtb2RpZmllci5vcmRlciA8IHJlcXVlc3Rpbmcub3JkZXI7XG4gIH0pO1xuXG4gIGlmICghaXNSZXF1aXJlZCkge1xuICAgIHZhciBfcmVxdWVzdGluZyA9ICdgJyArIHJlcXVlc3RpbmdOYW1lICsgJ2AnO1xuICAgIHZhciByZXF1ZXN0ZWQgPSAnYCcgKyByZXF1ZXN0ZWROYW1lICsgJ2AnO1xuICAgIGNvbnNvbGUud2FybihyZXF1ZXN0ZWQgKyAnIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5ICcgKyBfcmVxdWVzdGluZyArICcgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnICsgX3JlcXVlc3RpbmcgKyAnIScpO1xuICB9XG4gIHJldHVybiBpc1JlcXVpcmVkO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gYXJyb3coZGF0YSwgb3B0aW9ucykge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyRhcnJvdztcblxuICAvLyBhcnJvdyBkZXBlbmRzIG9uIGtlZXBUb2dldGhlciBpbiBvcmRlciB0byB3b3JrXG4gIGlmICghaXNNb2RpZmllclJlcXVpcmVkKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCAnYXJyb3cnLCAna2VlcFRvZ2V0aGVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBhcnJvd0VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGEgc3RyaW5nLCBzdXBwb3NlIGl0J3MgYSBDU1Mgc2VsZWN0b3JcbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gZGF0YS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIG5vdCBmb3VuZCwgZG9uJ3QgcnVuIHRoZSBtb2RpZmllclxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgdGhlIGFycm93RWxlbWVudCBpc24ndCBhIHF1ZXJ5IHNlbGVjdG9yIHdlIG11c3QgY2hlY2sgdGhhdCB0aGVcbiAgICAvLyBwcm92aWRlZCBET00gbm9kZSBpcyBjaGlsZCBvZiBpdHMgcG9wcGVyIG5vZGVcbiAgICBpZiAoIWRhdGEuaW5zdGFuY2UucG9wcGVyLmNvbnRhaW5zKGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNWZXJ0aWNhbCA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gIHZhciBzaWRlQ2FwaXRhbGl6ZWQgPSBpc1ZlcnRpY2FsID8gJ1RvcCcgOiAnTGVmdCc7XG4gIHZhciBzaWRlID0gc2lkZUNhcGl0YWxpemVkLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBhbHRTaWRlID0gaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnO1xuICB2YXIgb3BTaWRlID0gaXNWZXJ0aWNhbCA/ICdib3R0b20nIDogJ3JpZ2h0JztcbiAgdmFyIGFycm93RWxlbWVudFNpemUgPSBnZXRPdXRlclNpemVzKGFycm93RWxlbWVudClbbGVuXTtcblxuICAvL1xuICAvLyBleHRlbmRzIGtlZXBUb2dldGhlciBiZWhhdmlvciBtYWtpbmcgc3VyZSB0aGUgcG9wcGVyIGFuZCBpdHNcbiAgLy8gcmVmZXJlbmNlIGhhdmUgZW5vdWdoIHBpeGVscyBpbiBjb25qdW5jdGlvblxuICAvL1xuXG4gIC8vIHRvcC9sZWZ0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSA8IHBvcHBlcltzaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLT0gcG9wcGVyW3NpZGVdIC0gKHJlZmVyZW5jZVtvcFNpZGVdIC0gYXJyb3dFbGVtZW50U2l6ZSk7XG4gIH1cbiAgLy8gYm90dG9tL3JpZ2h0IHNpZGVcbiAgaWYgKHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgPiBwb3BwZXJbb3BTaWRlXSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gKz0gcmVmZXJlbmNlW3NpZGVdICsgYXJyb3dFbGVtZW50U2l6ZSAtIHBvcHBlcltvcFNpZGVdO1xuICB9XG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5wb3BwZXIpO1xuXG4gIC8vIGNvbXB1dGUgY2VudGVyIG9mIHRoZSBwb3BwZXJcbiAgdmFyIGNlbnRlciA9IHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVtsZW5dIC8gMiAtIGFycm93RWxlbWVudFNpemUgLyAyO1xuXG4gIC8vIENvbXB1dGUgdGhlIHNpZGVWYWx1ZSB1c2luZyB0aGUgdXBkYXRlZCBwb3BwZXIgb2Zmc2V0c1xuICAvLyB0YWtlIHBvcHBlciBtYXJnaW4gaW4gYWNjb3VudCBiZWNhdXNlIHdlIGRvbid0IGhhdmUgdGhpcyBpbmZvIGF2YWlsYWJsZVxuICB2YXIgY3NzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIHBvcHBlck1hcmdpblNpZGUgPSBwYXJzZUZsb2F0KGNzc1snbWFyZ2luJyArIHNpZGVDYXBpdGFsaXplZF0pO1xuICB2YXIgcG9wcGVyQm9yZGVyU2lkZSA9IHBhcnNlRmxvYXQoY3NzWydib3JkZXInICsgc2lkZUNhcGl0YWxpemVkICsgJ1dpZHRoJ10pO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeVJlZiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1RvcCk7XG5cbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9IGZsaXBwZWRWYXJpYXRpb25CeVJlZiB8fCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50O1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiLyohXG4gKiBDcm9wcGVyLmpzIHYxLjUuNlxuICogaHR0cHM6Ly9mZW5neXVhbmNoZW4uZ2l0aHViLmlvL2Nyb3BwZXJqc1xuICpcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQgQ2hlbiBGZW5neXVhblxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0xMC0wNFQwNDozMzo0OC4zNzJaXG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Dcm9wcGVyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBfdHlwZW9mKG9iaik7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pO1xuICAgICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgICBpZiAoaSAlIDIpIHtcbiAgICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgICByZXR1cm4gYXJyMjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgfVxuXG4gIHZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBXSU5ET1cgPSBJU19CUk9XU0VSID8gd2luZG93IDoge307XG4gIHZhciBJU19UT1VDSF9ERVZJQ0UgPSBJU19CUk9XU0VSID8gJ29udG91Y2hzdGFydCcgaW4gV0lORE9XLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGZhbHNlO1xuICB2YXIgSEFTX1BPSU5URVJfRVZFTlQgPSBJU19CUk9XU0VSID8gJ1BvaW50ZXJFdmVudCcgaW4gV0lORE9XIDogZmFsc2U7XG4gIHZhciBOQU1FU1BBQ0UgPSAnY3JvcHBlcic7IC8vIEFjdGlvbnNcblxuICB2YXIgQUNUSU9OX0FMTCA9ICdhbGwnO1xuICB2YXIgQUNUSU9OX0NST1AgPSAnY3JvcCc7XG4gIHZhciBBQ1RJT05fTU9WRSA9ICdtb3ZlJztcbiAgdmFyIEFDVElPTl9aT09NID0gJ3pvb20nO1xuICB2YXIgQUNUSU9OX0VBU1QgPSAnZSc7XG4gIHZhciBBQ1RJT05fV0VTVCA9ICd3JztcbiAgdmFyIEFDVElPTl9TT1VUSCA9ICdzJztcbiAgdmFyIEFDVElPTl9OT1JUSCA9ICduJztcbiAgdmFyIEFDVElPTl9OT1JUSF9FQVNUID0gJ25lJztcbiAgdmFyIEFDVElPTl9OT1JUSF9XRVNUID0gJ253JztcbiAgdmFyIEFDVElPTl9TT1VUSF9FQVNUID0gJ3NlJztcbiAgdmFyIEFDVElPTl9TT1VUSF9XRVNUID0gJ3N3JzsgLy8gQ2xhc3Nlc1xuXG4gIHZhciBDTEFTU19DUk9QID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1jcm9wXCIpO1xuICB2YXIgQ0xBU1NfRElTQUJMRUQgPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWRpc2FibGVkXCIpO1xuICB2YXIgQ0xBU1NfSElEREVOID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1oaWRkZW5cIik7XG4gIHZhciBDTEFTU19ISURFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1oaWRlXCIpO1xuICB2YXIgQ0xBU1NfSU5WSVNJQkxFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1pbnZpc2libGVcIik7XG4gIHZhciBDTEFTU19NT0RBTCA9IFwiXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItbW9kYWxcIik7XG4gIHZhciBDTEFTU19NT1ZFID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1tb3ZlXCIpOyAvLyBEYXRhIGtleXNcblxuICB2YXIgREFUQV9BQ1RJT04gPSBcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiQWN0aW9uXCIpO1xuICB2YXIgREFUQV9QUkVWSUVXID0gXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIlByZXZpZXdcIik7IC8vIERyYWcgbW9kZXNcblxuICB2YXIgRFJBR19NT0RFX0NST1AgPSAnY3JvcCc7XG4gIHZhciBEUkFHX01PREVfTU9WRSA9ICdtb3ZlJztcbiAgdmFyIERSQUdfTU9ERV9OT05FID0gJ25vbmUnOyAvLyBFdmVudHNcblxuICB2YXIgRVZFTlRfQ1JPUCA9ICdjcm9wJztcbiAgdmFyIEVWRU5UX0NST1BfRU5EID0gJ2Nyb3BlbmQnO1xuICB2YXIgRVZFTlRfQ1JPUF9NT1ZFID0gJ2Nyb3Btb3ZlJztcbiAgdmFyIEVWRU5UX0NST1BfU1RBUlQgPSAnY3JvcHN0YXJ0JztcbiAgdmFyIEVWRU5UX0RCTENMSUNLID0gJ2RibGNsaWNrJztcbiAgdmFyIEVWRU5UX1RPVUNIX1NUQVJUID0gSVNfVE9VQ0hfREVWSUNFID8gJ3RvdWNoc3RhcnQnIDogJ21vdXNlZG93bic7XG4gIHZhciBFVkVOVF9UT1VDSF9NT1ZFID0gSVNfVE9VQ0hfREVWSUNFID8gJ3RvdWNobW92ZScgOiAnbW91c2Vtb3ZlJztcbiAgdmFyIEVWRU5UX1RPVUNIX0VORCA9IElTX1RPVUNIX0RFVklDRSA/ICd0b3VjaGVuZCB0b3VjaGNhbmNlbCcgOiAnbW91c2V1cCc7XG4gIHZhciBFVkVOVF9QT0lOVEVSX0RPV04gPSBIQVNfUE9JTlRFUl9FVkVOVCA/ICdwb2ludGVyZG93bicgOiBFVkVOVF9UT1VDSF9TVEFSVDtcbiAgdmFyIEVWRU5UX1BPSU5URVJfTU9WRSA9IEhBU19QT0lOVEVSX0VWRU5UID8gJ3BvaW50ZXJtb3ZlJyA6IEVWRU5UX1RPVUNIX01PVkU7XG4gIHZhciBFVkVOVF9QT0lOVEVSX1VQID0gSEFTX1BPSU5URVJfRVZFTlQgPyAncG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnIDogRVZFTlRfVE9VQ0hfRU5EO1xuICB2YXIgRVZFTlRfUkVBRFkgPSAncmVhZHknO1xuICB2YXIgRVZFTlRfUkVTSVpFID0gJ3Jlc2l6ZSc7XG4gIHZhciBFVkVOVF9XSEVFTCA9ICd3aGVlbCc7XG4gIHZhciBFVkVOVF9aT09NID0gJ3pvb20nOyAvLyBNaW1lIHR5cGVzXG5cbiAgdmFyIE1JTUVfVFlQRV9KUEVHID0gJ2ltYWdlL2pwZWcnOyAvLyBSZWdFeHBzXG5cbiAgdmFyIFJFR0VYUF9BQ1RJT05TID0gL15lfHd8c3xufHNlfHN3fG5lfG53fGFsbHxjcm9wfG1vdmV8em9vbSQvO1xuICB2YXIgUkVHRVhQX0RBVEFfVVJMID0gL15kYXRhOi87XG4gIHZhciBSRUdFWFBfREFUQV9VUkxfSlBFRyA9IC9eZGF0YTppbWFnZVxcL2pwZWc7YmFzZTY0LC87XG4gIHZhciBSRUdFWFBfVEFHX05BTUUgPSAvXmltZ3xjYW52YXMkL2k7IC8vIE1pc2NcbiAgLy8gSW5zcGlyZWQgYnkgdGhlIGRlZmF1bHQgd2lkdGggYW5kIGhlaWdodCBvZiBhIGNhbnZhcyBlbGVtZW50LlxuXG4gIHZhciBNSU5fQ09OVEFJTkVSX1dJRFRIID0gMjAwO1xuICB2YXIgTUlOX0NPTlRBSU5FUl9IRUlHSFQgPSAxMDA7XG5cbiAgdmFyIERFRkFVTFRTID0ge1xuICAgIC8vIERlZmluZSB0aGUgdmlldyBtb2RlIG9mIHRoZSBjcm9wcGVyXG4gICAgdmlld01vZGU6IDAsXG4gICAgLy8gMCwgMSwgMiwgM1xuICAgIC8vIERlZmluZSB0aGUgZHJhZ2dpbmcgbW9kZSBvZiB0aGUgY3JvcHBlclxuICAgIGRyYWdNb2RlOiBEUkFHX01PREVfQ1JPUCxcbiAgICAvLyAnY3JvcCcsICdtb3ZlJyBvciAnbm9uZSdcbiAgICAvLyBEZWZpbmUgdGhlIGluaXRpYWwgYXNwZWN0IHJhdGlvIG9mIHRoZSBjcm9wIGJveFxuICAgIGluaXRpYWxBc3BlY3RSYXRpbzogTmFOLFxuICAgIC8vIERlZmluZSB0aGUgYXNwZWN0IHJhdGlvIG9mIHRoZSBjcm9wIGJveFxuICAgIGFzcGVjdFJhdGlvOiBOYU4sXG4gICAgLy8gQW4gb2JqZWN0IHdpdGggdGhlIHByZXZpb3VzIGNyb3BwaW5nIHJlc3VsdCBkYXRhXG4gICAgZGF0YTogbnVsbCxcbiAgICAvLyBBIHNlbGVjdG9yIGZvciBhZGRpbmcgZXh0cmEgY29udGFpbmVycyB0byBwcmV2aWV3XG4gICAgcHJldmlldzogJycsXG4gICAgLy8gUmUtcmVuZGVyIHRoZSBjcm9wcGVyIHdoZW4gcmVzaXplIHRoZSB3aW5kb3dcbiAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgIC8vIFJlc3RvcmUgdGhlIGNyb3BwZWQgYXJlYSBhZnRlciByZXNpemUgdGhlIHdpbmRvd1xuICAgIHJlc3RvcmU6IHRydWUsXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGN1cnJlbnQgaW1hZ2UgaXMgYSBjcm9zcy1vcmlnaW4gaW1hZ2VcbiAgICBjaGVja0Nyb3NzT3JpZ2luOiB0cnVlLFxuICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IGltYWdlJ3MgRXhpZiBPcmllbnRhdGlvbiBpbmZvcm1hdGlvblxuICAgIGNoZWNrT3JpZW50YXRpb246IHRydWUsXG4gICAgLy8gU2hvdyB0aGUgYmxhY2sgbW9kYWxcbiAgICBtb2RhbDogdHJ1ZSxcbiAgICAvLyBTaG93IHRoZSBkYXNoZWQgbGluZXMgZm9yIGd1aWRpbmdcbiAgICBndWlkZXM6IHRydWUsXG4gICAgLy8gU2hvdyB0aGUgY2VudGVyIGluZGljYXRvciBmb3IgZ3VpZGluZ1xuICAgIGNlbnRlcjogdHJ1ZSxcbiAgICAvLyBTaG93IHRoZSB3aGl0ZSBtb2RhbCB0byBoaWdobGlnaHQgdGhlIGNyb3AgYm94XG4gICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgIC8vIFNob3cgdGhlIGdyaWQgYmFja2dyb3VuZFxuICAgIGJhY2tncm91bmQ6IHRydWUsXG4gICAgLy8gRW5hYmxlIHRvIGNyb3AgdGhlIGltYWdlIGF1dG9tYXRpY2FsbHkgd2hlbiBpbml0aWFsaXplXG4gICAgYXV0b0Nyb3A6IHRydWUsXG4gICAgLy8gRGVmaW5lIHRoZSBwZXJjZW50YWdlIG9mIGF1dG9tYXRpYyBjcm9wcGluZyBhcmVhIHdoZW4gaW5pdGlhbGl6ZXNcbiAgICBhdXRvQ3JvcEFyZWE6IDAuOCxcbiAgICAvLyBFbmFibGUgdG8gbW92ZSB0aGUgaW1hZ2VcbiAgICBtb3ZhYmxlOiB0cnVlLFxuICAgIC8vIEVuYWJsZSB0byByb3RhdGUgdGhlIGltYWdlXG4gICAgcm90YXRhYmxlOiB0cnVlLFxuICAgIC8vIEVuYWJsZSB0byBzY2FsZSB0aGUgaW1hZ2VcbiAgICBzY2FsYWJsZTogdHJ1ZSxcbiAgICAvLyBFbmFibGUgdG8gem9vbSB0aGUgaW1hZ2VcbiAgICB6b29tYWJsZTogdHJ1ZSxcbiAgICAvLyBFbmFibGUgdG8gem9vbSB0aGUgaW1hZ2UgYnkgZHJhZ2dpbmcgdG91Y2hcbiAgICB6b29tT25Ub3VjaDogdHJ1ZSxcbiAgICAvLyBFbmFibGUgdG8gem9vbSB0aGUgaW1hZ2UgYnkgd2hlZWxpbmcgbW91c2VcbiAgICB6b29tT25XaGVlbDogdHJ1ZSxcbiAgICAvLyBEZWZpbmUgem9vbSByYXRpbyB3aGVuIHpvb20gdGhlIGltYWdlIGJ5IHdoZWVsaW5nIG1vdXNlXG4gICAgd2hlZWxab29tUmF0aW86IDAuMSxcbiAgICAvLyBFbmFibGUgdG8gbW92ZSB0aGUgY3JvcCBib3hcbiAgICBjcm9wQm94TW92YWJsZTogdHJ1ZSxcbiAgICAvLyBFbmFibGUgdG8gcmVzaXplIHRoZSBjcm9wIGJveFxuICAgIGNyb3BCb3hSZXNpemFibGU6IHRydWUsXG4gICAgLy8gVG9nZ2xlIGRyYWcgbW9kZSBiZXR3ZWVuIFwiY3JvcFwiIGFuZCBcIm1vdmVcIiB3aGVuIGNsaWNrIHR3aWNlIG9uIHRoZSBjcm9wcGVyXG4gICAgdG9nZ2xlRHJhZ01vZGVPbkRibGNsaWNrOiB0cnVlLFxuICAgIC8vIFNpemUgbGltaXRhdGlvblxuICAgIG1pbkNhbnZhc1dpZHRoOiAwLFxuICAgIG1pbkNhbnZhc0hlaWdodDogMCxcbiAgICBtaW5Dcm9wQm94V2lkdGg6IDAsXG4gICAgbWluQ3JvcEJveEhlaWdodDogMCxcbiAgICBtaW5Db250YWluZXJXaWR0aDogMjAwLFxuICAgIG1pbkNvbnRhaW5lckhlaWdodDogMTAwLFxuICAgIC8vIFNob3J0Y3V0cyBvZiBldmVudHNcbiAgICByZWFkeTogbnVsbCxcbiAgICBjcm9wc3RhcnQ6IG51bGwsXG4gICAgY3JvcG1vdmU6IG51bGwsXG4gICAgY3JvcGVuZDogbnVsbCxcbiAgICBjcm9wOiBudWxsLFxuICAgIHpvb206IG51bGxcbiAgfTtcblxuICB2YXIgVEVNUExBVEUgPSAnPGRpdiBjbGFzcz1cImNyb3BwZXItY29udGFpbmVyXCIgdG91Y2gtYWN0aW9uPVwibm9uZVwiPicgKyAnPGRpdiBjbGFzcz1cImNyb3BwZXItd3JhcC1ib3hcIj4nICsgJzxkaXYgY2xhc3M9XCJjcm9wcGVyLWNhbnZhc1wiPjwvZGl2PicgKyAnPC9kaXY+JyArICc8ZGl2IGNsYXNzPVwiY3JvcHBlci1kcmFnLWJveFwiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cImNyb3BwZXItY3JvcC1ib3hcIj4nICsgJzxzcGFuIGNsYXNzPVwiY3JvcHBlci12aWV3LWJveFwiPjwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPVwiY3JvcHBlci1kYXNoZWQgZGFzaGVkLWhcIj48L3NwYW4+JyArICc8c3BhbiBjbGFzcz1cImNyb3BwZXItZGFzaGVkIGRhc2hlZC12XCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLWNlbnRlclwiPjwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPVwiY3JvcHBlci1mYWNlXCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLWxpbmUgbGluZS1lXCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cImVcIj48L3NwYW4+JyArICc8c3BhbiBjbGFzcz1cImNyb3BwZXItbGluZSBsaW5lLW5cIiBkYXRhLWNyb3BwZXItYWN0aW9uPVwiblwiPjwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPVwiY3JvcHBlci1saW5lIGxpbmUtd1wiIGRhdGEtY3JvcHBlci1hY3Rpb249XCJ3XCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLWxpbmUgbGluZS1zXCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cInNcIj48L3NwYW4+JyArICc8c3BhbiBjbGFzcz1cImNyb3BwZXItcG9pbnQgcG9pbnQtZVwiIGRhdGEtY3JvcHBlci1hY3Rpb249XCJlXCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLXBvaW50IHBvaW50LW5cIiBkYXRhLWNyb3BwZXItYWN0aW9uPVwiblwiPjwvc3Bhbj4nICsgJzxzcGFuIGNsYXNzPVwiY3JvcHBlci1wb2ludCBwb2ludC13XCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cIndcIj48L3NwYW4+JyArICc8c3BhbiBjbGFzcz1cImNyb3BwZXItcG9pbnQgcG9pbnQtc1wiIGRhdGEtY3JvcHBlci1hY3Rpb249XCJzXCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLXBvaW50IHBvaW50LW5lXCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cIm5lXCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLXBvaW50IHBvaW50LW53XCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cIm53XCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLXBvaW50IHBvaW50LXN3XCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cInN3XCI+PC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJjcm9wcGVyLXBvaW50IHBvaW50LXNlXCIgZGF0YS1jcm9wcGVyLWFjdGlvbj1cInNlXCI+PC9zcGFuPicgKyAnPC9kaXY+JyArICc8L2Rpdj4nO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgbm90IGEgbnVtYmVyLlxuICAgKi9cblxuICB2YXIgaXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgV0lORE9XLmlzTmFOO1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgbnVtYmVyLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgcG9zaXRpdmUgbnVtYmVyLlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgcG9zaXRpdmUgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIHZhciBpc1Bvc2l0aXZlTnVtYmVyID0gZnVuY3Rpb24gaXNQb3NpdGl2ZU51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA+IDAgJiYgdmFsdWUgPCBJbmZpbml0eTtcbiAgfTtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyB1bmRlZmluZWQuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgdW5kZWZpbmVkLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBvYmplY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbiAgfVxuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgX2NvbnN0cnVjdG9yID0gdmFsdWUuY29uc3RydWN0b3I7XG4gICAgICB2YXIgcHJvdG90eXBlID0gX2NvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICAgIHJldHVybiBfY29uc3RydWN0b3IgJiYgcHJvdG90eXBlICYmIGhhc093blByb3BlcnR5LmNhbGwocHJvdG90eXBlLCAnaXNQcm90b3R5cGVPZicpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9XG4gIHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiAgLyoqXG4gICAqIENvbnZlcnQgYXJyYXktbGlrZSBvciBpdGVyYWJsZSBvYmplY3QgdG8gYW4gYXJyYXkuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgKi9cblxuICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20gPyBBcnJheS5mcm9tKHZhbHVlKSA6IHNsaWNlLmNhbGwodmFsdWUpO1xuICB9XG4gIC8qKlxuICAgKiBJdGVyYXRlIHRoZSBnaXZlbiBkYXRhLlxuICAgKiBAcGFyYW0geyp9IGRhdGEgLSBUaGUgZGF0YSB0byBpdGVyYXRlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBwcm9jZXNzIGZ1bmN0aW9uIGZvciBlYWNoIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHsqfSBUaGUgb3JpZ2luYWwgZGF0YS5cbiAgICovXG5cbiAgZnVuY3Rpb24gZm9yRWFjaChkYXRhLCBjYWxsYmFjaykge1xuICAgIGlmIChkYXRhICYmIGlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc051bWJlcihkYXRhLmxlbmd0aClcbiAgICAgIC8qIGFycmF5LWxpa2UgKi9cbiAgICAgICkge1xuICAgICAgICAgIHRvQXJyYXkoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbChkYXRhLCB2YWx1ZSwga2V5LCBkYXRhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKGRhdGEsIGRhdGFba2V5XSwga2V5LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbiAgLyoqXG4gICAqIEV4dGVuZCB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IHRvIGV4dGVuZC5cbiAgICogQHBhcmFtIHsqfSBhcmdzIC0gVGhlIHJlc3Qgb2JqZWN0cyBmb3IgbWVyZ2luZyB0byB0aGUgdGFyZ2V0IG9iamVjdC5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGV4dGVuZGVkIG9iamVjdC5cbiAgICovXG5cbiAgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdCh0YXJnZXQpICYmIGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFyZykpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBhcmdba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgdmFyIFJFR0VYUF9ERUNJTUFMUyA9IC9cXC5cXGQqKD86MHw5KXsxMn1cXGQqJC87XG4gIC8qKlxuICAgKiBOb3JtYWxpemUgZGVjaW1hbCBudW1iZXIuXG4gICAqIENoZWNrIG91dCB7QGxpbmsgaHR0cDovLzAuMzAwMDAwMDAwMDAwMDAwMDQuY29tL31cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIG5vcm1hbGl6ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lcz0xMDAwMDAwMDAwMDBdIC0gVGhlIHRpbWVzIGZvciBub3JtYWxpemluZy5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbm9ybWFsaXplZCBudW1iZXIuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZURlY2ltYWxOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgdGltZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDEwMDAwMDAwMDAwMDtcbiAgICByZXR1cm4gUkVHRVhQX0RFQ0lNQUxTLnRlc3QodmFsdWUpID8gTWF0aC5yb3VuZCh2YWx1ZSAqIHRpbWVzKSAvIHRpbWVzIDogdmFsdWU7XG4gIH1cbiAgdmFyIFJFR0VYUF9TVUZGSVggPSAvXndpZHRofGhlaWdodHxsZWZ0fHRvcHxtYXJnaW5MZWZ0fG1hcmdpblRvcCQvO1xuICAvKipcbiAgICogQXBwbHkgc3R5bGVzIHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgLSBUaGUgc3R5bGVzIGZvciBhcHBseWluZy5cbiAgICovXG5cbiAgZnVuY3Rpb24gc2V0U3R5bGUoZWxlbWVudCwgc3R5bGVzKSB7XG4gICAgdmFyIHN0eWxlID0gZWxlbWVudC5zdHlsZTtcbiAgICBmb3JFYWNoKHN0eWxlcywgZnVuY3Rpb24gKHZhbHVlLCBwcm9wZXJ0eSkge1xuICAgICAgaWYgKFJFR0VYUF9TVUZGSVgudGVzdChwcm9wZXJ0eSkgJiYgaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gXCJcIi5jb25jYXQodmFsdWUsIFwicHhcIik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBoYXMgYSBzcGVjaWFsIGNsYXNzLlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBjaGVjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIGNsYXNzIHRvIHNlYXJjaC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBzcGVjaWFsIGNsYXNzIHdhcyBmb3VuZC5cbiAgICovXG5cbiAgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QgPyBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh2YWx1ZSkgOiBlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKHZhbHVlKSA+IC0xO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgY2xhc3NlcyB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAgICovXG5cbiAgZnVuY3Rpb24gYWRkQ2xhc3MoZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKGVsZW1lbnQubGVuZ3RoKSkge1xuICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICBhZGRDbGFzcyhlbGVtLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnRyaW0oKTtcblxuICAgIGlmICghY2xhc3NOYW1lKSB7XG4gICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lLmluZGV4T2YodmFsdWUpIDwgMCkge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBcIlwiLmNvbmNhdChjbGFzc05hbWUsIFwiIFwiKS5jb25jYXQodmFsdWUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGNsYXNzZXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSByZW1vdmVkLlxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCB2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHJlbW92ZUNsYXNzKGVsZW0sIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdCkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHZhbHVlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZih2YWx1ZSkgPj0gMCkge1xuICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKHZhbHVlLCAnJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBZGQgb3IgcmVtb3ZlIGNsYXNzZXMgZnJvbSB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgY2xhc3NlcyB0byBiZSB0b2dnbGVkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFkZGVkIC0gQWRkIG9ubHkuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW1lbnQsIHZhbHVlLCBhZGRlZCkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoZWxlbWVudC5sZW5ndGgpKSB7XG4gICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHRvZ2dsZUNsYXNzKGVsZW0sIHZhbHVlLCBhZGRlZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElFMTAtMTEgZG9lc24ndCBzdXBwb3J0IHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIGBjbGFzc0xpc3QudG9nZ2xlYFxuXG5cbiAgICBpZiAoYWRkZWQpIHtcbiAgICAgIGFkZENsYXNzKGVsZW1lbnQsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICB2YXIgUkVHRVhQX0NBTUVMX0NBU0UgPSAvKFthLXpcXGRdKShbQS1aXSkvZztcbiAgLyoqXG4gICAqIFRyYW5zZm9ybSB0aGUgZ2l2ZW4gc3RyaW5nIGZyb20gY2FtZWxDYXNlIHRvIGtlYmFiLWNhc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiB0b1BhcmFtQ2FzZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKFJFR0VYUF9DQU1FTF9DQVNFLCAnJDEtJDInKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZGF0YSBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIGRhdGEga2V5IHRvIGdldC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGRhdGEgdmFsdWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldERhdGEoZWxlbWVudCwgbmFtZSkge1xuICAgIGlmIChpc09iamVjdChlbGVtZW50W25hbWVdKSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuZGF0YXNldCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZGF0YXNldFtuYW1lXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0b1BhcmFtQ2FzZShuYW1lKSkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgZGF0YSB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBkYXRhIGtleSB0byBzZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gVGhlIGRhdGEgdmFsdWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHNldERhdGEoZWxlbWVudCwgbmFtZSwgZGF0YSkge1xuICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IGRhdGE7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmRhdGFzZXQpIHtcbiAgICAgIGVsZW1lbnQuZGF0YXNldFtuYW1lXSA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1cIi5jb25jYXQodG9QYXJhbUNhc2UobmFtZSkpLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBkYXRhIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgZGF0YSBrZXkgdG8gcmVtb3ZlLlxuICAgKi9cblxuICBmdW5jdGlvbiByZW1vdmVEYXRhKGVsZW1lbnQsIG5hbWUpIHtcbiAgICBpZiAoaXNPYmplY3QoZWxlbWVudFtuYW1lXSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50W25hbWVdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZWxlbWVudFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuZGF0YXNldCkge1xuICAgICAgLy8gIzEyOCBTYWZhcmkgbm90IGFsbG93cyB0byBkZWxldGUgZGF0YXNldCBwcm9wZXJ0eVxuICAgICAgdHJ5IHtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZGF0YXNldFtuYW1lXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGVsZW1lbnQuZGF0YXNldFtuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLVwiLmNvbmNhdCh0b1BhcmFtQ2FzZShuYW1lKSkpO1xuICAgIH1cbiAgfVxuICB2YXIgUkVHRVhQX1NQQUNFUyA9IC9cXHNcXHMqLztcblxuICB2YXIgb25jZVN1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3VwcG9ydGVkID0gZmFsc2U7XG5cbiAgICBpZiAoSVNfQlJPV1NFUikge1xuICAgICAgdmFyIG9uY2UgPSBmYWxzZTtcblxuICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7fTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdvbmNlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBvbmNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIHNldHRlciBjYW4gZml4IGEgYFR5cGVFcnJvcmAgaW4gc3RyaWN0IG1vZGVcbiAgICAgICAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Vycm9ycy9HZXR0ZXJfb25seX1cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgb25jZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFdJTkRPVy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgICAgV0lORE9XLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcbiAgfSgpO1xuICAvKipcbiAgICogUmVtb3ZlIGV2ZW50IGxpc3RlbmVyIGZyb20gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgZXZlbnQgdGFyZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlKHMpLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgZXZlbnQgb3B0aW9ucy5cbiAgICovXG5cblxuICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcbiAgICB2YXIgaGFuZGxlciA9IGxpc3RlbmVyO1xuICAgIHR5cGUudHJpbSgpLnNwbGl0KFJFR0VYUF9TUEFDRVMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIW9uY2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGVsZW1lbnQubGlzdGVuZXJzO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lcnMgJiYgbGlzdGVuZXJzW2V2ZW50XSAmJiBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXSkge1xuICAgICAgICAgIGhhbmRsZXIgPSBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXTtcbiAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl07XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGlzdGVuZXJzW2V2ZW50XSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGlzdGVuZXJzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50Lmxpc3RlbmVycztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHRhcmdldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgZXZlbnQgdHlwZShzKS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBUaGUgZXZlbnQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGV2ZW50IG9wdGlvbnMuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuICAgIHZhciBfaGFuZGxlciA9IGxpc3RlbmVyO1xuICAgIHR5cGUudHJpbSgpLnNwbGl0KFJFR0VYUF9TUEFDRVMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAob3B0aW9ucy5vbmNlICYmICFvbmNlU3VwcG9ydGVkKSB7XG4gICAgICAgIHZhciBfZWxlbWVudCRsaXN0ZW5lcnMgPSBlbGVtZW50Lmxpc3RlbmVycyxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9IF9lbGVtZW50JGxpc3RlbmVycyA9PT0gdm9pZCAwID8ge30gOiBfZWxlbWVudCRsaXN0ZW5lcnM7XG5cbiAgICAgICAgX2hhbmRsZXIgPSBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXTtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIF9oYW5kbGVyLCBvcHRpb25zKTtcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpc3RlbmVyLmFwcGx5KGVsZW1lbnQsIGFyZ3MpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghbGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICAgIGxpc3RlbmVyc1tldmVudF0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lcnNbZXZlbnRdW2xpc3RlbmVyXSkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXJzW2V2ZW50XVtsaXN0ZW5lcl0gPSBfaGFuZGxlcjtcbiAgICAgICAgZWxlbWVudC5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgX2hhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaCBldmVudCBvbiB0aGUgdGFyZ2V0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCB0YXJnZXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGV2ZW50IHR5cGUocykuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIGFkZGl0aW9uYWwgZXZlbnQgZGF0YS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IEluZGljYXRlIGlmIHRoZSBldmVudCBpcyBkZWZhdWx0IHByZXZlbnRlZCBvciBub3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZWxlbWVudCwgdHlwZSwgZGF0YSkge1xuICAgIHZhciBldmVudDsgLy8gRXZlbnQgYW5kIEN1c3RvbUV2ZW50IG9uIElFOS0xMSBhcmUgZ2xvYmFsIG9iamVjdHMsIG5vdCBjb25zdHJ1Y3RvcnNcblxuICAgIGlmIChpc0Z1bmN0aW9uKEV2ZW50KSAmJiBpc0Z1bmN0aW9uKEN1c3RvbUV2ZW50KSkge1xuICAgICAgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSwge1xuICAgICAgICBkZXRhaWw6IGRhdGEsXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIG9mZnNldCBiYXNlIG9uIHRoZSBkb2N1bWVudC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IC0gVGhlIHRhcmdldCBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgb2Zmc2V0IGRhdGEuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldE9mZnNldChlbGVtZW50KSB7XG4gICAgdmFyIGJveCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgKHdpbmRvdy5wYWdlWE9mZnNldCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRMZWZ0KSxcbiAgICAgIHRvcDogYm94LnRvcCArICh3aW5kb3cucGFnZVlPZmZzZXQgLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50VG9wKVxuICAgIH07XG4gIH1cbiAgdmFyIGxvY2F0aW9uID0gV0lORE9XLmxvY2F0aW9uO1xuICB2YXIgUkVHRVhQX09SSUdJTlMgPSAvXihcXHcrOilcXC9cXC8oW146Lz8jXSopOj8oXFxkKikvaTtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiBVUkwgaXMgYSBjcm9zcyBvcmlnaW4gVVJMLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHRhcmdldCBVUkwuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZ2l2ZW4gVVJMIGlzIGEgY3Jvc3Mgb3JpZ2luIFVSTCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cblxuICBmdW5jdGlvbiBpc0Nyb3NzT3JpZ2luVVJMKHVybCkge1xuICAgIHZhciBwYXJ0cyA9IHVybC5tYXRjaChSRUdFWFBfT1JJR0lOUyk7XG4gICAgcmV0dXJuIHBhcnRzICE9PSBudWxsICYmIChwYXJ0c1sxXSAhPT0gbG9jYXRpb24ucHJvdG9jb2wgfHwgcGFydHNbMl0gIT09IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBhcnRzWzNdICE9PSBsb2NhdGlvbi5wb3J0KTtcbiAgfVxuICAvKipcbiAgICogQWRkIHRpbWVzdGFtcCB0byB0aGUgZ2l2ZW4gVVJMLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHRhcmdldCBVUkwuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZXN1bHQgVVJMLlxuICAgKi9cblxuICBmdW5jdGlvbiBhZGRUaW1lc3RhbXAodXJsKSB7XG4gICAgdmFyIHRpbWVzdGFtcCA9IFwidGltZXN0YW1wPVwiLmNvbmNhdChuZXcgRGF0ZSgpLmdldFRpbWUoKSk7XG4gICAgcmV0dXJuIHVybCArICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyB0aW1lc3RhbXA7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0cmFuc2Zvcm1zIGJhc2Ugb24gdGhlIGdpdmVuIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiAtIFRoZSB0YXJnZXQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyBjb250YWlucyB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1zKF9yZWYpIHtcbiAgICB2YXIgcm90YXRlID0gX3JlZi5yb3RhdGUsXG4gICAgICAgIHNjYWxlWCA9IF9yZWYuc2NhbGVYLFxuICAgICAgICBzY2FsZVkgPSBfcmVmLnNjYWxlWSxcbiAgICAgICAgdHJhbnNsYXRlWCA9IF9yZWYudHJhbnNsYXRlWCxcbiAgICAgICAgdHJhbnNsYXRlWSA9IF9yZWYudHJhbnNsYXRlWTtcbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAoaXNOdW1iZXIodHJhbnNsYXRlWCkgJiYgdHJhbnNsYXRlWCAhPT0gMCkge1xuICAgICAgdmFsdWVzLnB1c2goXCJ0cmFuc2xhdGVYKFwiLmNvbmNhdCh0cmFuc2xhdGVYLCBcInB4KVwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKHRyYW5zbGF0ZVkpICYmIHRyYW5zbGF0ZVkgIT09IDApIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwidHJhbnNsYXRlWShcIi5jb25jYXQodHJhbnNsYXRlWSwgXCJweClcIikpO1xuICAgIH0gLy8gUm90YXRlIHNob3VsZCBjb21lIGZpcnN0IGJlZm9yZSBzY2FsZSB0byBtYXRjaCBvcmllbnRhdGlvbiB0cmFuc2Zvcm1cblxuXG4gICAgaWYgKGlzTnVtYmVyKHJvdGF0ZSkgJiYgcm90YXRlICE9PSAwKSB7XG4gICAgICB2YWx1ZXMucHVzaChcInJvdGF0ZShcIi5jb25jYXQocm90YXRlLCBcImRlZylcIikpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihzY2FsZVgpICYmIHNjYWxlWCAhPT0gMSkge1xuICAgICAgdmFsdWVzLnB1c2goXCJzY2FsZVgoXCIuY29uY2F0KHNjYWxlWCwgXCIpXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOdW1iZXIoc2NhbGVZKSAmJiBzY2FsZVkgIT09IDEpIHtcbiAgICAgIHZhbHVlcy5wdXNoKFwic2NhbGVZKFwiLmNvbmNhdChzY2FsZVksIFwiKVwiKSk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZm9ybSA9IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXMuam9pbignICcpIDogJ25vbmUnO1xuICAgIHJldHVybiB7XG4gICAgICBXZWJraXRUcmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIG1zVHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbWF4IHJhdGlvIG9mIGEgZ3JvdXAgb2YgcG9pbnRlcnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwb2ludGVycyAtIFRoZSB0YXJnZXQgcG9pbnRlcnMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSByZXN1bHQgcmF0aW8uXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldE1heFpvb21SYXRpbyhwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyczIgPSBfb2JqZWN0U3ByZWFkMih7fSwgcG9pbnRlcnMpO1xuXG4gICAgdmFyIHJhdGlvcyA9IFtdO1xuICAgIGZvckVhY2gocG9pbnRlcnMsIGZ1bmN0aW9uIChwb2ludGVyLCBwb2ludGVySWQpIHtcbiAgICAgIGRlbGV0ZSBwb2ludGVyczJbcG9pbnRlcklkXTtcbiAgICAgIGZvckVhY2gocG9pbnRlcnMyLCBmdW5jdGlvbiAocG9pbnRlcjIpIHtcbiAgICAgICAgdmFyIHgxID0gTWF0aC5hYnMocG9pbnRlci5zdGFydFggLSBwb2ludGVyMi5zdGFydFgpO1xuICAgICAgICB2YXIgeTEgPSBNYXRoLmFicyhwb2ludGVyLnN0YXJ0WSAtIHBvaW50ZXIyLnN0YXJ0WSk7XG4gICAgICAgIHZhciB4MiA9IE1hdGguYWJzKHBvaW50ZXIuZW5kWCAtIHBvaW50ZXIyLmVuZFgpO1xuICAgICAgICB2YXIgeTIgPSBNYXRoLmFicyhwb2ludGVyLmVuZFkgLSBwb2ludGVyMi5lbmRZKTtcbiAgICAgICAgdmFyIHoxID0gTWF0aC5zcXJ0KHgxICogeDEgKyB5MSAqIHkxKTtcbiAgICAgICAgdmFyIHoyID0gTWF0aC5zcXJ0KHgyICogeDIgKyB5MiAqIHkyKTtcbiAgICAgICAgdmFyIHJhdGlvID0gKHoyIC0gejEpIC8gejE7XG4gICAgICAgIHJhdGlvcy5wdXNoKHJhdGlvKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJhdGlvcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gTWF0aC5hYnMoYSkgPCBNYXRoLmFicyhiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmF0aW9zWzBdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBwb2ludGVyIGZyb20gYW4gZXZlbnQgb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBUaGUgdGFyZ2V0IGV2ZW50IG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBlbmRPbmx5IC0gSW5kaWNhdGVzIGlmIG9ubHkgcmV0dXJucyB0aGUgZW5kIHBvaW50IGNvb3JkaW5hdGUgb3Igbm90LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0IHBvaW50ZXIgY29udGFpbnMgc3RhcnQgYW5kL29yIGVuZCBwb2ludCBjb29yZGluYXRlcy5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0UG9pbnRlcihfcmVmMiwgZW5kT25seSkge1xuICAgIHZhciBwYWdlWCA9IF9yZWYyLnBhZ2VYLFxuICAgICAgICBwYWdlWSA9IF9yZWYyLnBhZ2VZO1xuICAgIHZhciBlbmQgPSB7XG4gICAgICBlbmRYOiBwYWdlWCxcbiAgICAgIGVuZFk6IHBhZ2VZXG4gICAgfTtcbiAgICByZXR1cm4gZW5kT25seSA/IGVuZCA6IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICBzdGFydFk6IHBhZ2VZXG4gICAgfSwgZW5kKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjZW50ZXIgcG9pbnQgY29vcmRpbmF0ZSBvZiBhIGdyb3VwIG9mIHBvaW50ZXJzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlcnMgLSBUaGUgdGFyZ2V0IHBvaW50ZXJzLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY2VudGVyIHBvaW50IGNvb3JkaW5hdGUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGdldFBvaW50ZXJzQ2VudGVyKHBvaW50ZXJzKSB7XG4gICAgdmFyIHBhZ2VYID0gMDtcbiAgICB2YXIgcGFnZVkgPSAwO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgZm9yRWFjaChwb2ludGVycywgZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgc3RhcnRYID0gX3JlZjMuc3RhcnRYLFxuICAgICAgICAgIHN0YXJ0WSA9IF9yZWYzLnN0YXJ0WTtcbiAgICAgIHBhZ2VYICs9IHN0YXJ0WDtcbiAgICAgIHBhZ2VZICs9IHN0YXJ0WTtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfSk7XG4gICAgcGFnZVggLz0gY291bnQ7XG4gICAgcGFnZVkgLz0gY291bnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhZ2VYOiBwYWdlWCxcbiAgICAgIHBhZ2VZOiBwYWdlWVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbWF4IHNpemVzIGluIGEgcmVjdGFuZ2xlIHVuZGVyIHRoZSBnaXZlbiBhc3BlY3QgcmF0aW8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIG9yaWdpbmFsIHNpemVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9J2NvbnRhaW4nXSAtIFRoZSBhZGp1c3QgdHlwZS5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdCBzaXplcy5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0QWRqdXN0ZWRTaXplcyhfcmVmNCkgLy8gb3IgJ2NvdmVyJ1xuICB7XG4gICAgdmFyIGFzcGVjdFJhdGlvID0gX3JlZjQuYXNwZWN0UmF0aW8sXG4gICAgICAgIGhlaWdodCA9IF9yZWY0LmhlaWdodCxcbiAgICAgICAgd2lkdGggPSBfcmVmNC53aWR0aDtcbiAgICB2YXIgdHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2NvbnRhaW4nO1xuICAgIHZhciBpc1ZhbGlkV2lkdGggPSBpc1Bvc2l0aXZlTnVtYmVyKHdpZHRoKTtcbiAgICB2YXIgaXNWYWxpZEhlaWdodCA9IGlzUG9zaXRpdmVOdW1iZXIoaGVpZ2h0KTtcblxuICAgIGlmIChpc1ZhbGlkV2lkdGggJiYgaXNWYWxpZEhlaWdodCkge1xuICAgICAgdmFyIGFkanVzdGVkV2lkdGggPSBoZWlnaHQgKiBhc3BlY3RSYXRpbztcblxuICAgICAgaWYgKHR5cGUgPT09ICdjb250YWluJyAmJiBhZGp1c3RlZFdpZHRoID4gd2lkdGggfHwgdHlwZSA9PT0gJ2NvdmVyJyAmJiBhZGp1c3RlZFdpZHRoIDwgd2lkdGgpIHtcbiAgICAgICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpZHRoID0gaGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkV2lkdGgpIHtcbiAgICAgIGhlaWdodCA9IHdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkSGVpZ2h0KSB7XG4gICAgICB3aWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgbmV3IHNpemVzIG9mIGEgcmVjdGFuZ2xlIGFmdGVyIHJvdGF0ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIG9yaWdpbmFsIHNpemVzLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0IHNpemVzLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRSb3RhdGVkU2l6ZXMoX3JlZjUpIHtcbiAgICB2YXIgd2lkdGggPSBfcmVmNS53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gX3JlZjUuaGVpZ2h0LFxuICAgICAgICBkZWdyZWUgPSBfcmVmNS5kZWdyZWU7XG4gICAgZGVncmVlID0gTWF0aC5hYnMoZGVncmVlKSAlIDE4MDtcblxuICAgIGlmIChkZWdyZWUgPT09IDkwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogaGVpZ2h0LFxuICAgICAgICBoZWlnaHQ6IHdpZHRoXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBhcmMgPSBkZWdyZWUgJSA5MCAqIE1hdGguUEkgLyAxODA7XG4gICAgdmFyIHNpbkFyYyA9IE1hdGguc2luKGFyYyk7XG4gICAgdmFyIGNvc0FyYyA9IE1hdGguY29zKGFyYyk7XG4gICAgdmFyIG5ld1dpZHRoID0gd2lkdGggKiBjb3NBcmMgKyBoZWlnaHQgKiBzaW5BcmM7XG4gICAgdmFyIG5ld0hlaWdodCA9IHdpZHRoICogc2luQXJjICsgaGVpZ2h0ICogY29zQXJjO1xuICAgIHJldHVybiBkZWdyZWUgPiA5MCA/IHtcbiAgICAgIHdpZHRoOiBuZXdIZWlnaHQsXG4gICAgICBoZWlnaHQ6IG5ld1dpZHRoXG4gICAgfSA6IHtcbiAgICAgIHdpZHRoOiBuZXdXaWR0aCxcbiAgICAgIGhlaWdodDogbmV3SGVpZ2h0XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgY2FudmFzIHdoaWNoIGRyZXcgdGhlIGdpdmVuIGltYWdlLlxuICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR9IGltYWdlIC0gVGhlIGltYWdlIGZvciBkcmF3aW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gaW1hZ2VEYXRhIC0gVGhlIGltYWdlIGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXNEYXRhIC0gVGhlIGNhbnZhcyBkYXRhLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9IFRoZSByZXN1bHQgY2FudmFzLlxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRTb3VyY2VDYW52YXMoaW1hZ2UsIF9yZWY2LCBfcmVmNywgX3JlZjgpIHtcbiAgICB2YXIgaW1hZ2VBc3BlY3RSYXRpbyA9IF9yZWY2LmFzcGVjdFJhdGlvLFxuICAgICAgICBpbWFnZU5hdHVyYWxXaWR0aCA9IF9yZWY2Lm5hdHVyYWxXaWR0aCxcbiAgICAgICAgaW1hZ2VOYXR1cmFsSGVpZ2h0ID0gX3JlZjYubmF0dXJhbEhlaWdodCxcbiAgICAgICAgX3JlZjYkcm90YXRlID0gX3JlZjYucm90YXRlLFxuICAgICAgICByb3RhdGUgPSBfcmVmNiRyb3RhdGUgPT09IHZvaWQgMCA/IDAgOiBfcmVmNiRyb3RhdGUsXG4gICAgICAgIF9yZWY2JHNjYWxlWCA9IF9yZWY2LnNjYWxlWCxcbiAgICAgICAgc2NhbGVYID0gX3JlZjYkc2NhbGVYID09PSB2b2lkIDAgPyAxIDogX3JlZjYkc2NhbGVYLFxuICAgICAgICBfcmVmNiRzY2FsZVkgPSBfcmVmNi5zY2FsZVksXG4gICAgICAgIHNjYWxlWSA9IF9yZWY2JHNjYWxlWSA9PT0gdm9pZCAwID8gMSA6IF9yZWY2JHNjYWxlWTtcbiAgICB2YXIgYXNwZWN0UmF0aW8gPSBfcmVmNy5hc3BlY3RSYXRpbyxcbiAgICAgICAgbmF0dXJhbFdpZHRoID0gX3JlZjcubmF0dXJhbFdpZHRoLFxuICAgICAgICBuYXR1cmFsSGVpZ2h0ID0gX3JlZjcubmF0dXJhbEhlaWdodDtcbiAgICB2YXIgX3JlZjgkZmlsbENvbG9yID0gX3JlZjguZmlsbENvbG9yLFxuICAgICAgICBmaWxsQ29sb3IgPSBfcmVmOCRmaWxsQ29sb3IgPT09IHZvaWQgMCA/ICd0cmFuc3BhcmVudCcgOiBfcmVmOCRmaWxsQ29sb3IsXG4gICAgICAgIF9yZWY4JGltYWdlU21vb3RoaW5nRSA9IF9yZWY4LmltYWdlU21vb3RoaW5nRW5hYmxlZCxcbiAgICAgICAgaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gX3JlZjgkaW1hZ2VTbW9vdGhpbmdFID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjgkaW1hZ2VTbW9vdGhpbmdFLFxuICAgICAgICBfcmVmOCRpbWFnZVNtb290aGluZ1EgPSBfcmVmOC5pbWFnZVNtb290aGluZ1F1YWxpdHksXG4gICAgICAgIGltYWdlU21vb3RoaW5nUXVhbGl0eSA9IF9yZWY4JGltYWdlU21vb3RoaW5nUSA9PT0gdm9pZCAwID8gJ2xvdycgOiBfcmVmOCRpbWFnZVNtb290aGluZ1EsXG4gICAgICAgIF9yZWY4JG1heFdpZHRoID0gX3JlZjgubWF4V2lkdGgsXG4gICAgICAgIG1heFdpZHRoID0gX3JlZjgkbWF4V2lkdGggPT09IHZvaWQgMCA/IEluZmluaXR5IDogX3JlZjgkbWF4V2lkdGgsXG4gICAgICAgIF9yZWY4JG1heEhlaWdodCA9IF9yZWY4Lm1heEhlaWdodCxcbiAgICAgICAgbWF4SGVpZ2h0ID0gX3JlZjgkbWF4SGVpZ2h0ID09PSB2b2lkIDAgPyBJbmZpbml0eSA6IF9yZWY4JG1heEhlaWdodCxcbiAgICAgICAgX3JlZjgkbWluV2lkdGggPSBfcmVmOC5taW5XaWR0aCxcbiAgICAgICAgbWluV2lkdGggPSBfcmVmOCRtaW5XaWR0aCA9PT0gdm9pZCAwID8gMCA6IF9yZWY4JG1pbldpZHRoLFxuICAgICAgICBfcmVmOCRtaW5IZWlnaHQgPSBfcmVmOC5taW5IZWlnaHQsXG4gICAgICAgIG1pbkhlaWdodCA9IF9yZWY4JG1pbkhlaWdodCA9PT0gdm9pZCAwID8gMCA6IF9yZWY4JG1pbkhlaWdodDtcbiAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB2YXIgbWF4U2l6ZXMgPSBnZXRBZGp1c3RlZFNpemVzKHtcbiAgICAgIGFzcGVjdFJhdGlvOiBhc3BlY3RSYXRpbyxcbiAgICAgIHdpZHRoOiBtYXhXaWR0aCxcbiAgICAgIGhlaWdodDogbWF4SGVpZ2h0XG4gICAgfSk7XG4gICAgdmFyIG1pblNpemVzID0gZ2V0QWRqdXN0ZWRTaXplcyh7XG4gICAgICBhc3BlY3RSYXRpbzogYXNwZWN0UmF0aW8sXG4gICAgICB3aWR0aDogbWluV2lkdGgsXG4gICAgICBoZWlnaHQ6IG1pbkhlaWdodFxuICAgIH0sICdjb3ZlcicpO1xuICAgIHZhciB3aWR0aCA9IE1hdGgubWluKG1heFNpemVzLndpZHRoLCBNYXRoLm1heChtaW5TaXplcy53aWR0aCwgbmF0dXJhbFdpZHRoKSk7XG4gICAgdmFyIGhlaWdodCA9IE1hdGgubWluKG1heFNpemVzLmhlaWdodCwgTWF0aC5tYXgobWluU2l6ZXMuaGVpZ2h0LCBuYXR1cmFsSGVpZ2h0KSk7IC8vIE5vdGU6IHNob3VsZCBhbHdheXMgdXNlIGltYWdlJ3MgbmF0dXJhbCBzaXplcyBmb3IgZHJhd2luZyBhc1xuICAgIC8vIGltYWdlRGF0YS5uYXR1cmFsV2lkdGggPT09IGNhbnZhc0RhdGEubmF0dXJhbEhlaWdodCB3aGVuIHJvdGF0ZSAlIDE4MCA9PT0gOTBcblxuICAgIHZhciBkZXN0TWF4U2l6ZXMgPSBnZXRBZGp1c3RlZFNpemVzKHtcbiAgICAgIGFzcGVjdFJhdGlvOiBpbWFnZUFzcGVjdFJhdGlvLFxuICAgICAgd2lkdGg6IG1heFdpZHRoLFxuICAgICAgaGVpZ2h0OiBtYXhIZWlnaHRcbiAgICB9KTtcbiAgICB2YXIgZGVzdE1pblNpemVzID0gZ2V0QWRqdXN0ZWRTaXplcyh7XG4gICAgICBhc3BlY3RSYXRpbzogaW1hZ2VBc3BlY3RSYXRpbyxcbiAgICAgIHdpZHRoOiBtaW5XaWR0aCxcbiAgICAgIGhlaWdodDogbWluSGVpZ2h0XG4gICAgfSwgJ2NvdmVyJyk7XG4gICAgdmFyIGRlc3RXaWR0aCA9IE1hdGgubWluKGRlc3RNYXhTaXplcy53aWR0aCwgTWF0aC5tYXgoZGVzdE1pblNpemVzLndpZHRoLCBpbWFnZU5hdHVyYWxXaWR0aCkpO1xuICAgIHZhciBkZXN0SGVpZ2h0ID0gTWF0aC5taW4oZGVzdE1heFNpemVzLmhlaWdodCwgTWF0aC5tYXgoZGVzdE1pblNpemVzLmhlaWdodCwgaW1hZ2VOYXR1cmFsSGVpZ2h0KSk7XG4gICAgdmFyIHBhcmFtcyA9IFstZGVzdFdpZHRoIC8gMiwgLWRlc3RIZWlnaHQgLyAyLCBkZXN0V2lkdGgsIGRlc3RIZWlnaHRdO1xuICAgIGNhbnZhcy53aWR0aCA9IG5vcm1hbGl6ZURlY2ltYWxOdW1iZXIod2lkdGgpO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBub3JtYWxpemVEZWNpbWFsTnVtYmVyKGhlaWdodCk7XG4gICAgY29udGV4dC5maWxsU3R5bGUgPSBmaWxsQ29sb3I7XG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb250ZXh0LnNhdmUoKTtcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIGNvbnRleHQucm90YXRlKHJvdGF0ZSAqIE1hdGguUEkgLyAxODApO1xuICAgIGNvbnRleHQuc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgIGNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gaW1hZ2VTbW9vdGhpbmdFbmFibGVkO1xuICAgIGNvbnRleHQuaW1hZ2VTbW9vdGhpbmdRdWFsaXR5ID0gaW1hZ2VTbW9vdGhpbmdRdWFsaXR5O1xuICAgIGNvbnRleHQuZHJhd0ltYWdlLmFwcGx5KGNvbnRleHQsIFtpbWFnZV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwYXJhbXMubWFwKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3Iobm9ybWFsaXplRGVjaW1hbE51bWJlcihwYXJhbSkpO1xuICAgIH0pKSkpO1xuICAgIGNvbnRleHQucmVzdG9yZSgpO1xuICAgIHJldHVybiBjYW52YXM7XG4gIH1cbiAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4gIC8qKlxuICAgKiBHZXQgc3RyaW5nIGZyb20gY2hhciBjb2RlIGluIGRhdGEgdmlldy5cbiAgICogQHBhcmFtIHtEYXRhVmlld30gZGF0YVZpZXcgLSBUaGUgZGF0YSB2aWV3IGZvciByZWFkLlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgLSBUaGUgc3RhcnQgaW5kZXguXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggLSBUaGUgcmVhZCBsZW5ndGguXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWFkIHJlc3VsdC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0U3RyaW5nRnJvbUNoYXJDb2RlKGRhdGFWaWV3LCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGxlbmd0aCArPSBzdGFydDtcblxuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzdHIgKz0gZnJvbUNoYXJDb2RlKGRhdGFWaWV3LmdldFVpbnQ4KGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIHZhciBSRUdFWFBfREFUQV9VUkxfSEVBRCA9IC9eZGF0YTouKiwvO1xuICAvKipcbiAgICogVHJhbnNmb3JtIERhdGEgVVJMIHRvIGFycmF5IGJ1ZmZlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFVUkwgLSBUaGUgRGF0YSBVUkwgdG8gdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFRoZSByZXN1bHQgYXJyYXkgYnVmZmVyLlxuICAgKi9cblxuICBmdW5jdGlvbiBkYXRhVVJMVG9BcnJheUJ1ZmZlcihkYXRhVVJMKSB7XG4gICAgdmFyIGJhc2U2NCA9IGRhdGFVUkwucmVwbGFjZShSRUdFWFBfREFUQV9VUkxfSEVBRCwgJycpO1xuICAgIHZhciBiaW5hcnkgPSBhdG9iKGJhc2U2NCk7XG4gICAgdmFyIGFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJpbmFyeS5sZW5ndGgpO1xuICAgIHZhciB1aW50OCA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKTtcbiAgICBmb3JFYWNoKHVpbnQ4LCBmdW5jdGlvbiAodmFsdWUsIGkpIHtcbiAgICAgIHVpbnQ4W2ldID0gYmluYXJ5LmNoYXJDb2RlQXQoaSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5QnVmZmVyO1xuICB9XG4gIC8qKlxuICAgKiBUcmFuc2Zvcm0gYXJyYXkgYnVmZmVyIHRvIERhdGEgVVJMLlxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciAtIFRoZSBhcnJheSBidWZmZXIgdG8gdHJhbnNmb3JtLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWltZVR5cGUgLSBUaGUgbWltZSB0eXBlIG9mIHRoZSBEYXRhIFVSTC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHJlc3VsdCBEYXRhIFVSTC5cbiAgICovXG5cbiAgZnVuY3Rpb24gYXJyYXlCdWZmZXJUb0RhdGFVUkwoYXJyYXlCdWZmZXIsIG1pbWVUeXBlKSB7XG4gICAgdmFyIGNodW5rcyA9IFtdOyAvLyBDaHVuayBUeXBlZCBBcnJheSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlICgjNDM1KVxuXG4gICAgdmFyIGNodW5rU2l6ZSA9IDgxOTI7XG4gICAgdmFyIHVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xuXG4gICAgd2hpbGUgKHVpbnQ4Lmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFhYWDogQmFiZWwncyBgdG9Db25zdW1hYmxlQXJyYXlgIGhlbHBlciB3aWxsIHRocm93IGVycm9yIGluIElFIG9yIFNhZmFyaSA5XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgICAgY2h1bmtzLnB1c2goZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHRvQXJyYXkodWludDguc3ViYXJyYXkoMCwgY2h1bmtTaXplKSkpKTtcbiAgICAgIHVpbnQ4ID0gdWludDguc3ViYXJyYXkoY2h1bmtTaXplKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJkYXRhOlwiLmNvbmNhdChtaW1lVHlwZSwgXCI7YmFzZTY0LFwiKS5jb25jYXQoYnRvYShjaHVua3Muam9pbignJykpKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yaWVudGF0aW9uIHZhbHVlIGZyb20gZ2l2ZW4gYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciAtIFRoZSBhcnJheSBidWZmZXIgdG8gcmVhZC5cbiAgICogQHJldHVybnMge251bWJlcn0gVGhlIHJlYWQgb3JpZW50YXRpb24gdmFsdWUuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlc2V0QW5kR2V0T3JpZW50YXRpb24oYXJyYXlCdWZmZXIpIHtcbiAgICB2YXIgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXlCdWZmZXIpO1xuICAgIHZhciBvcmllbnRhdGlvbjsgLy8gSWdub3JlcyByYW5nZSBlcnJvciB3aGVuIHRoZSBpbWFnZSBkb2VzIG5vdCBoYXZlIGNvcnJlY3QgRXhpZiBpbmZvcm1hdGlvblxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBsaXR0bGVFbmRpYW47XG4gICAgICB2YXIgYXBwMVN0YXJ0O1xuICAgICAgdmFyIGlmZFN0YXJ0OyAvLyBPbmx5IGhhbmRsZSBKUEVHIGltYWdlIChzdGFydCBieSAweEZGRDgpXG5cbiAgICAgIGlmIChkYXRhVmlldy5nZXRVaW50OCgwKSA9PT0gMHhGRiAmJiBkYXRhVmlldy5nZXRVaW50OCgxKSA9PT0gMHhEOCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YVZpZXcuYnl0ZUxlbmd0aDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDI7XG5cbiAgICAgICAgd2hpbGUgKG9mZnNldCArIDEgPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDgob2Zmc2V0KSA9PT0gMHhGRiAmJiBkYXRhVmlldy5nZXRVaW50OChvZmZzZXQgKyAxKSA9PT0gMHhFMSkge1xuICAgICAgICAgICAgYXBwMVN0YXJ0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFwcDFTdGFydCkge1xuICAgICAgICB2YXIgZXhpZklEQ29kZSA9IGFwcDFTdGFydCArIDQ7XG4gICAgICAgIHZhciB0aWZmT2Zmc2V0ID0gYXBwMVN0YXJ0ICsgMTA7XG5cbiAgICAgICAgaWYgKGdldFN0cmluZ0Zyb21DaGFyQ29kZShkYXRhVmlldywgZXhpZklEQ29kZSwgNCkgPT09ICdFeGlmJykge1xuICAgICAgICAgIHZhciBlbmRpYW5uZXNzID0gZGF0YVZpZXcuZ2V0VWludDE2KHRpZmZPZmZzZXQpO1xuICAgICAgICAgIGxpdHRsZUVuZGlhbiA9IGVuZGlhbm5lc3MgPT09IDB4NDk0OTtcblxuICAgICAgICAgIGlmIChsaXR0bGVFbmRpYW4gfHwgZW5kaWFubmVzcyA9PT0gMHg0RDREXG4gICAgICAgICAgLyogYmlnRW5kaWFuICovXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhVmlldy5nZXRVaW50MTYodGlmZk9mZnNldCArIDIsIGxpdHRsZUVuZGlhbikgPT09IDB4MDAyQSkge1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdElGRE9mZnNldCA9IGRhdGFWaWV3LmdldFVpbnQzMih0aWZmT2Zmc2V0ICsgNCwgbGl0dGxlRW5kaWFuKTtcblxuICAgICAgICAgICAgICAgIGlmIChmaXJzdElGRE9mZnNldCA+PSAweDAwMDAwMDA4KSB7XG4gICAgICAgICAgICAgICAgICBpZmRTdGFydCA9IHRpZmZPZmZzZXQgKyBmaXJzdElGRE9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaWZkU3RhcnQpIHtcbiAgICAgICAgdmFyIF9sZW5ndGggPSBkYXRhVmlldy5nZXRVaW50MTYoaWZkU3RhcnQsIGxpdHRsZUVuZGlhbik7XG5cbiAgICAgICAgdmFyIF9vZmZzZXQ7XG5cbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IF9sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIF9vZmZzZXQgPSBpZmRTdGFydCArIGkgKiAxMiArIDI7XG5cbiAgICAgICAgICBpZiAoZGF0YVZpZXcuZ2V0VWludDE2KF9vZmZzZXQsIGxpdHRsZUVuZGlhbikgPT09IDB4MDExMlxuICAgICAgICAgIC8qIE9yaWVudGF0aW9uICovXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIDggaXMgdGhlIG9mZnNldCBvZiB0aGUgY3VycmVudCB0YWcncyB2YWx1ZVxuICAgICAgICAgICAgICBfb2Zmc2V0ICs9IDg7IC8vIEdldCB0aGUgb3JpZ2luYWwgb3JpZW50YXRpb24gdmFsdWVcblxuICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9IGRhdGFWaWV3LmdldFVpbnQxNihfb2Zmc2V0LCBsaXR0bGVFbmRpYW4pOyAvLyBPdmVycmlkZSB0aGUgb3JpZW50YXRpb24gd2l0aCBpdHMgZGVmYXVsdCB2YWx1ZVxuXG4gICAgICAgICAgICAgIGRhdGFWaWV3LnNldFVpbnQxNihfb2Zmc2V0LCAxLCBsaXR0bGVFbmRpYW4pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvcmllbnRhdGlvbiA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yaWVudGF0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZSBFeGlmIE9yaWVudGF0aW9uIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3JpZW50YXRpb24gLSBUaGUgb3JpZW50YXRpb24gdG8gcGFyc2UuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwYXJzZWQgcmVzdWx0LlxuICAgKi9cblxuICBmdW5jdGlvbiBwYXJzZU9yaWVudGF0aW9uKG9yaWVudGF0aW9uKSB7XG4gICAgdmFyIHJvdGF0ZSA9IDA7XG4gICAgdmFyIHNjYWxlWCA9IDE7XG4gICAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgICBzd2l0Y2ggKG9yaWVudGF0aW9uKSB7XG4gICAgICAvLyBGbGlwIGhvcml6b250YWxcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgc2NhbGVYID0gLTE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gUm90YXRlIGxlZnQgMTgwwrBcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByb3RhdGUgPSAtMTgwO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIEZsaXAgdmVydGljYWxcblxuICAgICAgY2FzZSA0OlxuICAgICAgICBzY2FsZVkgPSAtMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBGbGlwIHZlcnRpY2FsIGFuZCByb3RhdGUgcmlnaHQgOTDCsFxuXG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJvdGF0ZSA9IDkwO1xuICAgICAgICBzY2FsZVkgPSAtMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBSb3RhdGUgcmlnaHQgOTDCsFxuXG4gICAgICBjYXNlIDY6XG4gICAgICAgIHJvdGF0ZSA9IDkwO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIEZsaXAgaG9yaXpvbnRhbCBhbmQgcm90YXRlIHJpZ2h0IDkwwrBcblxuICAgICAgY2FzZSA3OlxuICAgICAgICByb3RhdGUgPSA5MDtcbiAgICAgICAgc2NhbGVYID0gLTE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gUm90YXRlIGxlZnQgOTDCsFxuXG4gICAgICBjYXNlIDg6XG4gICAgICAgIHJvdGF0ZSA9IC05MDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdGF0ZTogcm90YXRlLFxuICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICBzY2FsZVk6IHNjYWxlWVxuICAgIH07XG4gIH1cblxuICB2YXIgcmVuZGVyID0ge1xuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhpcy5pbml0Q29udGFpbmVyKCk7XG4gICAgICB0aGlzLmluaXRDYW52YXMoKTtcbiAgICAgIHRoaXMuaW5pdENyb3BCb3goKTtcbiAgICAgIHRoaXMucmVuZGVyQ2FudmFzKCk7XG5cbiAgICAgIGlmICh0aGlzLmNyb3BwZWQpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJDcm9wQm94KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0Q29udGFpbmVyOiBmdW5jdGlvbiBpbml0Q29udGFpbmVyKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICBjcm9wcGVyID0gdGhpcy5jcm9wcGVyO1xuICAgICAgYWRkQ2xhc3MoY3JvcHBlciwgQ0xBU1NfSElEREVOKTtcbiAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIENMQVNTX0hJRERFTik7XG4gICAgICB2YXIgY29udGFpbmVyRGF0YSA9IHtcbiAgICAgICAgd2lkdGg6IE1hdGgubWF4KGNvbnRhaW5lci5vZmZzZXRXaWR0aCwgTnVtYmVyKG9wdGlvbnMubWluQ29udGFpbmVyV2lkdGgpIHx8IDIwMCksXG4gICAgICAgIGhlaWdodDogTWF0aC5tYXgoY29udGFpbmVyLm9mZnNldEhlaWdodCwgTnVtYmVyKG9wdGlvbnMubWluQ29udGFpbmVySGVpZ2h0KSB8fCAxMDApXG4gICAgICB9O1xuICAgICAgdGhpcy5jb250YWluZXJEYXRhID0gY29udGFpbmVyRGF0YTtcbiAgICAgIHNldFN0eWxlKGNyb3BwZXIsIHtcbiAgICAgICAgd2lkdGg6IGNvbnRhaW5lckRhdGEud2lkdGgsXG4gICAgICAgIGhlaWdodDogY29udGFpbmVyRGF0YS5oZWlnaHRcbiAgICAgIH0pO1xuICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgQ0xBU1NfSElEREVOKTtcbiAgICAgIHJlbW92ZUNsYXNzKGNyb3BwZXIsIENMQVNTX0hJRERFTik7XG4gICAgfSxcbiAgICAvLyBDYW52YXMgKGltYWdlIHdyYXBwZXIpXG4gICAgaW5pdENhbnZhczogZnVuY3Rpb24gaW5pdENhbnZhcygpIHtcbiAgICAgIHZhciBjb250YWluZXJEYXRhID0gdGhpcy5jb250YWluZXJEYXRhLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgdmFyIHZpZXdNb2RlID0gdGhpcy5vcHRpb25zLnZpZXdNb2RlO1xuICAgICAgdmFyIHJvdGF0ZWQgPSBNYXRoLmFicyhpbWFnZURhdGEucm90YXRlKSAlIDE4MCA9PT0gOTA7XG4gICAgICB2YXIgbmF0dXJhbFdpZHRoID0gcm90YXRlZCA/IGltYWdlRGF0YS5uYXR1cmFsSGVpZ2h0IDogaW1hZ2VEYXRhLm5hdHVyYWxXaWR0aDtcbiAgICAgIHZhciBuYXR1cmFsSGVpZ2h0ID0gcm90YXRlZCA/IGltYWdlRGF0YS5uYXR1cmFsV2lkdGggOiBpbWFnZURhdGEubmF0dXJhbEhlaWdodDtcbiAgICAgIHZhciBhc3BlY3RSYXRpbyA9IG5hdHVyYWxXaWR0aCAvIG5hdHVyYWxIZWlnaHQ7XG4gICAgICB2YXIgY2FudmFzV2lkdGggPSBjb250YWluZXJEYXRhLndpZHRoO1xuICAgICAgdmFyIGNhbnZhc0hlaWdodCA9IGNvbnRhaW5lckRhdGEuaGVpZ2h0O1xuXG4gICAgICBpZiAoY29udGFpbmVyRGF0YS5oZWlnaHQgKiBhc3BlY3RSYXRpbyA+IGNvbnRhaW5lckRhdGEud2lkdGgpIHtcbiAgICAgICAgaWYgKHZpZXdNb2RlID09PSAzKSB7XG4gICAgICAgICAgY2FudmFzV2lkdGggPSBjb250YWluZXJEYXRhLmhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbnZhc0hlaWdodCA9IGNvbnRhaW5lckRhdGEud2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA9PT0gMykge1xuICAgICAgICBjYW52YXNIZWlnaHQgPSBjb250YWluZXJEYXRhLndpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYW52YXNXaWR0aCA9IGNvbnRhaW5lckRhdGEuaGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW52YXNEYXRhID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogYXNwZWN0UmF0aW8sXG4gICAgICAgIG5hdHVyYWxXaWR0aDogbmF0dXJhbFdpZHRoLFxuICAgICAgICBuYXR1cmFsSGVpZ2h0OiBuYXR1cmFsSGVpZ2h0LFxuICAgICAgICB3aWR0aDogY2FudmFzV2lkdGgsXG4gICAgICAgIGhlaWdodDogY2FudmFzSGVpZ2h0XG4gICAgICB9O1xuICAgICAgY2FudmFzRGF0YS5sZWZ0ID0gKGNvbnRhaW5lckRhdGEud2lkdGggLSBjYW52YXNXaWR0aCkgLyAyO1xuICAgICAgY2FudmFzRGF0YS50b3AgPSAoY29udGFpbmVyRGF0YS5oZWlnaHQgLSBjYW52YXNIZWlnaHQpIC8gMjtcbiAgICAgIGNhbnZhc0RhdGEub2xkTGVmdCA9IGNhbnZhc0RhdGEubGVmdDtcbiAgICAgIGNhbnZhc0RhdGEub2xkVG9wID0gY2FudmFzRGF0YS50b3A7XG4gICAgICB0aGlzLmNhbnZhc0RhdGEgPSBjYW52YXNEYXRhO1xuICAgICAgdGhpcy5saW1pdGVkID0gdmlld01vZGUgPT09IDEgfHwgdmlld01vZGUgPT09IDI7XG4gICAgICB0aGlzLmxpbWl0Q2FudmFzKHRydWUsIHRydWUpO1xuICAgICAgdGhpcy5pbml0aWFsSW1hZ2VEYXRhID0gYXNzaWduKHt9LCBpbWFnZURhdGEpO1xuICAgICAgdGhpcy5pbml0aWFsQ2FudmFzRGF0YSA9IGFzc2lnbih7fSwgY2FudmFzRGF0YSk7XG4gICAgfSxcbiAgICBsaW1pdENhbnZhczogZnVuY3Rpb24gbGltaXRDYW52YXMoc2l6ZUxpbWl0ZWQsIHBvc2l0aW9uTGltaXRlZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YSxcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhLFxuICAgICAgICAgIGNyb3BCb3hEYXRhID0gdGhpcy5jcm9wQm94RGF0YTtcbiAgICAgIHZhciB2aWV3TW9kZSA9IG9wdGlvbnMudmlld01vZGU7XG4gICAgICB2YXIgYXNwZWN0UmF0aW8gPSBjYW52YXNEYXRhLmFzcGVjdFJhdGlvO1xuICAgICAgdmFyIGNyb3BwZWQgPSB0aGlzLmNyb3BwZWQgJiYgY3JvcEJveERhdGE7XG5cbiAgICAgIGlmIChzaXplTGltaXRlZCkge1xuICAgICAgICB2YXIgbWluQ2FudmFzV2lkdGggPSBOdW1iZXIob3B0aW9ucy5taW5DYW52YXNXaWR0aCkgfHwgMDtcbiAgICAgICAgdmFyIG1pbkNhbnZhc0hlaWdodCA9IE51bWJlcihvcHRpb25zLm1pbkNhbnZhc0hlaWdodCkgfHwgMDtcblxuICAgICAgICBpZiAodmlld01vZGUgPiAxKSB7XG4gICAgICAgICAgbWluQ2FudmFzV2lkdGggPSBNYXRoLm1heChtaW5DYW52YXNXaWR0aCwgY29udGFpbmVyRGF0YS53aWR0aCk7XG4gICAgICAgICAgbWluQ2FudmFzSGVpZ2h0ID0gTWF0aC5tYXgobWluQ2FudmFzSGVpZ2h0LCBjb250YWluZXJEYXRhLmhlaWdodCk7XG5cbiAgICAgICAgICBpZiAodmlld01vZGUgPT09IDMpIHtcbiAgICAgICAgICAgIGlmIChtaW5DYW52YXNIZWlnaHQgKiBhc3BlY3RSYXRpbyA+IG1pbkNhbnZhc1dpZHRoKSB7XG4gICAgICAgICAgICAgIG1pbkNhbnZhc1dpZHRoID0gbWluQ2FudmFzSGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtaW5DYW52YXNIZWlnaHQgPSBtaW5DYW52YXNXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2aWV3TW9kZSA+IDApIHtcbiAgICAgICAgICBpZiAobWluQ2FudmFzV2lkdGgpIHtcbiAgICAgICAgICAgIG1pbkNhbnZhc1dpZHRoID0gTWF0aC5tYXgobWluQ2FudmFzV2lkdGgsIGNyb3BwZWQgPyBjcm9wQm94RGF0YS53aWR0aCA6IDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWluQ2FudmFzSGVpZ2h0KSB7XG4gICAgICAgICAgICBtaW5DYW52YXNIZWlnaHQgPSBNYXRoLm1heChtaW5DYW52YXNIZWlnaHQsIGNyb3BwZWQgPyBjcm9wQm94RGF0YS5oZWlnaHQgOiAwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNyb3BwZWQpIHtcbiAgICAgICAgICAgIG1pbkNhbnZhc1dpZHRoID0gY3JvcEJveERhdGEud2lkdGg7XG4gICAgICAgICAgICBtaW5DYW52YXNIZWlnaHQgPSBjcm9wQm94RGF0YS5oZWlnaHQ7XG5cbiAgICAgICAgICAgIGlmIChtaW5DYW52YXNIZWlnaHQgKiBhc3BlY3RSYXRpbyA+IG1pbkNhbnZhc1dpZHRoKSB7XG4gICAgICAgICAgICAgIG1pbkNhbnZhc1dpZHRoID0gbWluQ2FudmFzSGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtaW5DYW52YXNIZWlnaHQgPSBtaW5DYW52YXNXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZ2V0QWRqdXN0ZWRTaXplcyA9IGdldEFkanVzdGVkU2l6ZXMoe1xuICAgICAgICAgIGFzcGVjdFJhdGlvOiBhc3BlY3RSYXRpbyxcbiAgICAgICAgICB3aWR0aDogbWluQ2FudmFzV2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBtaW5DYW52YXNIZWlnaHRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWluQ2FudmFzV2lkdGggPSBfZ2V0QWRqdXN0ZWRTaXplcy53aWR0aDtcbiAgICAgICAgbWluQ2FudmFzSGVpZ2h0ID0gX2dldEFkanVzdGVkU2l6ZXMuaGVpZ2h0O1xuICAgICAgICBjYW52YXNEYXRhLm1pbldpZHRoID0gbWluQ2FudmFzV2lkdGg7XG4gICAgICAgIGNhbnZhc0RhdGEubWluSGVpZ2h0ID0gbWluQ2FudmFzSGVpZ2h0O1xuICAgICAgICBjYW52YXNEYXRhLm1heFdpZHRoID0gSW5maW5pdHk7XG4gICAgICAgIGNhbnZhc0RhdGEubWF4SGVpZ2h0ID0gSW5maW5pdHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3NpdGlvbkxpbWl0ZWQpIHtcbiAgICAgICAgaWYgKHZpZXdNb2RlID4gKGNyb3BwZWQgPyAwIDogMSkpIHtcbiAgICAgICAgICB2YXIgbmV3Q2FudmFzTGVmdCA9IGNvbnRhaW5lckRhdGEud2lkdGggLSBjYW52YXNEYXRhLndpZHRoO1xuICAgICAgICAgIHZhciBuZXdDYW52YXNUb3AgPSBjb250YWluZXJEYXRhLmhlaWdodCAtIGNhbnZhc0RhdGEuaGVpZ2h0O1xuICAgICAgICAgIGNhbnZhc0RhdGEubWluTGVmdCA9IE1hdGgubWluKDAsIG5ld0NhbnZhc0xlZnQpO1xuICAgICAgICAgIGNhbnZhc0RhdGEubWluVG9wID0gTWF0aC5taW4oMCwgbmV3Q2FudmFzVG9wKTtcbiAgICAgICAgICBjYW52YXNEYXRhLm1heExlZnQgPSBNYXRoLm1heCgwLCBuZXdDYW52YXNMZWZ0KTtcbiAgICAgICAgICBjYW52YXNEYXRhLm1heFRvcCA9IE1hdGgubWF4KDAsIG5ld0NhbnZhc1RvcCk7XG5cbiAgICAgICAgICBpZiAoY3JvcHBlZCAmJiB0aGlzLmxpbWl0ZWQpIHtcbiAgICAgICAgICAgIGNhbnZhc0RhdGEubWluTGVmdCA9IE1hdGgubWluKGNyb3BCb3hEYXRhLmxlZnQsIGNyb3BCb3hEYXRhLmxlZnQgKyAoY3JvcEJveERhdGEud2lkdGggLSBjYW52YXNEYXRhLndpZHRoKSk7XG4gICAgICAgICAgICBjYW52YXNEYXRhLm1pblRvcCA9IE1hdGgubWluKGNyb3BCb3hEYXRhLnRvcCwgY3JvcEJveERhdGEudG9wICsgKGNyb3BCb3hEYXRhLmhlaWdodCAtIGNhbnZhc0RhdGEuaGVpZ2h0KSk7XG4gICAgICAgICAgICBjYW52YXNEYXRhLm1heExlZnQgPSBjcm9wQm94RGF0YS5sZWZ0O1xuICAgICAgICAgICAgY2FudmFzRGF0YS5tYXhUb3AgPSBjcm9wQm94RGF0YS50b3A7XG5cbiAgICAgICAgICAgIGlmICh2aWV3TW9kZSA9PT0gMikge1xuICAgICAgICAgICAgICBpZiAoY2FudmFzRGF0YS53aWR0aCA+PSBjb250YWluZXJEYXRhLndpZHRoKSB7XG4gICAgICAgICAgICAgICAgY2FudmFzRGF0YS5taW5MZWZ0ID0gTWF0aC5taW4oMCwgbmV3Q2FudmFzTGVmdCk7XG4gICAgICAgICAgICAgICAgY2FudmFzRGF0YS5tYXhMZWZ0ID0gTWF0aC5tYXgoMCwgbmV3Q2FudmFzTGVmdCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoY2FudmFzRGF0YS5oZWlnaHQgPj0gY29udGFpbmVyRGF0YS5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBjYW52YXNEYXRhLm1pblRvcCA9IE1hdGgubWluKDAsIG5ld0NhbnZhc1RvcCk7XG4gICAgICAgICAgICAgICAgY2FudmFzRGF0YS5tYXhUb3AgPSBNYXRoLm1heCgwLCBuZXdDYW52YXNUb3ApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbnZhc0RhdGEubWluTGVmdCA9IC1jYW52YXNEYXRhLndpZHRoO1xuICAgICAgICAgIGNhbnZhc0RhdGEubWluVG9wID0gLWNhbnZhc0RhdGEuaGVpZ2h0O1xuICAgICAgICAgIGNhbnZhc0RhdGEubWF4TGVmdCA9IGNvbnRhaW5lckRhdGEud2lkdGg7XG4gICAgICAgICAgY2FudmFzRGF0YS5tYXhUb3AgPSBjb250YWluZXJEYXRhLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyQ2FudmFzOiBmdW5jdGlvbiByZW5kZXJDYW52YXMoY2hhbmdlZCwgdHJhbnNmb3JtZWQpIHtcbiAgICAgIHZhciBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhLFxuICAgICAgICAgIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuXG4gICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgdmFyIF9nZXRSb3RhdGVkU2l6ZXMgPSBnZXRSb3RhdGVkU2l6ZXMoe1xuICAgICAgICAgIHdpZHRoOiBpbWFnZURhdGEubmF0dXJhbFdpZHRoICogTWF0aC5hYnMoaW1hZ2VEYXRhLnNjYWxlWCB8fCAxKSxcbiAgICAgICAgICBoZWlnaHQ6IGltYWdlRGF0YS5uYXR1cmFsSGVpZ2h0ICogTWF0aC5hYnMoaW1hZ2VEYXRhLnNjYWxlWSB8fCAxKSxcbiAgICAgICAgICBkZWdyZWU6IGltYWdlRGF0YS5yb3RhdGUgfHwgMFxuICAgICAgICB9KSxcbiAgICAgICAgICAgIG5hdHVyYWxXaWR0aCA9IF9nZXRSb3RhdGVkU2l6ZXMud2lkdGgsXG4gICAgICAgICAgICBuYXR1cmFsSGVpZ2h0ID0gX2dldFJvdGF0ZWRTaXplcy5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIHdpZHRoID0gY2FudmFzRGF0YS53aWR0aCAqIChuYXR1cmFsV2lkdGggLyBjYW52YXNEYXRhLm5hdHVyYWxXaWR0aCk7XG4gICAgICAgIHZhciBoZWlnaHQgPSBjYW52YXNEYXRhLmhlaWdodCAqIChuYXR1cmFsSGVpZ2h0IC8gY2FudmFzRGF0YS5uYXR1cmFsSGVpZ2h0KTtcbiAgICAgICAgY2FudmFzRGF0YS5sZWZ0IC09ICh3aWR0aCAtIGNhbnZhc0RhdGEud2lkdGgpIC8gMjtcbiAgICAgICAgY2FudmFzRGF0YS50b3AgLT0gKGhlaWdodCAtIGNhbnZhc0RhdGEuaGVpZ2h0KSAvIDI7XG4gICAgICAgIGNhbnZhc0RhdGEud2lkdGggPSB3aWR0aDtcbiAgICAgICAgY2FudmFzRGF0YS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNhbnZhc0RhdGEuYXNwZWN0UmF0aW8gPSBuYXR1cmFsV2lkdGggLyBuYXR1cmFsSGVpZ2h0O1xuICAgICAgICBjYW52YXNEYXRhLm5hdHVyYWxXaWR0aCA9IG5hdHVyYWxXaWR0aDtcbiAgICAgICAgY2FudmFzRGF0YS5uYXR1cmFsSGVpZ2h0ID0gbmF0dXJhbEhlaWdodDtcbiAgICAgICAgdGhpcy5saW1pdENhbnZhcyh0cnVlLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW52YXNEYXRhLndpZHRoID4gY2FudmFzRGF0YS5tYXhXaWR0aCB8fCBjYW52YXNEYXRhLndpZHRoIDwgY2FudmFzRGF0YS5taW5XaWR0aCkge1xuICAgICAgICBjYW52YXNEYXRhLmxlZnQgPSBjYW52YXNEYXRhLm9sZExlZnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW52YXNEYXRhLmhlaWdodCA+IGNhbnZhc0RhdGEubWF4SGVpZ2h0IHx8IGNhbnZhc0RhdGEuaGVpZ2h0IDwgY2FudmFzRGF0YS5taW5IZWlnaHQpIHtcbiAgICAgICAgY2FudmFzRGF0YS50b3AgPSBjYW52YXNEYXRhLm9sZFRvcDtcbiAgICAgIH1cblxuICAgICAgY2FudmFzRGF0YS53aWR0aCA9IE1hdGgubWluKE1hdGgubWF4KGNhbnZhc0RhdGEud2lkdGgsIGNhbnZhc0RhdGEubWluV2lkdGgpLCBjYW52YXNEYXRhLm1heFdpZHRoKTtcbiAgICAgIGNhbnZhc0RhdGEuaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5tYXgoY2FudmFzRGF0YS5oZWlnaHQsIGNhbnZhc0RhdGEubWluSGVpZ2h0KSwgY2FudmFzRGF0YS5tYXhIZWlnaHQpO1xuICAgICAgdGhpcy5saW1pdENhbnZhcyhmYWxzZSwgdHJ1ZSk7XG4gICAgICBjYW52YXNEYXRhLmxlZnQgPSBNYXRoLm1pbihNYXRoLm1heChjYW52YXNEYXRhLmxlZnQsIGNhbnZhc0RhdGEubWluTGVmdCksIGNhbnZhc0RhdGEubWF4TGVmdCk7XG4gICAgICBjYW52YXNEYXRhLnRvcCA9IE1hdGgubWluKE1hdGgubWF4KGNhbnZhc0RhdGEudG9wLCBjYW52YXNEYXRhLm1pblRvcCksIGNhbnZhc0RhdGEubWF4VG9wKTtcbiAgICAgIGNhbnZhc0RhdGEub2xkTGVmdCA9IGNhbnZhc0RhdGEubGVmdDtcbiAgICAgIGNhbnZhc0RhdGEub2xkVG9wID0gY2FudmFzRGF0YS50b3A7XG4gICAgICBzZXRTdHlsZSh0aGlzLmNhbnZhcywgYXNzaWduKHtcbiAgICAgICAgd2lkdGg6IGNhbnZhc0RhdGEud2lkdGgsXG4gICAgICAgIGhlaWdodDogY2FudmFzRGF0YS5oZWlnaHRcbiAgICAgIH0sIGdldFRyYW5zZm9ybXMoe1xuICAgICAgICB0cmFuc2xhdGVYOiBjYW52YXNEYXRhLmxlZnQsXG4gICAgICAgIHRyYW5zbGF0ZVk6IGNhbnZhc0RhdGEudG9wXG4gICAgICB9KSkpO1xuICAgICAgdGhpcy5yZW5kZXJJbWFnZShjaGFuZ2VkKTtcblxuICAgICAgaWYgKHRoaXMuY3JvcHBlZCAmJiB0aGlzLmxpbWl0ZWQpIHtcbiAgICAgICAgdGhpcy5saW1pdENyb3BCb3godHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJJbWFnZTogZnVuY3Rpb24gcmVuZGVySW1hZ2UoY2hhbmdlZCkge1xuICAgICAgdmFyIGNhbnZhc0RhdGEgPSB0aGlzLmNhbnZhc0RhdGEsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7XG4gICAgICB2YXIgd2lkdGggPSBpbWFnZURhdGEubmF0dXJhbFdpZHRoICogKGNhbnZhc0RhdGEud2lkdGggLyBjYW52YXNEYXRhLm5hdHVyYWxXaWR0aCk7XG4gICAgICB2YXIgaGVpZ2h0ID0gaW1hZ2VEYXRhLm5hdHVyYWxIZWlnaHQgKiAoY2FudmFzRGF0YS5oZWlnaHQgLyBjYW52YXNEYXRhLm5hdHVyYWxIZWlnaHQpO1xuICAgICAgYXNzaWduKGltYWdlRGF0YSwge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBsZWZ0OiAoY2FudmFzRGF0YS53aWR0aCAtIHdpZHRoKSAvIDIsXG4gICAgICAgIHRvcDogKGNhbnZhc0RhdGEuaGVpZ2h0IC0gaGVpZ2h0KSAvIDJcbiAgICAgIH0pO1xuICAgICAgc2V0U3R5bGUodGhpcy5pbWFnZSwgYXNzaWduKHtcbiAgICAgICAgd2lkdGg6IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBpbWFnZURhdGEuaGVpZ2h0XG4gICAgICB9LCBnZXRUcmFuc2Zvcm1zKGFzc2lnbih7XG4gICAgICAgIHRyYW5zbGF0ZVg6IGltYWdlRGF0YS5sZWZ0LFxuICAgICAgICB0cmFuc2xhdGVZOiBpbWFnZURhdGEudG9wXG4gICAgICB9LCBpbWFnZURhdGEpKSkpO1xuXG4gICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICB0aGlzLm91dHB1dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdENyb3BCb3g6IGZ1bmN0aW9uIGluaXRDcm9wQm94KCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY2FudmFzRGF0YSA9IHRoaXMuY2FudmFzRGF0YTtcbiAgICAgIHZhciBhc3BlY3RSYXRpbyA9IG9wdGlvbnMuYXNwZWN0UmF0aW8gfHwgb3B0aW9ucy5pbml0aWFsQXNwZWN0UmF0aW87XG4gICAgICB2YXIgYXV0b0Nyb3BBcmVhID0gTnVtYmVyKG9wdGlvbnMuYXV0b0Nyb3BBcmVhKSB8fCAwLjg7XG4gICAgICB2YXIgY3JvcEJveERhdGEgPSB7XG4gICAgICAgIHdpZHRoOiBjYW52YXNEYXRhLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNhbnZhc0RhdGEuaGVpZ2h0XG4gICAgICB9O1xuXG4gICAgICBpZiAoYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgaWYgKGNhbnZhc0RhdGEuaGVpZ2h0ICogYXNwZWN0UmF0aW8gPiBjYW52YXNEYXRhLndpZHRoKSB7XG4gICAgICAgICAgY3JvcEJveERhdGEuaGVpZ2h0ID0gY3JvcEJveERhdGEud2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjcm9wQm94RGF0YS53aWR0aCA9IGNyb3BCb3hEYXRhLmhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3JvcEJveERhdGEgPSBjcm9wQm94RGF0YTtcbiAgICAgIHRoaXMubGltaXRDcm9wQm94KHRydWUsIHRydWUpOyAvLyBJbml0aWFsaXplIGF1dG8gY3JvcCBhcmVhXG5cbiAgICAgIGNyb3BCb3hEYXRhLndpZHRoID0gTWF0aC5taW4oTWF0aC5tYXgoY3JvcEJveERhdGEud2lkdGgsIGNyb3BCb3hEYXRhLm1pbldpZHRoKSwgY3JvcEJveERhdGEubWF4V2lkdGgpO1xuICAgICAgY3JvcEJveERhdGEuaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5tYXgoY3JvcEJveERhdGEuaGVpZ2h0LCBjcm9wQm94RGF0YS5taW5IZWlnaHQpLCBjcm9wQm94RGF0YS5tYXhIZWlnaHQpOyAvLyBUaGUgd2lkdGgvaGVpZ2h0IG9mIGF1dG8gY3JvcCBhcmVhIG11c3QgbGFyZ2UgdGhhbiBcIm1pbldpZHRoL0hlaWdodFwiXG5cbiAgICAgIGNyb3BCb3hEYXRhLndpZHRoID0gTWF0aC5tYXgoY3JvcEJveERhdGEubWluV2lkdGgsIGNyb3BCb3hEYXRhLndpZHRoICogYXV0b0Nyb3BBcmVhKTtcbiAgICAgIGNyb3BCb3hEYXRhLmhlaWdodCA9IE1hdGgubWF4KGNyb3BCb3hEYXRhLm1pbkhlaWdodCwgY3JvcEJveERhdGEuaGVpZ2h0ICogYXV0b0Nyb3BBcmVhKTtcbiAgICAgIGNyb3BCb3hEYXRhLmxlZnQgPSBjYW52YXNEYXRhLmxlZnQgKyAoY2FudmFzRGF0YS53aWR0aCAtIGNyb3BCb3hEYXRhLndpZHRoKSAvIDI7XG4gICAgICBjcm9wQm94RGF0YS50b3AgPSBjYW52YXNEYXRhLnRvcCArIChjYW52YXNEYXRhLmhlaWdodCAtIGNyb3BCb3hEYXRhLmhlaWdodCkgLyAyO1xuICAgICAgY3JvcEJveERhdGEub2xkTGVmdCA9IGNyb3BCb3hEYXRhLmxlZnQ7XG4gICAgICBjcm9wQm94RGF0YS5vbGRUb3AgPSBjcm9wQm94RGF0YS50b3A7XG4gICAgICB0aGlzLmluaXRpYWxDcm9wQm94RGF0YSA9IGFzc2lnbih7fSwgY3JvcEJveERhdGEpO1xuICAgIH0sXG4gICAgbGltaXRDcm9wQm94OiBmdW5jdGlvbiBsaW1pdENyb3BCb3goc2l6ZUxpbWl0ZWQsIHBvc2l0aW9uTGltaXRlZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YSxcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhLFxuICAgICAgICAgIGNyb3BCb3hEYXRhID0gdGhpcy5jcm9wQm94RGF0YSxcbiAgICAgICAgICBsaW1pdGVkID0gdGhpcy5saW1pdGVkO1xuICAgICAgdmFyIGFzcGVjdFJhdGlvID0gb3B0aW9ucy5hc3BlY3RSYXRpbztcblxuICAgICAgaWYgKHNpemVMaW1pdGVkKSB7XG4gICAgICAgIHZhciBtaW5Dcm9wQm94V2lkdGggPSBOdW1iZXIob3B0aW9ucy5taW5Dcm9wQm94V2lkdGgpIHx8IDA7XG4gICAgICAgIHZhciBtaW5Dcm9wQm94SGVpZ2h0ID0gTnVtYmVyKG9wdGlvbnMubWluQ3JvcEJveEhlaWdodCkgfHwgMDtcbiAgICAgICAgdmFyIG1heENyb3BCb3hXaWR0aCA9IGxpbWl0ZWQgPyBNYXRoLm1pbihjb250YWluZXJEYXRhLndpZHRoLCBjYW52YXNEYXRhLndpZHRoLCBjYW52YXNEYXRhLndpZHRoICsgY2FudmFzRGF0YS5sZWZ0LCBjb250YWluZXJEYXRhLndpZHRoIC0gY2FudmFzRGF0YS5sZWZ0KSA6IGNvbnRhaW5lckRhdGEud2lkdGg7XG4gICAgICAgIHZhciBtYXhDcm9wQm94SGVpZ2h0ID0gbGltaXRlZCA/IE1hdGgubWluKGNvbnRhaW5lckRhdGEuaGVpZ2h0LCBjYW52YXNEYXRhLmhlaWdodCwgY2FudmFzRGF0YS5oZWlnaHQgKyBjYW52YXNEYXRhLnRvcCwgY29udGFpbmVyRGF0YS5oZWlnaHQgLSBjYW52YXNEYXRhLnRvcCkgOiBjb250YWluZXJEYXRhLmhlaWdodDsgLy8gVGhlIG1pbi9tYXhDcm9wQm94V2lkdGgvSGVpZ2h0IG11c3QgYmUgbGVzcyB0aGFuIGNvbnRhaW5lcidzIHdpZHRoL2hlaWdodFxuXG4gICAgICAgIG1pbkNyb3BCb3hXaWR0aCA9IE1hdGgubWluKG1pbkNyb3BCb3hXaWR0aCwgY29udGFpbmVyRGF0YS53aWR0aCk7XG4gICAgICAgIG1pbkNyb3BCb3hIZWlnaHQgPSBNYXRoLm1pbihtaW5Dcm9wQm94SGVpZ2h0LCBjb250YWluZXJEYXRhLmhlaWdodCk7XG5cbiAgICAgICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgaWYgKG1pbkNyb3BCb3hXaWR0aCAmJiBtaW5Dcm9wQm94SGVpZ2h0KSB7XG4gICAgICAgICAgICBpZiAobWluQ3JvcEJveEhlaWdodCAqIGFzcGVjdFJhdGlvID4gbWluQ3JvcEJveFdpZHRoKSB7XG4gICAgICAgICAgICAgIG1pbkNyb3BCb3hIZWlnaHQgPSBtaW5Dcm9wQm94V2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1pbkNyb3BCb3hXaWR0aCA9IG1pbkNyb3BCb3hIZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG1pbkNyb3BCb3hXaWR0aCkge1xuICAgICAgICAgICAgbWluQ3JvcEJveEhlaWdodCA9IG1pbkNyb3BCb3hXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWluQ3JvcEJveEhlaWdodCkge1xuICAgICAgICAgICAgbWluQ3JvcEJveFdpZHRoID0gbWluQ3JvcEJveEhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChtYXhDcm9wQm94SGVpZ2h0ICogYXNwZWN0UmF0aW8gPiBtYXhDcm9wQm94V2lkdGgpIHtcbiAgICAgICAgICAgIG1heENyb3BCb3hIZWlnaHQgPSBtYXhDcm9wQm94V2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4Q3JvcEJveFdpZHRoID0gbWF4Q3JvcEJveEhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBUaGUgbWluV2lkdGgvSGVpZ2h0IG11c3QgYmUgbGVzcyB0aGFuIG1heFdpZHRoL0hlaWdodFxuXG5cbiAgICAgICAgY3JvcEJveERhdGEubWluV2lkdGggPSBNYXRoLm1pbihtaW5Dcm9wQm94V2lkdGgsIG1heENyb3BCb3hXaWR0aCk7XG4gICAgICAgIGNyb3BCb3hEYXRhLm1pbkhlaWdodCA9IE1hdGgubWluKG1pbkNyb3BCb3hIZWlnaHQsIG1heENyb3BCb3hIZWlnaHQpO1xuICAgICAgICBjcm9wQm94RGF0YS5tYXhXaWR0aCA9IG1heENyb3BCb3hXaWR0aDtcbiAgICAgICAgY3JvcEJveERhdGEubWF4SGVpZ2h0ID0gbWF4Q3JvcEJveEhlaWdodDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc2l0aW9uTGltaXRlZCkge1xuICAgICAgICBpZiAobGltaXRlZCkge1xuICAgICAgICAgIGNyb3BCb3hEYXRhLm1pbkxlZnQgPSBNYXRoLm1heCgwLCBjYW52YXNEYXRhLmxlZnQpO1xuICAgICAgICAgIGNyb3BCb3hEYXRhLm1pblRvcCA9IE1hdGgubWF4KDAsIGNhbnZhc0RhdGEudG9wKTtcbiAgICAgICAgICBjcm9wQm94RGF0YS5tYXhMZWZ0ID0gTWF0aC5taW4oY29udGFpbmVyRGF0YS53aWR0aCwgY2FudmFzRGF0YS5sZWZ0ICsgY2FudmFzRGF0YS53aWR0aCkgLSBjcm9wQm94RGF0YS53aWR0aDtcbiAgICAgICAgICBjcm9wQm94RGF0YS5tYXhUb3AgPSBNYXRoLm1pbihjb250YWluZXJEYXRhLmhlaWdodCwgY2FudmFzRGF0YS50b3AgKyBjYW52YXNEYXRhLmhlaWdodCkgLSBjcm9wQm94RGF0YS5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3JvcEJveERhdGEubWluTGVmdCA9IDA7XG4gICAgICAgICAgY3JvcEJveERhdGEubWluVG9wID0gMDtcbiAgICAgICAgICBjcm9wQm94RGF0YS5tYXhMZWZ0ID0gY29udGFpbmVyRGF0YS53aWR0aCAtIGNyb3BCb3hEYXRhLndpZHRoO1xuICAgICAgICAgIGNyb3BCb3hEYXRhLm1heFRvcCA9IGNvbnRhaW5lckRhdGEuaGVpZ2h0IC0gY3JvcEJveERhdGEuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJDcm9wQm94OiBmdW5jdGlvbiByZW5kZXJDcm9wQm94KCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YSxcbiAgICAgICAgICBjcm9wQm94RGF0YSA9IHRoaXMuY3JvcEJveERhdGE7XG5cbiAgICAgIGlmIChjcm9wQm94RGF0YS53aWR0aCA+IGNyb3BCb3hEYXRhLm1heFdpZHRoIHx8IGNyb3BCb3hEYXRhLndpZHRoIDwgY3JvcEJveERhdGEubWluV2lkdGgpIHtcbiAgICAgICAgY3JvcEJveERhdGEubGVmdCA9IGNyb3BCb3hEYXRhLm9sZExlZnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChjcm9wQm94RGF0YS5oZWlnaHQgPiBjcm9wQm94RGF0YS5tYXhIZWlnaHQgfHwgY3JvcEJveERhdGEuaGVpZ2h0IDwgY3JvcEJveERhdGEubWluSGVpZ2h0KSB7XG4gICAgICAgIGNyb3BCb3hEYXRhLnRvcCA9IGNyb3BCb3hEYXRhLm9sZFRvcDtcbiAgICAgIH1cblxuICAgICAgY3JvcEJveERhdGEud2lkdGggPSBNYXRoLm1pbihNYXRoLm1heChjcm9wQm94RGF0YS53aWR0aCwgY3JvcEJveERhdGEubWluV2lkdGgpLCBjcm9wQm94RGF0YS5tYXhXaWR0aCk7XG4gICAgICBjcm9wQm94RGF0YS5oZWlnaHQgPSBNYXRoLm1pbihNYXRoLm1heChjcm9wQm94RGF0YS5oZWlnaHQsIGNyb3BCb3hEYXRhLm1pbkhlaWdodCksIGNyb3BCb3hEYXRhLm1heEhlaWdodCk7XG4gICAgICB0aGlzLmxpbWl0Q3JvcEJveChmYWxzZSwgdHJ1ZSk7XG4gICAgICBjcm9wQm94RGF0YS5sZWZ0ID0gTWF0aC5taW4oTWF0aC5tYXgoY3JvcEJveERhdGEubGVmdCwgY3JvcEJveERhdGEubWluTGVmdCksIGNyb3BCb3hEYXRhLm1heExlZnQpO1xuICAgICAgY3JvcEJveERhdGEudG9wID0gTWF0aC5taW4oTWF0aC5tYXgoY3JvcEJveERhdGEudG9wLCBjcm9wQm94RGF0YS5taW5Ub3ApLCBjcm9wQm94RGF0YS5tYXhUb3ApO1xuICAgICAgY3JvcEJveERhdGEub2xkTGVmdCA9IGNyb3BCb3hEYXRhLmxlZnQ7XG4gICAgICBjcm9wQm94RGF0YS5vbGRUb3AgPSBjcm9wQm94RGF0YS50b3A7XG5cbiAgICAgIGlmIChvcHRpb25zLm1vdmFibGUgJiYgb3B0aW9ucy5jcm9wQm94TW92YWJsZSkge1xuICAgICAgICAvLyBUdXJuIHRvIG1vdmUgdGhlIGNhbnZhcyB3aGVuIHRoZSBjcm9wIGJveCBpcyBlcXVhbCB0byB0aGUgY29udGFpbmVyXG4gICAgICAgIHNldERhdGEodGhpcy5mYWNlLCBEQVRBX0FDVElPTiwgY3JvcEJveERhdGEud2lkdGggPj0gY29udGFpbmVyRGF0YS53aWR0aCAmJiBjcm9wQm94RGF0YS5oZWlnaHQgPj0gY29udGFpbmVyRGF0YS5oZWlnaHQgPyBBQ1RJT05fTU9WRSA6IEFDVElPTl9BTEwpO1xuICAgICAgfVxuXG4gICAgICBzZXRTdHlsZSh0aGlzLmNyb3BCb3gsIGFzc2lnbih7XG4gICAgICAgIHdpZHRoOiBjcm9wQm94RGF0YS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjcm9wQm94RGF0YS5oZWlnaHRcbiAgICAgIH0sIGdldFRyYW5zZm9ybXMoe1xuICAgICAgICB0cmFuc2xhdGVYOiBjcm9wQm94RGF0YS5sZWZ0LFxuICAgICAgICB0cmFuc2xhdGVZOiBjcm9wQm94RGF0YS50b3BcbiAgICAgIH0pKSk7XG5cbiAgICAgIGlmICh0aGlzLmNyb3BwZWQgJiYgdGhpcy5saW1pdGVkKSB7XG4gICAgICAgIHRoaXMubGltaXRDYW52YXModHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLm91dHB1dCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb3V0cHV0OiBmdW5jdGlvbiBvdXRwdXQoKSB7XG4gICAgICB0aGlzLnByZXZpZXcoKTtcbiAgICAgIGRpc3BhdGNoRXZlbnQodGhpcy5lbGVtZW50LCBFVkVOVF9DUk9QLCB0aGlzLmdldERhdGEoKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwcmV2aWV3ID0ge1xuICAgIGluaXRQcmV2aWV3OiBmdW5jdGlvbiBpbml0UHJldmlldygpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIGNyb3NzT3JpZ2luID0gdGhpcy5jcm9zc09yaWdpbjtcbiAgICAgIHZhciBwcmV2aWV3ID0gdGhpcy5vcHRpb25zLnByZXZpZXc7XG4gICAgICB2YXIgdXJsID0gY3Jvc3NPcmlnaW4gPyB0aGlzLmNyb3NzT3JpZ2luVXJsIDogdGhpcy51cmw7XG4gICAgICB2YXIgYWx0ID0gZWxlbWVudC5hbHQgfHwgJ1RoZSBpbWFnZSB0byBwcmV2aWV3JztcbiAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICBpZiAoY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgaW1hZ2UuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcbiAgICAgIH1cblxuICAgICAgaW1hZ2Uuc3JjID0gdXJsO1xuICAgICAgaW1hZ2UuYWx0ID0gYWx0O1xuICAgICAgdGhpcy52aWV3Qm94LmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgIHRoaXMudmlld0JveEltYWdlID0gaW1hZ2U7XG5cbiAgICAgIGlmICghcHJldmlldykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2aWV3cyA9IHByZXZpZXc7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJldmlldyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJldmlld3MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwcmV2aWV3KTtcbiAgICAgIH0gZWxzZSBpZiAocHJldmlldy5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIHByZXZpZXdzID0gW3ByZXZpZXddO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByZXZpZXdzID0gcHJldmlld3M7XG4gICAgICBmb3JFYWNoKHByZXZpZXdzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOyAvLyBTYXZlIHRoZSBvcmlnaW5hbCBzaXplIGZvciByZWNvdmVyXG5cbiAgICAgICAgc2V0RGF0YShlbCwgREFUQV9QUkVWSUVXLCB7XG4gICAgICAgICAgd2lkdGg6IGVsLm9mZnNldFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogZWwub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgIGh0bWw6IGVsLmlubmVySFRNTFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgICAgIGltZy5hbHQgPSBhbHQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZSBpbWcgZWxlbWVudCBzdHlsZXNcbiAgICAgICAgICogQWRkIGBkaXNwbGF5OmJsb2NrYCB0byBhdm9pZCBtYXJnaW4gdG9wIGlzc3VlXG4gICAgICAgICAqIEFkZCBgaGVpZ2h0OmF1dG9gIHRvIG92ZXJyaWRlIGBoZWlnaHRgIGF0dHJpYnV0ZSBvbiBJRThcbiAgICAgICAgICogKE9jY3VyIG9ubHkgd2hlbiBtYXJnaW4tdG9wIDw9IC1oZWlnaHQpXG4gICAgICAgICAqL1xuXG4gICAgICAgIGltZy5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6YmxvY2s7JyArICd3aWR0aDoxMDAlOycgKyAnaGVpZ2h0OmF1dG87JyArICdtaW4td2lkdGg6MCFpbXBvcnRhbnQ7JyArICdtaW4taGVpZ2h0OjAhaW1wb3J0YW50OycgKyAnbWF4LXdpZHRoOm5vbmUhaW1wb3J0YW50OycgKyAnbWF4LWhlaWdodDpub25lIWltcG9ydGFudDsnICsgJ2ltYWdlLW9yaWVudGF0aW9uOjBkZWchaW1wb3J0YW50O1wiJztcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJlc2V0UHJldmlldzogZnVuY3Rpb24gcmVzZXRQcmV2aWV3KCkge1xuICAgICAgZm9yRWFjaCh0aGlzLnByZXZpZXdzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgZGF0YSA9IGdldERhdGEoZWxlbWVudCwgREFUQV9QUkVWSUVXKTtcbiAgICAgICAgc2V0U3R5bGUoZWxlbWVudCwge1xuICAgICAgICAgIHdpZHRoOiBkYXRhLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogZGF0YS5oZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gZGF0YS5odG1sO1xuICAgICAgICByZW1vdmVEYXRhKGVsZW1lbnQsIERBVEFfUFJFVklFVyk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHByZXZpZXc6IGZ1bmN0aW9uIHByZXZpZXcoKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGEsXG4gICAgICAgICAgY2FudmFzRGF0YSA9IHRoaXMuY2FudmFzRGF0YSxcbiAgICAgICAgICBjcm9wQm94RGF0YSA9IHRoaXMuY3JvcEJveERhdGE7XG4gICAgICB2YXIgY3JvcEJveFdpZHRoID0gY3JvcEJveERhdGEud2lkdGgsXG4gICAgICAgICAgY3JvcEJveEhlaWdodCA9IGNyb3BCb3hEYXRhLmhlaWdodDtcbiAgICAgIHZhciB3aWR0aCA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuICAgICAgdmFyIGxlZnQgPSBjcm9wQm94RGF0YS5sZWZ0IC0gY2FudmFzRGF0YS5sZWZ0IC0gaW1hZ2VEYXRhLmxlZnQ7XG4gICAgICB2YXIgdG9wID0gY3JvcEJveERhdGEudG9wIC0gY2FudmFzRGF0YS50b3AgLSBpbWFnZURhdGEudG9wO1xuXG4gICAgICBpZiAoIXRoaXMuY3JvcHBlZCB8fCB0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0U3R5bGUodGhpcy52aWV3Qm94SW1hZ2UsIGFzc2lnbih7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0sIGdldFRyYW5zZm9ybXMoYXNzaWduKHtcbiAgICAgICAgdHJhbnNsYXRlWDogLWxlZnQsXG4gICAgICAgIHRyYW5zbGF0ZVk6IC10b3BcbiAgICAgIH0sIGltYWdlRGF0YSkpKSk7XG4gICAgICBmb3JFYWNoKHRoaXMucHJldmlld3MsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YShlbGVtZW50LCBEQVRBX1BSRVZJRVcpO1xuICAgICAgICB2YXIgb3JpZ2luYWxXaWR0aCA9IGRhdGEud2lkdGg7XG4gICAgICAgIHZhciBvcmlnaW5hbEhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICB2YXIgbmV3V2lkdGggPSBvcmlnaW5hbFdpZHRoO1xuICAgICAgICB2YXIgbmV3SGVpZ2h0ID0gb3JpZ2luYWxIZWlnaHQ7XG4gICAgICAgIHZhciByYXRpbyA9IDE7XG5cbiAgICAgICAgaWYgKGNyb3BCb3hXaWR0aCkge1xuICAgICAgICAgIHJhdGlvID0gb3JpZ2luYWxXaWR0aCAvIGNyb3BCb3hXaWR0aDtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjcm9wQm94SGVpZ2h0ICogcmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JvcEJveEhlaWdodCAmJiBuZXdIZWlnaHQgPiBvcmlnaW5hbEhlaWdodCkge1xuICAgICAgICAgIHJhdGlvID0gb3JpZ2luYWxIZWlnaHQgLyBjcm9wQm94SGVpZ2h0O1xuICAgICAgICAgIG5ld1dpZHRoID0gY3JvcEJveFdpZHRoICogcmF0aW87XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gb3JpZ2luYWxIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRTdHlsZShlbGVtZW50LCB7XG4gICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgICAgICAgIGhlaWdodDogbmV3SGVpZ2h0XG4gICAgICAgIH0pO1xuICAgICAgICBzZXRTdHlsZShlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVswXSwgYXNzaWduKHtcbiAgICAgICAgICB3aWR0aDogd2lkdGggKiByYXRpbyxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAqIHJhdGlvXG4gICAgICAgIH0sIGdldFRyYW5zZm9ybXMoYXNzaWduKHtcbiAgICAgICAgICB0cmFuc2xhdGVYOiAtbGVmdCAqIHJhdGlvLFxuICAgICAgICAgIHRyYW5zbGF0ZVk6IC10b3AgKiByYXRpb1xuICAgICAgICB9LCBpbWFnZURhdGEpKSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBldmVudHMgPSB7XG4gICAgYmluZDogZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5lbGVtZW50LFxuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgY3JvcHBlciA9IHRoaXMuY3JvcHBlcjtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5jcm9wc3RhcnQpKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX0NST1BfU1RBUlQsIG9wdGlvbnMuY3JvcHN0YXJ0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5jcm9wbW92ZSkpIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfQ1JPUF9NT1ZFLCBvcHRpb25zLmNyb3Btb3ZlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5jcm9wZW5kKSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9DUk9QX0VORCwgb3B0aW9ucy5jcm9wZW5kKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy5jcm9wKSkge1xuICAgICAgICBhZGRMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9DUk9QLCBvcHRpb25zLmNyb3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnpvb20pKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1pPT00sIG9wdGlvbnMuem9vbSk7XG4gICAgICB9XG5cbiAgICAgIGFkZExpc3RlbmVyKGNyb3BwZXIsIEVWRU5UX1BPSU5URVJfRE9XTiwgdGhpcy5vbkNyb3BTdGFydCA9IHRoaXMuY3JvcFN0YXJ0LmJpbmQodGhpcykpO1xuXG4gICAgICBpZiAob3B0aW9ucy56b29tYWJsZSAmJiBvcHRpb25zLnpvb21PbldoZWVsKSB7XG4gICAgICAgIGFkZExpc3RlbmVyKGNyb3BwZXIsIEVWRU5UX1dIRUVMLCB0aGlzLm9uV2hlZWwgPSB0aGlzLndoZWVsLmJpbmQodGhpcyksIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2spIHtcbiAgICAgICAgYWRkTGlzdGVuZXIoY3JvcHBlciwgRVZFTlRfREJMQ0xJQ0ssIHRoaXMub25EYmxjbGljayA9IHRoaXMuZGJsY2xpY2suYmluZCh0aGlzKSk7XG4gICAgICB9XG5cbiAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQub3duZXJEb2N1bWVudCwgRVZFTlRfUE9JTlRFUl9NT1ZFLCB0aGlzLm9uQ3JvcE1vdmUgPSB0aGlzLmNyb3BNb3ZlLmJpbmQodGhpcykpO1xuICAgICAgYWRkTGlzdGVuZXIoZWxlbWVudC5vd25lckRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX1VQLCB0aGlzLm9uQ3JvcEVuZCA9IHRoaXMuY3JvcEVuZC5iaW5kKHRoaXMpKTtcblxuICAgICAgaWYgKG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICBhZGRMaXN0ZW5lcih3aW5kb3csIEVWRU5UX1JFU0laRSwgdGhpcy5vblJlc2l6ZSA9IHRoaXMucmVzaXplLmJpbmQodGhpcykpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGNyb3BwZXIgPSB0aGlzLmNyb3BwZXI7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuY3JvcHN0YXJ0KSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9DUk9QX1NUQVJULCBvcHRpb25zLmNyb3BzdGFydCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuY3JvcG1vdmUpKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX0NST1BfTU9WRSwgb3B0aW9ucy5jcm9wbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuY3JvcGVuZCkpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfQ1JPUF9FTkQsIG9wdGlvbnMuY3JvcGVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMuY3JvcCkpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZWxlbWVudCwgRVZFTlRfQ1JPUCwgb3B0aW9ucy5jcm9wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucy56b29tKSkge1xuICAgICAgICByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBFVkVOVF9aT09NLCBvcHRpb25zLnpvb20pO1xuICAgICAgfVxuXG4gICAgICByZW1vdmVMaXN0ZW5lcihjcm9wcGVyLCBFVkVOVF9QT0lOVEVSX0RPV04sIHRoaXMub25Dcm9wU3RhcnQpO1xuXG4gICAgICBpZiAob3B0aW9ucy56b29tYWJsZSAmJiBvcHRpb25zLnpvb21PbldoZWVsKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGNyb3BwZXIsIEVWRU5UX1dIRUVMLCB0aGlzLm9uV2hlZWwsIHtcbiAgICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy50b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2spIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoY3JvcHBlciwgRVZFTlRfREJMQ0xJQ0ssIHRoaXMub25EYmxjbGljayk7XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQub3duZXJEb2N1bWVudCwgRVZFTlRfUE9JTlRFUl9NT1ZFLCB0aGlzLm9uQ3JvcE1vdmUpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoZWxlbWVudC5vd25lckRvY3VtZW50LCBFVkVOVF9QT0lOVEVSX1VQLCB0aGlzLm9uQ3JvcEVuZCk7XG5cbiAgICAgIGlmIChvcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIod2luZG93LCBFVkVOVF9SRVNJWkUsIHRoaXMub25SZXNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlcnMgPSB7XG4gICAgcmVzaXplOiBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lcixcbiAgICAgICAgICBjb250YWluZXJEYXRhID0gdGhpcy5jb250YWluZXJEYXRhO1xuICAgICAgdmFyIG1pbkNvbnRhaW5lcldpZHRoID0gTnVtYmVyKG9wdGlvbnMubWluQ29udGFpbmVyV2lkdGgpIHx8IE1JTl9DT05UQUlORVJfV0lEVEg7XG4gICAgICB2YXIgbWluQ29udGFpbmVySGVpZ2h0ID0gTnVtYmVyKG9wdGlvbnMubWluQ29udGFpbmVySGVpZ2h0KSB8fCBNSU5fQ09OVEFJTkVSX0hFSUdIVDtcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgY29udGFpbmVyRGF0YS53aWR0aCA8PSBtaW5Db250YWluZXJXaWR0aCB8fCBjb250YWluZXJEYXRhLmhlaWdodCA8PSBtaW5Db250YWluZXJIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmF0aW8gPSBjb250YWluZXIub2Zmc2V0V2lkdGggLyBjb250YWluZXJEYXRhLndpZHRoOyAvLyBSZXNpemUgd2hlbiB3aWR0aCBjaGFuZ2VkIG9yIGhlaWdodCBjaGFuZ2VkXG5cbiAgICAgIGlmIChyYXRpbyAhPT0gMSB8fCBjb250YWluZXIub2Zmc2V0SGVpZ2h0ICE9PSBjb250YWluZXJEYXRhLmhlaWdodCkge1xuICAgICAgICB2YXIgY2FudmFzRGF0YTtcbiAgICAgICAgdmFyIGNyb3BCb3hEYXRhO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3RvcmUpIHtcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5nZXRDYW52YXNEYXRhKCk7XG4gICAgICAgICAgY3JvcEJveERhdGEgPSB0aGlzLmdldENyb3BCb3hEYXRhKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJlc3RvcmUpIHtcbiAgICAgICAgICB0aGlzLnNldENhbnZhc0RhdGEoZm9yRWFjaChjYW52YXNEYXRhLCBmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgICAgY2FudmFzRGF0YVtpXSA9IG4gKiByYXRpbztcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgdGhpcy5zZXRDcm9wQm94RGF0YShmb3JFYWNoKGNyb3BCb3hEYXRhLCBmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgICAgY3JvcEJveERhdGFbaV0gPSBuICogcmF0aW87XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkYmxjbGljazogZnVuY3Rpb24gZGJsY2xpY2soKSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLm9wdGlvbnMuZHJhZ01vZGUgPT09IERSQUdfTU9ERV9OT05FKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXREcmFnTW9kZShoYXNDbGFzcyh0aGlzLmRyYWdCb3gsIENMQVNTX0NST1ApID8gRFJBR19NT0RFX01PVkUgOiBEUkFHX01PREVfQ1JPUCk7XG4gICAgfSxcbiAgICB3aGVlbDogZnVuY3Rpb24gd2hlZWwoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciByYXRpbyA9IE51bWJlcih0aGlzLm9wdGlvbnMud2hlZWxab29tUmF0aW8pIHx8IDAuMTtcbiAgICAgIHZhciBkZWx0YSA9IDE7XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gTGltaXQgd2hlZWwgc3BlZWQgdG8gcHJldmVudCB6b29tIHRvbyBmYXN0ICgjMjEpXG5cbiAgICAgIGlmICh0aGlzLndoZWVsaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy53aGVlbGluZyA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMud2hlZWxpbmcgPSBmYWxzZTtcbiAgICAgIH0sIDUwKTtcblxuICAgICAgaWYgKGV2ZW50LmRlbHRhWSkge1xuICAgICAgICBkZWx0YSA9IGV2ZW50LmRlbHRhWSA+IDAgPyAxIDogLTE7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LndoZWVsRGVsdGEpIHtcbiAgICAgICAgZGVsdGEgPSAtZXZlbnQud2hlZWxEZWx0YSAvIDEyMDtcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQuZGV0YWlsKSB7XG4gICAgICAgIGRlbHRhID0gZXZlbnQuZGV0YWlsID4gMCA/IDEgOiAtMTtcbiAgICAgIH1cblxuICAgICAgdGhpcy56b29tKC1kZWx0YSAqIHJhdGlvLCBldmVudCk7XG4gICAgfSxcbiAgICBjcm9wU3RhcnQ6IGZ1bmN0aW9uIGNyb3BTdGFydChldmVudCkge1xuICAgICAgdmFyIGJ1dHRvbnMgPSBldmVudC5idXR0b25zLFxuICAgICAgICAgIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgLy8gSGFuZGxlIG1vdXNlIGV2ZW50IGFuZCBwb2ludGVyIGV2ZW50IGFuZCBpZ25vcmUgdG91Y2ggZXZlbnRcbiAgICAgIHx8IChldmVudC50eXBlID09PSAnbW91c2Vkb3duJyB8fCBldmVudC50eXBlID09PSAncG9pbnRlcmRvd24nICYmIGV2ZW50LnBvaW50ZXJUeXBlID09PSAnbW91c2UnKSAmJiAoIC8vIE5vIHByaW1hcnkgYnV0dG9uIChVc3VhbGx5IHRoZSBsZWZ0IGJ1dHRvbilcbiAgICAgIGlzTnVtYmVyKGJ1dHRvbnMpICYmIGJ1dHRvbnMgIT09IDEgfHwgaXNOdW1iZXIoYnV0dG9uKSAmJiBidXR0b24gIT09IDAgLy8gT3BlbiBjb250ZXh0IG1lbnVcbiAgICAgIHx8IGV2ZW50LmN0cmxLZXkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzO1xuICAgICAgdmFyIGFjdGlvbjtcblxuICAgICAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIC8vIEhhbmRsZSB0b3VjaCBldmVudFxuICAgICAgICBmb3JFYWNoKGV2ZW50LmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgICBwb2ludGVyc1t0b3VjaC5pZGVudGlmaWVyXSA9IGdldFBvaW50ZXIodG91Y2gpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEhhbmRsZSBtb3VzZSBldmVudCBhbmQgcG9pbnRlciBldmVudFxuICAgICAgICBwb2ludGVyc1tldmVudC5wb2ludGVySWQgfHwgMF0gPSBnZXRQb2ludGVyKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKE9iamVjdC5rZXlzKHBvaW50ZXJzKS5sZW5ndGggPiAxICYmIG9wdGlvbnMuem9vbWFibGUgJiYgb3B0aW9ucy56b29tT25Ub3VjaCkge1xuICAgICAgICBhY3Rpb24gPSBBQ1RJT05fWk9PTTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGlvbiA9IGdldERhdGEoZXZlbnQudGFyZ2V0LCBEQVRBX0FDVElPTik7XG4gICAgICB9XG5cbiAgICAgIGlmICghUkVHRVhQX0FDVElPTlMudGVzdChhY3Rpb24pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpc3BhdGNoRXZlbnQodGhpcy5lbGVtZW50LCBFVkVOVF9DUk9QX1NUQVJULCB7XG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50LFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVGhpcyBsaW5lIGlzIHJlcXVpcmVkIGZvciBwcmV2ZW50aW5nIHBhZ2Ugem9vbWluZyBpbiBpT1MgYnJvd3NlcnNcblxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICB0aGlzLmNyb3BwaW5nID0gZmFsc2U7XG5cbiAgICAgIGlmIChhY3Rpb24gPT09IEFDVElPTl9DUk9QKSB7XG4gICAgICAgIHRoaXMuY3JvcHBpbmcgPSB0cnVlO1xuICAgICAgICBhZGRDbGFzcyh0aGlzLmRyYWdCb3gsIENMQVNTX01PREFMKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyb3BNb3ZlOiBmdW5jdGlvbiBjcm9wTW92ZShldmVudCkge1xuICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuXG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAhYWN0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmIChkaXNwYXRjaEV2ZW50KHRoaXMuZWxlbWVudCwgRVZFTlRfQ1JPUF9NT1ZFLCB7XG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50LFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG4gICAgICAgIGZvckVhY2goZXZlbnQuY2hhbmdlZFRvdWNoZXMsIGZ1bmN0aW9uICh0b3VjaCkge1xuICAgICAgICAgIC8vIFRoZSBmaXJzdCBwYXJhbWV0ZXIgc2hvdWxkIG5vdCBiZSB1bmRlZmluZWQgKCM0MzIpXG4gICAgICAgICAgYXNzaWduKHBvaW50ZXJzW3RvdWNoLmlkZW50aWZpZXJdIHx8IHt9LCBnZXRQb2ludGVyKHRvdWNoLCB0cnVlKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNzaWduKHBvaW50ZXJzW2V2ZW50LnBvaW50ZXJJZCB8fCAwXSB8fCB7fSwgZ2V0UG9pbnRlcihldmVudCwgdHJ1ZSkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNoYW5nZShldmVudCk7XG4gICAgfSxcbiAgICBjcm9wRW5kOiBmdW5jdGlvbiBjcm9wRW5kKGV2ZW50KSB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBhY3Rpb24gPSB0aGlzLmFjdGlvbixcbiAgICAgICAgICBwb2ludGVycyA9IHRoaXMucG9pbnRlcnM7XG5cbiAgICAgIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICBmb3JFYWNoKGV2ZW50LmNoYW5nZWRUb3VjaGVzLCBmdW5jdGlvbiAodG91Y2gpIHtcbiAgICAgICAgICBkZWxldGUgcG9pbnRlcnNbdG91Y2guaWRlbnRpZmllcl07XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHBvaW50ZXJzW2V2ZW50LnBvaW50ZXJJZCB8fCAwXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAoIU9iamVjdC5rZXlzKHBvaW50ZXJzKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY3JvcHBpbmcpIHtcbiAgICAgICAgdGhpcy5jcm9wcGluZyA9IGZhbHNlO1xuICAgICAgICB0b2dnbGVDbGFzcyh0aGlzLmRyYWdCb3gsIENMQVNTX01PREFMLCB0aGlzLmNyb3BwZWQgJiYgdGhpcy5vcHRpb25zLm1vZGFsKTtcbiAgICAgIH1cblxuICAgICAgZGlzcGF0Y2hFdmVudCh0aGlzLmVsZW1lbnQsIEVWRU5UX0NST1BfRU5ELCB7XG4gICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50LFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjaGFuZ2UgPSB7XG4gICAgY2hhbmdlOiBmdW5jdGlvbiBjaGFuZ2UoZXZlbnQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgIGNhbnZhc0RhdGEgPSB0aGlzLmNhbnZhc0RhdGEsXG4gICAgICAgICAgY29udGFpbmVyRGF0YSA9IHRoaXMuY29udGFpbmVyRGF0YSxcbiAgICAgICAgICBjcm9wQm94RGF0YSA9IHRoaXMuY3JvcEJveERhdGEsXG4gICAgICAgICAgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzO1xuICAgICAgdmFyIGFjdGlvbiA9IHRoaXMuYWN0aW9uO1xuICAgICAgdmFyIGFzcGVjdFJhdGlvID0gb3B0aW9ucy5hc3BlY3RSYXRpbztcbiAgICAgIHZhciBsZWZ0ID0gY3JvcEJveERhdGEubGVmdCxcbiAgICAgICAgICB0b3AgPSBjcm9wQm94RGF0YS50b3AsXG4gICAgICAgICAgd2lkdGggPSBjcm9wQm94RGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBjcm9wQm94RGF0YS5oZWlnaHQ7XG4gICAgICB2YXIgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gICAgICB2YXIgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgICAgdmFyIG1pbkxlZnQgPSAwO1xuICAgICAgdmFyIG1pblRvcCA9IDA7XG4gICAgICB2YXIgbWF4V2lkdGggPSBjb250YWluZXJEYXRhLndpZHRoO1xuICAgICAgdmFyIG1heEhlaWdodCA9IGNvbnRhaW5lckRhdGEuaGVpZ2h0O1xuICAgICAgdmFyIHJlbmRlcmFibGUgPSB0cnVlO1xuICAgICAgdmFyIG9mZnNldDsgLy8gTG9ja2luZyBhc3BlY3QgcmF0aW8gaW4gXCJmcmVlIG1vZGVcIiBieSBob2xkaW5nIHNoaWZ0IGtleVxuXG4gICAgICBpZiAoIWFzcGVjdFJhdGlvICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgIGFzcGVjdFJhdGlvID0gd2lkdGggJiYgaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5saW1pdGVkKSB7XG4gICAgICAgIG1pbkxlZnQgPSBjcm9wQm94RGF0YS5taW5MZWZ0O1xuICAgICAgICBtaW5Ub3AgPSBjcm9wQm94RGF0YS5taW5Ub3A7XG4gICAgICAgIG1heFdpZHRoID0gbWluTGVmdCArIE1hdGgubWluKGNvbnRhaW5lckRhdGEud2lkdGgsIGNhbnZhc0RhdGEud2lkdGgsIGNhbnZhc0RhdGEubGVmdCArIGNhbnZhc0RhdGEud2lkdGgpO1xuICAgICAgICBtYXhIZWlnaHQgPSBtaW5Ub3AgKyBNYXRoLm1pbihjb250YWluZXJEYXRhLmhlaWdodCwgY2FudmFzRGF0YS5oZWlnaHQsIGNhbnZhc0RhdGEudG9wICsgY2FudmFzRGF0YS5oZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnRlciA9IHBvaW50ZXJzW09iamVjdC5rZXlzKHBvaW50ZXJzKVswXV07XG4gICAgICB2YXIgcmFuZ2UgPSB7XG4gICAgICAgIHg6IHBvaW50ZXIuZW5kWCAtIHBvaW50ZXIuc3RhcnRYLFxuICAgICAgICB5OiBwb2ludGVyLmVuZFkgLSBwb2ludGVyLnN0YXJ0WVxuICAgICAgfTtcblxuICAgICAgdmFyIGNoZWNrID0gZnVuY3Rpb24gY2hlY2soc2lkZSkge1xuICAgICAgICBzd2l0Y2ggKHNpZGUpIHtcbiAgICAgICAgICBjYXNlIEFDVElPTl9FQVNUOlxuICAgICAgICAgICAgaWYgKHJpZ2h0ICsgcmFuZ2UueCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgIHJhbmdlLnggPSBtYXhXaWR0aCAtIHJpZ2h0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQUNUSU9OX1dFU1Q6XG4gICAgICAgICAgICBpZiAobGVmdCArIHJhbmdlLnggPCBtaW5MZWZ0KSB7XG4gICAgICAgICAgICAgIHJhbmdlLnggPSBtaW5MZWZ0IC0gbGVmdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEFDVElPTl9OT1JUSDpcbiAgICAgICAgICAgIGlmICh0b3AgKyByYW5nZS55IDwgbWluVG9wKSB7XG4gICAgICAgICAgICAgIHJhbmdlLnkgPSBtaW5Ub3AgLSB0b3A7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBBQ1RJT05fU09VVEg6XG4gICAgICAgICAgICBpZiAoYm90dG9tICsgcmFuZ2UueSA+IG1heEhlaWdodCkge1xuICAgICAgICAgICAgICByYW5nZS55ID0gbWF4SGVpZ2h0IC0gYm90dG9tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIC8vIE1vdmUgY3JvcCBib3hcbiAgICAgICAgY2FzZSBBQ1RJT05fQUxMOlxuICAgICAgICAgIGxlZnQgKz0gcmFuZ2UueDtcbiAgICAgICAgICB0b3AgKz0gcmFuZ2UueTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gUmVzaXplIGNyb3AgYm94XG5cbiAgICAgICAgY2FzZSBBQ1RJT05fRUFTVDpcbiAgICAgICAgICBpZiAocmFuZ2UueCA+PSAwICYmIChyaWdodCA+PSBtYXhXaWR0aCB8fCBhc3BlY3RSYXRpbyAmJiAodG9wIDw9IG1pblRvcCB8fCBib3R0b20gPj0gbWF4SGVpZ2h0KSkpIHtcbiAgICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoZWNrKEFDVElPTl9FQVNUKTtcbiAgICAgICAgICB3aWR0aCArPSByYW5nZS54O1xuXG4gICAgICAgICAgaWYgKHdpZHRoIDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX1dFU1Q7XG4gICAgICAgICAgICB3aWR0aCA9IC13aWR0aDtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICBoZWlnaHQgPSB3aWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgdG9wICs9IChjcm9wQm94RGF0YS5oZWlnaHQgLSBoZWlnaHQpIC8gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFDVElPTl9OT1JUSDpcbiAgICAgICAgICBpZiAocmFuZ2UueSA8PSAwICYmICh0b3AgPD0gbWluVG9wIHx8IGFzcGVjdFJhdGlvICYmIChsZWZ0IDw9IG1pbkxlZnQgfHwgcmlnaHQgPj0gbWF4V2lkdGgpKSkge1xuICAgICAgICAgICAgcmVuZGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hlY2soQUNUSU9OX05PUlRIKTtcbiAgICAgICAgICBoZWlnaHQgLT0gcmFuZ2UueTtcbiAgICAgICAgICB0b3AgKz0gcmFuZ2UueTtcblxuICAgICAgICAgIGlmIChoZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBBQ1RJT05fU09VVEg7XG4gICAgICAgICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgICBsZWZ0ICs9IChjcm9wQm94RGF0YS53aWR0aCAtIHdpZHRoKSAvIDI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBQ1RJT05fV0VTVDpcbiAgICAgICAgICBpZiAocmFuZ2UueCA8PSAwICYmIChsZWZ0IDw9IG1pbkxlZnQgfHwgYXNwZWN0UmF0aW8gJiYgKHRvcCA8PSBtaW5Ub3AgfHwgYm90dG9tID49IG1heEhlaWdodCkpKSB7XG4gICAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGVjayhBQ1RJT05fV0VTVCk7XG4gICAgICAgICAgd2lkdGggLT0gcmFuZ2UueDtcbiAgICAgICAgICBsZWZ0ICs9IHJhbmdlLng7XG5cbiAgICAgICAgICBpZiAod2lkdGggPCAwKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBBQ1RJT05fRUFTVDtcbiAgICAgICAgICAgIHdpZHRoID0gLXdpZHRoO1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgICAgICB0b3AgKz0gKGNyb3BCb3hEYXRhLmhlaWdodCAtIGhlaWdodCkgLyAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUNUSU9OX1NPVVRIOlxuICAgICAgICAgIGlmIChyYW5nZS55ID49IDAgJiYgKGJvdHRvbSA+PSBtYXhIZWlnaHQgfHwgYXNwZWN0UmF0aW8gJiYgKGxlZnQgPD0gbWluTGVmdCB8fCByaWdodCA+PSBtYXhXaWR0aCkpKSB7XG4gICAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaGVjayhBQ1RJT05fU09VVEgpO1xuICAgICAgICAgIGhlaWdodCArPSByYW5nZS55O1xuXG4gICAgICAgICAgaWYgKGhlaWdodCA8IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IEFDVElPTl9OT1JUSDtcbiAgICAgICAgICAgIGhlaWdodCA9IC1oZWlnaHQ7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgIGxlZnQgKz0gKGNyb3BCb3hEYXRhLndpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFDVElPTl9OT1JUSF9FQVNUOlxuICAgICAgICAgIGlmIChhc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgaWYgKHJhbmdlLnkgPD0gMCAmJiAodG9wIDw9IG1pblRvcCB8fCByaWdodCA+PSBtYXhXaWR0aCkpIHtcbiAgICAgICAgICAgICAgcmVuZGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hlY2soQUNUSU9OX05PUlRIKTtcbiAgICAgICAgICAgIGhlaWdodCAtPSByYW5nZS55O1xuICAgICAgICAgICAgdG9wICs9IHJhbmdlLnk7XG4gICAgICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVjayhBQ1RJT05fTk9SVEgpO1xuICAgICAgICAgICAgY2hlY2soQUNUSU9OX0VBU1QpO1xuXG4gICAgICAgICAgICBpZiAocmFuZ2UueCA+PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChyaWdodCA8IG1heFdpZHRoKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggKz0gcmFuZ2UueDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZS55IDw9IDAgJiYgdG9wIDw9IG1pblRvcCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2lkdGggKz0gcmFuZ2UueDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhbmdlLnkgPD0gMCkge1xuICAgICAgICAgICAgICBpZiAodG9wID4gbWluVG9wKSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0IC09IHJhbmdlLnk7XG4gICAgICAgICAgICAgICAgdG9wICs9IHJhbmdlLnk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhlaWdodCAtPSByYW5nZS55O1xuICAgICAgICAgICAgICB0b3AgKz0gcmFuZ2UueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2lkdGggPCAwICYmIGhlaWdodCA8IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IEFDVElPTl9TT1VUSF9XRVNUO1xuICAgICAgICAgICAgaGVpZ2h0ID0gLWhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gLXdpZHRoO1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA8IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IEFDVElPTl9OT1JUSF9XRVNUO1xuICAgICAgICAgICAgd2lkdGggPSAtd2lkdGg7XG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX1NPVVRIX0VBU1Q7XG4gICAgICAgICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEFDVElPTl9OT1JUSF9XRVNUOlxuICAgICAgICAgIGlmIChhc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgaWYgKHJhbmdlLnkgPD0gMCAmJiAodG9wIDw9IG1pblRvcCB8fCBsZWZ0IDw9IG1pbkxlZnQpKSB7XG4gICAgICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoZWNrKEFDVElPTl9OT1JUSCk7XG4gICAgICAgICAgICBoZWlnaHQgLT0gcmFuZ2UueTtcbiAgICAgICAgICAgIHRvcCArPSByYW5nZS55O1xuICAgICAgICAgICAgd2lkdGggPSBoZWlnaHQgKiBhc3BlY3RSYXRpbztcbiAgICAgICAgICAgIGxlZnQgKz0gY3JvcEJveERhdGEud2lkdGggLSB3aWR0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2soQUNUSU9OX05PUlRIKTtcbiAgICAgICAgICAgIGNoZWNrKEFDVElPTl9XRVNUKTtcblxuICAgICAgICAgICAgaWYgKHJhbmdlLnggPD0gMCkge1xuICAgICAgICAgICAgICBpZiAobGVmdCA+IG1pbkxlZnQpIHtcbiAgICAgICAgICAgICAgICB3aWR0aCAtPSByYW5nZS54O1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gcmFuZ2UueDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChyYW5nZS55IDw9IDAgJiYgdG9wIDw9IG1pblRvcCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2lkdGggLT0gcmFuZ2UueDtcbiAgICAgICAgICAgICAgbGVmdCArPSByYW5nZS54O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmFuZ2UueSA8PSAwKSB7XG4gICAgICAgICAgICAgIGlmICh0b3AgPiBtaW5Ub3ApIHtcbiAgICAgICAgICAgICAgICBoZWlnaHQgLT0gcmFuZ2UueTtcbiAgICAgICAgICAgICAgICB0b3AgKz0gcmFuZ2UueTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaGVpZ2h0IC09IHJhbmdlLnk7XG4gICAgICAgICAgICAgIHRvcCArPSByYW5nZS55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3aWR0aCA8IDAgJiYgaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX1NPVVRIX0VBU1Q7XG4gICAgICAgICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSAtd2lkdGg7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoIDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX05PUlRIX0VBU1Q7XG4gICAgICAgICAgICB3aWR0aCA9IC13aWR0aDtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChoZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBBQ1RJT05fU09VVEhfV0VTVDtcbiAgICAgICAgICAgIGhlaWdodCA9IC1oZWlnaHQ7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUNUSU9OX1NPVVRIX1dFU1Q6XG4gICAgICAgICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2UueCA8PSAwICYmIChsZWZ0IDw9IG1pbkxlZnQgfHwgYm90dG9tID49IG1heEhlaWdodCkpIHtcbiAgICAgICAgICAgICAgcmVuZGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hlY2soQUNUSU9OX1dFU1QpO1xuICAgICAgICAgICAgd2lkdGggLT0gcmFuZ2UueDtcbiAgICAgICAgICAgIGxlZnQgKz0gcmFuZ2UueDtcbiAgICAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gYXNwZWN0UmF0aW87XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrKEFDVElPTl9TT1VUSCk7XG4gICAgICAgICAgICBjaGVjayhBQ1RJT05fV0VTVCk7XG5cbiAgICAgICAgICAgIGlmIChyYW5nZS54IDw9IDApIHtcbiAgICAgICAgICAgICAgaWYgKGxlZnQgPiBtaW5MZWZ0KSB7XG4gICAgICAgICAgICAgICAgd2lkdGggLT0gcmFuZ2UueDtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IHJhbmdlLng7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2UueSA+PSAwICYmIGJvdHRvbSA+PSBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdpZHRoIC09IHJhbmdlLng7XG4gICAgICAgICAgICAgIGxlZnQgKz0gcmFuZ2UueDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhbmdlLnkgPj0gMCkge1xuICAgICAgICAgICAgICBpZiAoYm90dG9tIDwgbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IHJhbmdlLnk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhlaWdodCArPSByYW5nZS55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh3aWR0aCA8IDAgJiYgaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX05PUlRIX0VBU1Q7XG4gICAgICAgICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSAtd2lkdGg7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoIDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX1NPVVRIX0VBU1Q7XG4gICAgICAgICAgICB3aWR0aCA9IC13aWR0aDtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgfSBlbHNlIGlmIChoZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBBQ1RJT05fTk9SVEhfV0VTVDtcbiAgICAgICAgICAgIGhlaWdodCA9IC1oZWlnaHQ7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQUNUSU9OX1NPVVRIX0VBU1Q6XG4gICAgICAgICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICBpZiAocmFuZ2UueCA+PSAwICYmIChyaWdodCA+PSBtYXhXaWR0aCB8fCBib3R0b20gPj0gbWF4SGVpZ2h0KSkge1xuICAgICAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGVjayhBQ1RJT05fRUFTVCk7XG4gICAgICAgICAgICB3aWR0aCArPSByYW5nZS54O1xuICAgICAgICAgICAgaGVpZ2h0ID0gd2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2soQUNUSU9OX1NPVVRIKTtcbiAgICAgICAgICAgIGNoZWNrKEFDVElPTl9FQVNUKTtcblxuICAgICAgICAgICAgaWYgKHJhbmdlLnggPj0gMCkge1xuICAgICAgICAgICAgICBpZiAocmlnaHQgPCBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIHdpZHRoICs9IHJhbmdlLng7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2UueSA+PSAwICYmIGJvdHRvbSA+PSBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHdpZHRoICs9IHJhbmdlLng7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyYW5nZS55ID49IDApIHtcbiAgICAgICAgICAgICAgaWYgKGJvdHRvbSA8IG1heEhlaWdodCkge1xuICAgICAgICAgICAgICAgIGhlaWdodCArPSByYW5nZS55O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoZWlnaHQgKz0gcmFuZ2UueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod2lkdGggPCAwICYmIGhlaWdodCA8IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IEFDVElPTl9OT1JUSF9XRVNUO1xuICAgICAgICAgICAgaGVpZ2h0ID0gLWhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gLXdpZHRoO1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA8IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IEFDVElPTl9TT1VUSF9XRVNUO1xuICAgICAgICAgICAgd2lkdGggPSAtd2lkdGg7XG4gICAgICAgICAgICBsZWZ0IC09IHdpZHRoO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0IDwgMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gQUNUSU9OX05PUlRIX0VBU1Q7XG4gICAgICAgICAgICBoZWlnaHQgPSAtaGVpZ2h0O1xuICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gTW92ZSBjYW52YXNcblxuICAgICAgICBjYXNlIEFDVElPTl9NT1ZFOlxuICAgICAgICAgIHRoaXMubW92ZShyYW5nZS54LCByYW5nZS55KTtcbiAgICAgICAgICByZW5kZXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vIFpvb20gY2FudmFzXG5cbiAgICAgICAgY2FzZSBBQ1RJT05fWk9PTTpcbiAgICAgICAgICB0aGlzLnpvb20oZ2V0TWF4Wm9vbVJhdGlvKHBvaW50ZXJzKSwgZXZlbnQpO1xuICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gQ3JlYXRlIGNyb3AgYm94XG5cbiAgICAgICAgY2FzZSBBQ1RJT05fQ1JPUDpcbiAgICAgICAgICBpZiAoIXJhbmdlLnggfHwgIXJhbmdlLnkpIHtcbiAgICAgICAgICAgIHJlbmRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG9mZnNldCA9IGdldE9mZnNldCh0aGlzLmNyb3BwZXIpO1xuICAgICAgICAgIGxlZnQgPSBwb2ludGVyLnN0YXJ0WCAtIG9mZnNldC5sZWZ0O1xuICAgICAgICAgIHRvcCA9IHBvaW50ZXIuc3RhcnRZIC0gb2Zmc2V0LnRvcDtcbiAgICAgICAgICB3aWR0aCA9IGNyb3BCb3hEYXRhLm1pbldpZHRoO1xuICAgICAgICAgIGhlaWdodCA9IGNyb3BCb3hEYXRhLm1pbkhlaWdodDtcblxuICAgICAgICAgIGlmIChyYW5nZS54ID4gMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gcmFuZ2UueSA+IDAgPyBBQ1RJT05fU09VVEhfRUFTVCA6IEFDVElPTl9OT1JUSF9FQVNUO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmFuZ2UueCA8IDApIHtcbiAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICBhY3Rpb24gPSByYW5nZS55ID4gMCA/IEFDVElPTl9TT1VUSF9XRVNUIDogQUNUSU9OX05PUlRIX1dFU1Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJhbmdlLnkgPCAwKSB7XG4gICAgICAgICAgICB0b3AgLT0gaGVpZ2h0O1xuICAgICAgICAgIH0gLy8gU2hvdyB0aGUgY3JvcCBib3ggaWYgaXMgaGlkZGVuXG5cblxuICAgICAgICAgIGlmICghdGhpcy5jcm9wcGVkKSB7XG4gICAgICAgICAgICByZW1vdmVDbGFzcyh0aGlzLmNyb3BCb3gsIENMQVNTX0hJRERFTik7XG4gICAgICAgICAgICB0aGlzLmNyb3BwZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5saW1pdGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMubGltaXRDcm9wQm94KHRydWUsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJhYmxlKSB7XG4gICAgICAgIGNyb3BCb3hEYXRhLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNyb3BCb3hEYXRhLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgY3JvcEJveERhdGEubGVmdCA9IGxlZnQ7XG4gICAgICAgIGNyb3BCb3hEYXRhLnRvcCA9IHRvcDtcbiAgICAgICAgdGhpcy5hY3Rpb24gPSBhY3Rpb247XG4gICAgICAgIHRoaXMucmVuZGVyQ3JvcEJveCgpO1xuICAgICAgfSAvLyBPdmVycmlkZVxuXG5cbiAgICAgIGZvckVhY2gocG9pbnRlcnMsIGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHAuc3RhcnRYID0gcC5lbmRYO1xuICAgICAgICBwLnN0YXJ0WSA9IHAuZW5kWTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbWV0aG9kcyA9IHtcbiAgICAvLyBTaG93IHRoZSBjcm9wIGJveCBtYW51YWxseVxuICAgIGNyb3A6IGZ1bmN0aW9uIGNyb3AoKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiAhdGhpcy5jcm9wcGVkICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuY3JvcHBlZCA9IHRydWU7XG4gICAgICAgIHRoaXMubGltaXRDcm9wQm94KHRydWUsIHRydWUpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubW9kYWwpIHtcbiAgICAgICAgICBhZGRDbGFzcyh0aGlzLmRyYWdCb3gsIENMQVNTX01PREFMKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbW92ZUNsYXNzKHRoaXMuY3JvcEJveCwgQ0xBU1NfSElEREVOKTtcbiAgICAgICAgdGhpcy5zZXRDcm9wQm94RGF0YSh0aGlzLmluaXRpYWxDcm9wQm94RGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gUmVzZXQgdGhlIGltYWdlIGFuZCBjcm9wIGJveCB0byB0aGVpciBpbml0aWFsIHN0YXRlc1xuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIGlmICh0aGlzLnJlYWR5ICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VEYXRhID0gYXNzaWduKHt9LCB0aGlzLmluaXRpYWxJbWFnZURhdGEpO1xuICAgICAgICB0aGlzLmNhbnZhc0RhdGEgPSBhc3NpZ24oe30sIHRoaXMuaW5pdGlhbENhbnZhc0RhdGEpO1xuICAgICAgICB0aGlzLmNyb3BCb3hEYXRhID0gYXNzaWduKHt9LCB0aGlzLmluaXRpYWxDcm9wQm94RGF0YSk7XG4gICAgICAgIHRoaXMucmVuZGVyQ2FudmFzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3JvcHBlZCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyQ3JvcEJveCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gQ2xlYXIgdGhlIGNyb3AgYm94XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgaWYgKHRoaXMuY3JvcHBlZCAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICBhc3NpZ24odGhpcy5jcm9wQm94RGF0YSwge1xuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jcm9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVuZGVyQ3JvcEJveCgpO1xuICAgICAgICB0aGlzLmxpbWl0Q2FudmFzKHRydWUsIHRydWUpOyAvLyBSZW5kZXIgY2FudmFzIGFmdGVyIGNyb3AgYm94IHJlbmRlcmVkXG5cbiAgICAgICAgdGhpcy5yZW5kZXJDYW52YXMoKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5kcmFnQm94LCBDTEFTU19NT0RBTCk7XG4gICAgICAgIGFkZENsYXNzKHRoaXMuY3JvcEJveCwgQ0xBU1NfSElEREVOKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2UgdGhlIGltYWdlJ3Mgc3JjIGFuZCByZWJ1aWxkIHRoZSBjcm9wcGVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBuZXcgVVJMLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2hhc1NhbWVTaXplXSAtIEluZGljYXRlIGlmIHRoZSBuZXcgaW1hZ2UgaGFzIHRoZSBzYW1lIHNpemUgYXMgdGhlIG9sZCBvbmUuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKHVybCkge1xuICAgICAgdmFyIGhhc1NhbWVTaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICAgICAgaWYgKCF0aGlzLmRpc2FibGVkICYmIHVybCkge1xuICAgICAgICBpZiAodGhpcy5pc0ltZykge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5zcmMgPSB1cmw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzU2FtZVNpemUpIHtcbiAgICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IHVybDtcblxuICAgICAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdCb3hJbWFnZS5zcmMgPSB1cmw7XG4gICAgICAgICAgICBmb3JFYWNoKHRoaXMucHJldmlld3MsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2ltZycpWzBdLnNyYyA9IHVybDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodGhpcy5pc0ltZykge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmRhdGEgPSBudWxsO1xuICAgICAgICAgIHRoaXMudW5jcmVhdGUoKTtcbiAgICAgICAgICB0aGlzLmxvYWQodXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIEVuYWJsZSAodW5mcmVlemUpIHRoZSBjcm9wcGVyXG4gICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiB0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5jcm9wcGVyLCBDTEFTU19ESVNBQkxFRCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgLy8gRGlzYWJsZSAoZnJlZXplKSB0aGUgY3JvcHBlclxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiAhdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgYWRkQ2xhc3ModGhpcy5jcm9wcGVyLCBDTEFTU19ESVNBQkxFRCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBjcm9wcGVyIGFuZCByZW1vdmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGltYWdlXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG5cbiAgICAgIGlmICghZWxlbWVudFtOQU1FU1BBQ0VdKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50W05BTUVTUEFDRV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh0aGlzLmlzSW1nICYmIHRoaXMucmVwbGFjZWQpIHtcbiAgICAgICAgZWxlbWVudC5zcmMgPSB0aGlzLm9yaWdpbmFsVXJsO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVuY3JlYXRlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZSB0aGUgY2FudmFzIHdpdGggcmVsYXRpdmUgb2Zmc2V0c1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRYIC0gVGhlIHJlbGF0aXZlIG9mZnNldCBkaXN0YW5jZSBvbiB0aGUgeC1heGlzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0WT1vZmZzZXRYXSAtIFRoZSByZWxhdGl2ZSBvZmZzZXQgZGlzdGFuY2Ugb24gdGhlIHktYXhpcy5cbiAgICAgKiBAcmV0dXJucyB7Q3JvcHBlcn0gdGhpc1xuICAgICAqL1xuICAgIG1vdmU6IGZ1bmN0aW9uIG1vdmUob2Zmc2V0WCkge1xuICAgICAgdmFyIG9mZnNldFkgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG9mZnNldFg7XG4gICAgICB2YXIgX3RoaXMkY2FudmFzRGF0YSA9IHRoaXMuY2FudmFzRGF0YSxcbiAgICAgICAgICBsZWZ0ID0gX3RoaXMkY2FudmFzRGF0YS5sZWZ0LFxuICAgICAgICAgIHRvcCA9IF90aGlzJGNhbnZhc0RhdGEudG9wO1xuICAgICAgcmV0dXJuIHRoaXMubW92ZVRvKGlzVW5kZWZpbmVkKG9mZnNldFgpID8gb2Zmc2V0WCA6IGxlZnQgKyBOdW1iZXIob2Zmc2V0WCksIGlzVW5kZWZpbmVkKG9mZnNldFkpID8gb2Zmc2V0WSA6IHRvcCArIE51bWJlcihvZmZzZXRZKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIGNhbnZhcyB0byBhbiBhYnNvbHV0ZSBwb2ludFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIHgtYXhpcyBjb29yZGluYXRlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbeT14XSAtIFRoZSB5LWF4aXMgY29vcmRpbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7Q3JvcHBlcn0gdGhpc1xuICAgICAqL1xuICAgIG1vdmVUbzogZnVuY3Rpb24gbW92ZVRvKHgpIHtcbiAgICAgIHZhciB5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB4O1xuICAgICAgdmFyIGNhbnZhc0RhdGEgPSB0aGlzLmNhbnZhc0RhdGE7XG4gICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgeCA9IE51bWJlcih4KTtcbiAgICAgIHkgPSBOdW1iZXIoeSk7XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5ICYmICF0aGlzLmRpc2FibGVkICYmIHRoaXMub3B0aW9ucy5tb3ZhYmxlKSB7XG4gICAgICAgIGlmIChpc051bWJlcih4KSkge1xuICAgICAgICAgIGNhbnZhc0RhdGEubGVmdCA9IHg7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoeSkpIHtcbiAgICAgICAgICBjYW52YXNEYXRhLnRvcCA9IHk7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIHRoaXMucmVuZGVyQ2FudmFzKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBab29tIHRoZSBjYW52YXMgd2l0aCBhIHJlbGF0aXZlIHJhdGlvXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGlvIC0gVGhlIHRhcmdldCByYXRpby5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBfb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBldmVudCBpZiBhbnkuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICB6b29tOiBmdW5jdGlvbiB6b29tKHJhdGlvLCBfb3JpZ2luYWxFdmVudCkge1xuICAgICAgdmFyIGNhbnZhc0RhdGEgPSB0aGlzLmNhbnZhc0RhdGE7XG4gICAgICByYXRpbyA9IE51bWJlcihyYXRpbyk7XG5cbiAgICAgIGlmIChyYXRpbyA8IDApIHtcbiAgICAgICAgcmF0aW8gPSAxIC8gKDEgLSByYXRpbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByYXRpbyA9IDEgKyByYXRpbztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuem9vbVRvKGNhbnZhc0RhdGEud2lkdGggKiByYXRpbyAvIGNhbnZhc0RhdGEubmF0dXJhbFdpZHRoLCBudWxsLCBfb3JpZ2luYWxFdmVudCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFpvb20gdGhlIGNhbnZhcyB0byBhbiBhYnNvbHV0ZSByYXRpb1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYXRpbyAtIFRoZSB0YXJnZXQgcmF0aW8uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBpdm90IC0gVGhlIHpvb20gcGl2b3QgcG9pbnQgY29vcmRpbmF0ZS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBfb3JpZ2luYWxFdmVudCAtIFRoZSBvcmlnaW5hbCBldmVudCBpZiBhbnkuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICB6b29tVG86IGZ1bmN0aW9uIHpvb21UbyhyYXRpbywgcGl2b3QsIF9vcmlnaW5hbEV2ZW50KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhO1xuICAgICAgdmFyIHdpZHRoID0gY2FudmFzRGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBjYW52YXNEYXRhLmhlaWdodCxcbiAgICAgICAgICBuYXR1cmFsV2lkdGggPSBjYW52YXNEYXRhLm5hdHVyYWxXaWR0aCxcbiAgICAgICAgICBuYXR1cmFsSGVpZ2h0ID0gY2FudmFzRGF0YS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgcmF0aW8gPSBOdW1iZXIocmF0aW8pO1xuXG4gICAgICBpZiAocmF0aW8gPj0gMCAmJiB0aGlzLnJlYWR5ICYmICF0aGlzLmRpc2FibGVkICYmIG9wdGlvbnMuem9vbWFibGUpIHtcbiAgICAgICAgdmFyIG5ld1dpZHRoID0gbmF0dXJhbFdpZHRoICogcmF0aW87XG4gICAgICAgIHZhciBuZXdIZWlnaHQgPSBuYXR1cmFsSGVpZ2h0ICogcmF0aW87XG5cbiAgICAgICAgaWYgKGRpc3BhdGNoRXZlbnQodGhpcy5lbGVtZW50LCBFVkVOVF9aT09NLCB7XG4gICAgICAgICAgcmF0aW86IHJhdGlvLFxuICAgICAgICAgIG9sZFJhdGlvOiB3aWR0aCAvIG5hdHVyYWxXaWR0aCxcbiAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBfb3JpZ2luYWxFdmVudFxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfb3JpZ2luYWxFdmVudCkge1xuICAgICAgICAgIHZhciBwb2ludGVycyA9IHRoaXMucG9pbnRlcnM7XG4gICAgICAgICAgdmFyIG9mZnNldCA9IGdldE9mZnNldCh0aGlzLmNyb3BwZXIpO1xuICAgICAgICAgIHZhciBjZW50ZXIgPSBwb2ludGVycyAmJiBPYmplY3Qua2V5cyhwb2ludGVycykubGVuZ3RoID8gZ2V0UG9pbnRlcnNDZW50ZXIocG9pbnRlcnMpIDoge1xuICAgICAgICAgICAgcGFnZVg6IF9vcmlnaW5hbEV2ZW50LnBhZ2VYLFxuICAgICAgICAgICAgcGFnZVk6IF9vcmlnaW5hbEV2ZW50LnBhZ2VZXG4gICAgICAgICAgfTsgLy8gWm9vbSBmcm9tIHRoZSB0cmlnZ2VyaW5nIHBvaW50IG9mIHRoZSBldmVudFxuXG4gICAgICAgICAgY2FudmFzRGF0YS5sZWZ0IC09IChuZXdXaWR0aCAtIHdpZHRoKSAqICgoY2VudGVyLnBhZ2VYIC0gb2Zmc2V0LmxlZnQgLSBjYW52YXNEYXRhLmxlZnQpIC8gd2lkdGgpO1xuICAgICAgICAgIGNhbnZhc0RhdGEudG9wIC09IChuZXdIZWlnaHQgLSBoZWlnaHQpICogKChjZW50ZXIucGFnZVkgLSBvZmZzZXQudG9wIC0gY2FudmFzRGF0YS50b3ApIC8gaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHBpdm90KSAmJiBpc051bWJlcihwaXZvdC54KSAmJiBpc051bWJlcihwaXZvdC55KSkge1xuICAgICAgICAgIGNhbnZhc0RhdGEubGVmdCAtPSAobmV3V2lkdGggLSB3aWR0aCkgKiAoKHBpdm90LnggLSBjYW52YXNEYXRhLmxlZnQpIC8gd2lkdGgpO1xuICAgICAgICAgIGNhbnZhc0RhdGEudG9wIC09IChuZXdIZWlnaHQgLSBoZWlnaHQpICogKChwaXZvdC55IC0gY2FudmFzRGF0YS50b3ApIC8gaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBab29tIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgY2FudmFzXG4gICAgICAgICAgY2FudmFzRGF0YS5sZWZ0IC09IChuZXdXaWR0aCAtIHdpZHRoKSAvIDI7XG4gICAgICAgICAgY2FudmFzRGF0YS50b3AgLT0gKG5ld0hlaWdodCAtIGhlaWdodCkgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FudmFzRGF0YS53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICBjYW52YXNEYXRhLmhlaWdodCA9IG5ld0hlaWdodDtcbiAgICAgICAgdGhpcy5yZW5kZXJDYW52YXModHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgdGhlIGNhbnZhcyB3aXRoIGEgcmVsYXRpdmUgZGVncmVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlZ3JlZSAtIFRoZSByb3RhdGUgZGVncmVlLlxuICAgICAqIEByZXR1cm5zIHtDcm9wcGVyfSB0aGlzXG4gICAgICovXG4gICAgcm90YXRlOiBmdW5jdGlvbiByb3RhdGUoZGVncmVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yb3RhdGVUbygodGhpcy5pbWFnZURhdGEucm90YXRlIHx8IDApICsgTnVtYmVyKGRlZ3JlZSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGUgdGhlIGNhbnZhcyB0byBhbiBhYnNvbHV0ZSBkZWdyZWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVncmVlIC0gVGhlIHJvdGF0ZSBkZWdyZWUuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICByb3RhdGVUbzogZnVuY3Rpb24gcm90YXRlVG8oZGVncmVlKSB7XG4gICAgICBkZWdyZWUgPSBOdW1iZXIoZGVncmVlKTtcblxuICAgICAgaWYgKGlzTnVtYmVyKGRlZ3JlZSkgJiYgdGhpcy5yZWFkeSAmJiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLm9wdGlvbnMucm90YXRhYmxlKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VEYXRhLnJvdGF0ZSA9IGRlZ3JlZSAlIDM2MDtcbiAgICAgICAgdGhpcy5yZW5kZXJDYW52YXModHJ1ZSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2Ugb24gdGhlIHgtYXhpcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB4LWF4aXMuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBzY2FsZVg6IGZ1bmN0aW9uIHNjYWxlWChfc2NhbGVYKSB7XG4gICAgICB2YXIgc2NhbGVZID0gdGhpcy5pbWFnZURhdGEuc2NhbGVZO1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGUoX3NjYWxlWCwgaXNOdW1iZXIoc2NhbGVZKSA/IHNjYWxlWSA6IDEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2Ugb24gdGhlIHktYXhpcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB5LWF4aXMuXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBzY2FsZVk6IGZ1bmN0aW9uIHNjYWxlWShfc2NhbGVZKSB7XG4gICAgICB2YXIgc2NhbGVYID0gdGhpcy5pbWFnZURhdGEuc2NhbGVYO1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGUoaXNOdW1iZXIoc2NhbGVYKSA/IHNjYWxlWCA6IDEsIF9zY2FsZVkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSB0aGUgaW1hZ2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVYIC0gVGhlIHNjYWxlIHJhdGlvIG9uIHRoZSB4LWF4aXMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzY2FsZVk9c2NhbGVYXSAtIFRoZSBzY2FsZSByYXRpbyBvbiB0aGUgeS1heGlzLlxuICAgICAqIEByZXR1cm5zIHtDcm9wcGVyfSB0aGlzXG4gICAgICovXG4gICAgc2NhbGU6IGZ1bmN0aW9uIHNjYWxlKHNjYWxlWCkge1xuICAgICAgdmFyIHNjYWxlWSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogc2NhbGVYO1xuICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuaW1hZ2VEYXRhO1xuICAgICAgdmFyIHRyYW5zZm9ybWVkID0gZmFsc2U7XG4gICAgICBzY2FsZVggPSBOdW1iZXIoc2NhbGVYKTtcbiAgICAgIHNjYWxlWSA9IE51bWJlcihzY2FsZVkpO1xuXG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiAhdGhpcy5kaXNhYmxlZCAmJiB0aGlzLm9wdGlvbnMuc2NhbGFibGUpIHtcbiAgICAgICAgaWYgKGlzTnVtYmVyKHNjYWxlWCkpIHtcbiAgICAgICAgICBpbWFnZURhdGEuc2NhbGVYID0gc2NhbGVYO1xuICAgICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc051bWJlcihzY2FsZVkpKSB7XG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWSA9IHNjYWxlWTtcbiAgICAgICAgICB0cmFuc2Zvcm1lZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckNhbnZhcyh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjcm9wcGVkIGFyZWEgcG9zaXRpb24gYW5kIHNpemUgZGF0YSAoYmFzZSBvbiB0aGUgb3JpZ2luYWwgaW1hZ2UpXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcm91bmRlZD1mYWxzZV0gLSBJbmRpY2F0ZSBpZiByb3VuZCB0aGUgZGF0YSB2YWx1ZXMgb3Igbm90LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHQgY3JvcHBlZCBkYXRhLlxuICAgICAqL1xuICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEoKSB7XG4gICAgICB2YXIgcm91bmRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YSxcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhLFxuICAgICAgICAgIGNyb3BCb3hEYXRhID0gdGhpcy5jcm9wQm94RGF0YTtcbiAgICAgIHZhciBkYXRhO1xuXG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiB0aGlzLmNyb3BwZWQpIHtcbiAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICB4OiBjcm9wQm94RGF0YS5sZWZ0IC0gY2FudmFzRGF0YS5sZWZ0LFxuICAgICAgICAgIHk6IGNyb3BCb3hEYXRhLnRvcCAtIGNhbnZhc0RhdGEudG9wLFxuICAgICAgICAgIHdpZHRoOiBjcm9wQm94RGF0YS53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGNyb3BCb3hEYXRhLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICB2YXIgcmF0aW8gPSBpbWFnZURhdGEud2lkdGggLyBpbWFnZURhdGEubmF0dXJhbFdpZHRoO1xuICAgICAgICBmb3JFYWNoKGRhdGEsIGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgZGF0YVtpXSA9IG4gLyByYXRpbztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJvdW5kZWQpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIHJvdW5kaW5nIG9mZiBsZWFkcyB0byBleHRyYSAxcHggaW4gcmlnaHQgb3IgYm90dG9tIGJvcmRlclxuICAgICAgICAgIC8vIHdlIHNob3VsZCByb3VuZCB0aGUgdG9wLWxlZnQgY29ybmVyIGFuZCB0aGUgZGltZW5zaW9uICgjMzQzKS5cbiAgICAgICAgICB2YXIgYm90dG9tID0gTWF0aC5yb3VuZChkYXRhLnkgKyBkYXRhLmhlaWdodCk7XG4gICAgICAgICAgdmFyIHJpZ2h0ID0gTWF0aC5yb3VuZChkYXRhLnggKyBkYXRhLndpZHRoKTtcbiAgICAgICAgICBkYXRhLnggPSBNYXRoLnJvdW5kKGRhdGEueCk7XG4gICAgICAgICAgZGF0YS55ID0gTWF0aC5yb3VuZChkYXRhLnkpO1xuICAgICAgICAgIGRhdGEud2lkdGggPSByaWdodCAtIGRhdGEueDtcbiAgICAgICAgICBkYXRhLmhlaWdodCA9IGJvdHRvbSAtIGRhdGEueTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnJvdGF0YWJsZSkge1xuICAgICAgICBkYXRhLnJvdGF0ZSA9IGltYWdlRGF0YS5yb3RhdGUgfHwgMDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuc2NhbGFibGUpIHtcbiAgICAgICAgZGF0YS5zY2FsZVggPSBpbWFnZURhdGEuc2NhbGVYIHx8IDE7XG4gICAgICAgIGRhdGEuc2NhbGVZID0gaW1hZ2VEYXRhLnNjYWxlWSB8fCAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjcm9wcGVkIGFyZWEgcG9zaXRpb24gYW5kIHNpemUgd2l0aCBuZXcgZGF0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIG5ldyBkYXRhLlxuICAgICAqIEByZXR1cm5zIHtDcm9wcGVyfSB0aGlzXG4gICAgICovXG4gICAgc2V0RGF0YTogZnVuY3Rpb24gc2V0RGF0YShkYXRhKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBpbWFnZURhdGEgPSB0aGlzLmltYWdlRGF0YSxcbiAgICAgICAgICBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhO1xuICAgICAgdmFyIGNyb3BCb3hEYXRhID0ge307XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5ICYmICF0aGlzLmRpc2FibGVkICYmIGlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucm90YXRhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzTnVtYmVyKGRhdGEucm90YXRlKSAmJiBkYXRhLnJvdGF0ZSAhPT0gaW1hZ2VEYXRhLnJvdGF0ZSkge1xuICAgICAgICAgICAgaW1hZ2VEYXRhLnJvdGF0ZSA9IGRhdGEucm90YXRlO1xuICAgICAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzTnVtYmVyKGRhdGEuc2NhbGVYKSAmJiBkYXRhLnNjYWxlWCAhPT0gaW1hZ2VEYXRhLnNjYWxlWCkge1xuICAgICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWCA9IGRhdGEuc2NhbGVYO1xuICAgICAgICAgICAgdHJhbnNmb3JtZWQgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc051bWJlcihkYXRhLnNjYWxlWSkgJiYgZGF0YS5zY2FsZVkgIT09IGltYWdlRGF0YS5zY2FsZVkpIHtcbiAgICAgICAgICAgIGltYWdlRGF0YS5zY2FsZVkgPSBkYXRhLnNjYWxlWTtcbiAgICAgICAgICAgIHRyYW5zZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNmb3JtZWQpIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckNhbnZhcyh0cnVlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByYXRpbyA9IGltYWdlRGF0YS53aWR0aCAvIGltYWdlRGF0YS5uYXR1cmFsV2lkdGg7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGRhdGEueCkpIHtcbiAgICAgICAgICBjcm9wQm94RGF0YS5sZWZ0ID0gZGF0YS54ICogcmF0aW8gKyBjYW52YXNEYXRhLmxlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS55KSkge1xuICAgICAgICAgIGNyb3BCb3hEYXRhLnRvcCA9IGRhdGEueSAqIHJhdGlvICsgY2FudmFzRGF0YS50b3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS53aWR0aCkpIHtcbiAgICAgICAgICBjcm9wQm94RGF0YS53aWR0aCA9IGRhdGEud2lkdGggKiByYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc051bWJlcihkYXRhLmhlaWdodCkpIHtcbiAgICAgICAgICBjcm9wQm94RGF0YS5oZWlnaHQgPSBkYXRhLmhlaWdodCAqIHJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRDcm9wQm94RGF0YShjcm9wQm94RGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbnRhaW5lciBzaXplIGRhdGEuXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdCBjb250YWluZXIgZGF0YS5cbiAgICAgKi9cbiAgICBnZXRDb250YWluZXJEYXRhOiBmdW5jdGlvbiBnZXRDb250YWluZXJEYXRhKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVhZHkgPyBhc3NpZ24oe30sIHRoaXMuY29udGFpbmVyRGF0YSkgOiB7fTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpbWFnZSBwb3NpdGlvbiBhbmQgc2l6ZSBkYXRhLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHQgaW1hZ2UgZGF0YS5cbiAgICAgKi9cbiAgICBnZXRJbWFnZURhdGE6IGZ1bmN0aW9uIGdldEltYWdlRGF0YSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpemVkID8gYXNzaWduKHt9LCB0aGlzLmltYWdlRGF0YSkgOiB7fTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjYW52YXMgcG9zaXRpb24gYW5kIHNpemUgZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0IGNhbnZhcyBkYXRhLlxuICAgICAqL1xuICAgIGdldENhbnZhc0RhdGE6IGZ1bmN0aW9uIGdldENhbnZhc0RhdGEoKSB7XG4gICAgICB2YXIgY2FudmFzRGF0YSA9IHRoaXMuY2FudmFzRGF0YTtcbiAgICAgIHZhciBkYXRhID0ge307XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgIGZvckVhY2goWydsZWZ0JywgJ3RvcCcsICd3aWR0aCcsICdoZWlnaHQnLCAnbmF0dXJhbFdpZHRoJywgJ25hdHVyYWxIZWlnaHQnXSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICBkYXRhW25dID0gY2FudmFzRGF0YVtuXTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNhbnZhcyBwb3NpdGlvbiBhbmQgc2l6ZSB3aXRoIG5ldyBkYXRhLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIG5ldyBjYW52YXMgZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7Q3JvcHBlcn0gdGhpc1xuICAgICAqL1xuICAgIHNldENhbnZhc0RhdGE6IGZ1bmN0aW9uIHNldENhbnZhc0RhdGEoZGF0YSkge1xuICAgICAgdmFyIGNhbnZhc0RhdGEgPSB0aGlzLmNhbnZhc0RhdGE7XG4gICAgICB2YXIgYXNwZWN0UmF0aW8gPSBjYW52YXNEYXRhLmFzcGVjdFJhdGlvO1xuXG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiAhdGhpcy5kaXNhYmxlZCAmJiBpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgIGlmIChpc051bWJlcihkYXRhLmxlZnQpKSB7XG4gICAgICAgICAgY2FudmFzRGF0YS5sZWZ0ID0gZGF0YS5sZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGRhdGEudG9wKSkge1xuICAgICAgICAgIGNhbnZhc0RhdGEudG9wID0gZGF0YS50b3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS53aWR0aCkpIHtcbiAgICAgICAgICBjYW52YXNEYXRhLndpZHRoID0gZGF0YS53aWR0aDtcbiAgICAgICAgICBjYW52YXNEYXRhLmhlaWdodCA9IGRhdGEud2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkYXRhLmhlaWdodCkpIHtcbiAgICAgICAgICBjYW52YXNEYXRhLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICAgIGNhbnZhc0RhdGEud2lkdGggPSBkYXRhLmhlaWdodCAqIGFzcGVjdFJhdGlvO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDYW52YXModHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNyb3AgYm94IHBvc2l0aW9uIGFuZCBzaXplIGRhdGEuXG4gICAgICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdCBjcm9wIGJveCBkYXRhLlxuICAgICAqL1xuICAgIGdldENyb3BCb3hEYXRhOiBmdW5jdGlvbiBnZXRDcm9wQm94RGF0YSgpIHtcbiAgICAgIHZhciBjcm9wQm94RGF0YSA9IHRoaXMuY3JvcEJveERhdGE7XG4gICAgICB2YXIgZGF0YTtcblxuICAgICAgaWYgKHRoaXMucmVhZHkgJiYgdGhpcy5jcm9wcGVkKSB7XG4gICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgbGVmdDogY3JvcEJveERhdGEubGVmdCxcbiAgICAgICAgICB0b3A6IGNyb3BCb3hEYXRhLnRvcCxcbiAgICAgICAgICB3aWR0aDogY3JvcEJveERhdGEud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBjcm9wQm94RGF0YS5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGEgfHwge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3JvcCBib3ggcG9zaXRpb24gYW5kIHNpemUgd2l0aCBuZXcgZGF0YS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBuZXcgY3JvcCBib3ggZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7Q3JvcHBlcn0gdGhpc1xuICAgICAqL1xuICAgIHNldENyb3BCb3hEYXRhOiBmdW5jdGlvbiBzZXRDcm9wQm94RGF0YShkYXRhKSB7XG4gICAgICB2YXIgY3JvcEJveERhdGEgPSB0aGlzLmNyb3BCb3hEYXRhO1xuICAgICAgdmFyIGFzcGVjdFJhdGlvID0gdGhpcy5vcHRpb25zLmFzcGVjdFJhdGlvO1xuICAgICAgdmFyIHdpZHRoQ2hhbmdlZDtcbiAgICAgIHZhciBoZWlnaHRDaGFuZ2VkO1xuXG4gICAgICBpZiAodGhpcy5yZWFkeSAmJiB0aGlzLmNyb3BwZWQgJiYgIXRoaXMuZGlzYWJsZWQgJiYgaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS5sZWZ0KSkge1xuICAgICAgICAgIGNyb3BCb3hEYXRhLmxlZnQgPSBkYXRhLmxlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS50b3ApKSB7XG4gICAgICAgICAgY3JvcEJveERhdGEudG9wID0gZGF0YS50b3A7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIoZGF0YS53aWR0aCkgJiYgZGF0YS53aWR0aCAhPT0gY3JvcEJveERhdGEud2lkdGgpIHtcbiAgICAgICAgICB3aWR0aENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIGNyb3BCb3hEYXRhLndpZHRoID0gZGF0YS53aWR0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc051bWJlcihkYXRhLmhlaWdodCkgJiYgZGF0YS5oZWlnaHQgIT09IGNyb3BCb3hEYXRhLmhlaWdodCkge1xuICAgICAgICAgIGhlaWdodENoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgIGNyb3BCb3hEYXRhLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgaWYgKHdpZHRoQ2hhbmdlZCkge1xuICAgICAgICAgICAgY3JvcEJveERhdGEuaGVpZ2h0ID0gY3JvcEJveERhdGEud2lkdGggLyBhc3BlY3RSYXRpbztcbiAgICAgICAgICB9IGVsc2UgaWYgKGhlaWdodENoYW5nZWQpIHtcbiAgICAgICAgICAgIGNyb3BCb3hEYXRhLndpZHRoID0gY3JvcEJveERhdGEuaGVpZ2h0ICogYXNwZWN0UmF0aW87XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDcm9wQm94KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBjYW52YXMgZHJhd24gdGhlIGNyb3BwZWQgaW1hZ2UuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSAtIFRoZSBjb25maWcgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9IC0gVGhlIHJlc3VsdCBjYW52YXMuXG4gICAgICovXG4gICAgZ2V0Q3JvcHBlZENhbnZhczogZnVuY3Rpb24gZ2V0Q3JvcHBlZENhbnZhcygpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgaWYgKCF0aGlzLnJlYWR5IHx8ICF3aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW52YXNEYXRhID0gdGhpcy5jYW52YXNEYXRhO1xuICAgICAgdmFyIHNvdXJjZSA9IGdldFNvdXJjZUNhbnZhcyh0aGlzLmltYWdlLCB0aGlzLmltYWdlRGF0YSwgY2FudmFzRGF0YSwgb3B0aW9ucyk7IC8vIFJldHVybnMgdGhlIHNvdXJjZSBjYW52YXMgaWYgaXQgaXMgbm90IGNyb3BwZWQuXG5cbiAgICAgIGlmICghdGhpcy5jcm9wcGVkKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRnZXREYXRhID0gdGhpcy5nZXREYXRhKCksXG4gICAgICAgICAgaW5pdGlhbFggPSBfdGhpcyRnZXREYXRhLngsXG4gICAgICAgICAgaW5pdGlhbFkgPSBfdGhpcyRnZXREYXRhLnksXG4gICAgICAgICAgaW5pdGlhbFdpZHRoID0gX3RoaXMkZ2V0RGF0YS53aWR0aCxcbiAgICAgICAgICBpbml0aWFsSGVpZ2h0ID0gX3RoaXMkZ2V0RGF0YS5oZWlnaHQ7XG5cbiAgICAgIHZhciByYXRpbyA9IHNvdXJjZS53aWR0aCAvIE1hdGguZmxvb3IoY2FudmFzRGF0YS5uYXR1cmFsV2lkdGgpO1xuXG4gICAgICBpZiAocmF0aW8gIT09IDEpIHtcbiAgICAgICAgaW5pdGlhbFggKj0gcmF0aW87XG4gICAgICAgIGluaXRpYWxZICo9IHJhdGlvO1xuICAgICAgICBpbml0aWFsV2lkdGggKj0gcmF0aW87XG4gICAgICAgIGluaXRpYWxIZWlnaHQgKj0gcmF0aW87XG4gICAgICB9XG5cbiAgICAgIHZhciBhc3BlY3RSYXRpbyA9IGluaXRpYWxXaWR0aCAvIGluaXRpYWxIZWlnaHQ7XG4gICAgICB2YXIgbWF4U2l6ZXMgPSBnZXRBZGp1c3RlZFNpemVzKHtcbiAgICAgICAgYXNwZWN0UmF0aW86IGFzcGVjdFJhdGlvLFxuICAgICAgICB3aWR0aDogb3B0aW9ucy5tYXhXaWR0aCB8fCBJbmZpbml0eSxcbiAgICAgICAgaGVpZ2h0OiBvcHRpb25zLm1heEhlaWdodCB8fCBJbmZpbml0eVxuICAgICAgfSk7XG4gICAgICB2YXIgbWluU2l6ZXMgPSBnZXRBZGp1c3RlZFNpemVzKHtcbiAgICAgICAgYXNwZWN0UmF0aW86IGFzcGVjdFJhdGlvLFxuICAgICAgICB3aWR0aDogb3B0aW9ucy5taW5XaWR0aCB8fCAwLFxuICAgICAgICBoZWlnaHQ6IG9wdGlvbnMubWluSGVpZ2h0IHx8IDBcbiAgICAgIH0sICdjb3ZlcicpO1xuXG4gICAgICB2YXIgX2dldEFkanVzdGVkU2l6ZXMgPSBnZXRBZGp1c3RlZFNpemVzKHtcbiAgICAgICAgYXNwZWN0UmF0aW86IGFzcGVjdFJhdGlvLFxuICAgICAgICB3aWR0aDogb3B0aW9ucy53aWR0aCB8fCAocmF0aW8gIT09IDEgPyBzb3VyY2Uud2lkdGggOiBpbml0aWFsV2lkdGgpLFxuICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0IHx8IChyYXRpbyAhPT0gMSA/IHNvdXJjZS5oZWlnaHQgOiBpbml0aWFsSGVpZ2h0KVxuICAgICAgfSksXG4gICAgICAgICAgd2lkdGggPSBfZ2V0QWRqdXN0ZWRTaXplcy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBfZ2V0QWRqdXN0ZWRTaXplcy5oZWlnaHQ7XG5cbiAgICAgIHdpZHRoID0gTWF0aC5taW4obWF4U2l6ZXMud2lkdGgsIE1hdGgubWF4KG1pblNpemVzLndpZHRoLCB3aWR0aCkpO1xuICAgICAgaGVpZ2h0ID0gTWF0aC5taW4obWF4U2l6ZXMuaGVpZ2h0LCBNYXRoLm1heChtaW5TaXplcy5oZWlnaHQsIGhlaWdodCkpO1xuICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IG5vcm1hbGl6ZURlY2ltYWxOdW1iZXIod2lkdGgpO1xuICAgICAgY2FudmFzLmhlaWdodCA9IG5vcm1hbGl6ZURlY2ltYWxOdW1iZXIoaGVpZ2h0KTtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gb3B0aW9ucy5maWxsQ29sb3IgfHwgJ3RyYW5zcGFyZW50JztcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB2YXIgX29wdGlvbnMkaW1hZ2VTbW9vdGhpID0gb3B0aW9ucy5pbWFnZVNtb290aGluZ0VuYWJsZWQsXG4gICAgICAgICAgaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gX29wdGlvbnMkaW1hZ2VTbW9vdGhpID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaW1hZ2VTbW9vdGhpLFxuICAgICAgICAgIGltYWdlU21vb3RoaW5nUXVhbGl0eSA9IG9wdGlvbnMuaW1hZ2VTbW9vdGhpbmdRdWFsaXR5O1xuICAgICAgY29udGV4dC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBpbWFnZVNtb290aGluZ0VuYWJsZWQ7XG5cbiAgICAgIGlmIChpbWFnZVNtb290aGluZ1F1YWxpdHkpIHtcbiAgICAgICAgY29udGV4dC5pbWFnZVNtb290aGluZ1F1YWxpdHkgPSBpbWFnZVNtb290aGluZ1F1YWxpdHk7XG4gICAgICB9IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkQuZHJhd0ltYWdlXG5cblxuICAgICAgdmFyIHNvdXJjZVdpZHRoID0gc291cmNlLndpZHRoO1xuICAgICAgdmFyIHNvdXJjZUhlaWdodCA9IHNvdXJjZS5oZWlnaHQ7IC8vIFNvdXJjZSBjYW52YXMgcGFyYW1ldGVyc1xuXG4gICAgICB2YXIgc3JjWCA9IGluaXRpYWxYO1xuICAgICAgdmFyIHNyY1kgPSBpbml0aWFsWTtcbiAgICAgIHZhciBzcmNXaWR0aDtcbiAgICAgIHZhciBzcmNIZWlnaHQ7IC8vIERlc3RpbmF0aW9uIGNhbnZhcyBwYXJhbWV0ZXJzXG5cbiAgICAgIHZhciBkc3RYO1xuICAgICAgdmFyIGRzdFk7XG4gICAgICB2YXIgZHN0V2lkdGg7XG4gICAgICB2YXIgZHN0SGVpZ2h0O1xuXG4gICAgICBpZiAoc3JjWCA8PSAtaW5pdGlhbFdpZHRoIHx8IHNyY1ggPiBzb3VyY2VXaWR0aCkge1xuICAgICAgICBzcmNYID0gMDtcbiAgICAgICAgc3JjV2lkdGggPSAwO1xuICAgICAgICBkc3RYID0gMDtcbiAgICAgICAgZHN0V2lkdGggPSAwO1xuICAgICAgfSBlbHNlIGlmIChzcmNYIDw9IDApIHtcbiAgICAgICAgZHN0WCA9IC1zcmNYO1xuICAgICAgICBzcmNYID0gMDtcbiAgICAgICAgc3JjV2lkdGggPSBNYXRoLm1pbihzb3VyY2VXaWR0aCwgaW5pdGlhbFdpZHRoICsgc3JjWCk7XG4gICAgICAgIGRzdFdpZHRoID0gc3JjV2lkdGg7XG4gICAgICB9IGVsc2UgaWYgKHNyY1ggPD0gc291cmNlV2lkdGgpIHtcbiAgICAgICAgZHN0WCA9IDA7XG4gICAgICAgIHNyY1dpZHRoID0gTWF0aC5taW4oaW5pdGlhbFdpZHRoLCBzb3VyY2VXaWR0aCAtIHNyY1gpO1xuICAgICAgICBkc3RXaWR0aCA9IHNyY1dpZHRoO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3JjV2lkdGggPD0gMCB8fCBzcmNZIDw9IC1pbml0aWFsSGVpZ2h0IHx8IHNyY1kgPiBzb3VyY2VIZWlnaHQpIHtcbiAgICAgICAgc3JjWSA9IDA7XG4gICAgICAgIHNyY0hlaWdodCA9IDA7XG4gICAgICAgIGRzdFkgPSAwO1xuICAgICAgICBkc3RIZWlnaHQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChzcmNZIDw9IDApIHtcbiAgICAgICAgZHN0WSA9IC1zcmNZO1xuICAgICAgICBzcmNZID0gMDtcbiAgICAgICAgc3JjSGVpZ2h0ID0gTWF0aC5taW4oc291cmNlSGVpZ2h0LCBpbml0aWFsSGVpZ2h0ICsgc3JjWSk7XG4gICAgICAgIGRzdEhlaWdodCA9IHNyY0hlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoc3JjWSA8PSBzb3VyY2VIZWlnaHQpIHtcbiAgICAgICAgZHN0WSA9IDA7XG4gICAgICAgIHNyY0hlaWdodCA9IE1hdGgubWluKGluaXRpYWxIZWlnaHQsIHNvdXJjZUhlaWdodCAtIHNyY1kpO1xuICAgICAgICBkc3RIZWlnaHQgPSBzcmNIZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJhbXMgPSBbc3JjWCwgc3JjWSwgc3JjV2lkdGgsIHNyY0hlaWdodF07IC8vIEF2b2lkIFwiSW5kZXhTaXplRXJyb3JcIlxuXG4gICAgICBpZiAoZHN0V2lkdGggPiAwICYmIGRzdEhlaWdodCA+IDApIHtcbiAgICAgICAgdmFyIHNjYWxlID0gd2lkdGggLyBpbml0aWFsV2lkdGg7XG4gICAgICAgIHBhcmFtcy5wdXNoKGRzdFggKiBzY2FsZSwgZHN0WSAqIHNjYWxlLCBkc3RXaWR0aCAqIHNjYWxlLCBkc3RIZWlnaHQgKiBzY2FsZSk7XG4gICAgICB9IC8vIEFsbCB0aGUgbnVtZXJpY2FsIHBhcmFtZXRlcnMgc2hvdWxkIGJlIGludGVnZXIgZm9yIGBkcmF3SW1hZ2VgXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmVuZ3l1YW5jaGVuL2Nyb3BwZXIvaXNzdWVzLzQ3NlxuXG5cbiAgICAgIGNvbnRleHQuZHJhd0ltYWdlLmFwcGx5KGNvbnRleHQsIFtzb3VyY2VdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocGFyYW1zLm1hcChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Iobm9ybWFsaXplRGVjaW1hbE51bWJlcihwYXJhbSkpO1xuICAgICAgfSkpKSk7XG4gICAgICByZXR1cm4gY2FudmFzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2UgdGhlIGFzcGVjdCByYXRpbyBvZiB0aGUgY3JvcCBib3guXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdFJhdGlvIC0gVGhlIG5ldyBhc3BlY3QgcmF0aW8uXG4gICAgICogQHJldHVybnMge0Nyb3BwZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBzZXRBc3BlY3RSYXRpbzogZnVuY3Rpb24gc2V0QXNwZWN0UmF0aW8oYXNwZWN0UmF0aW8pIHtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZWQgJiYgIWlzVW5kZWZpbmVkKGFzcGVjdFJhdGlvKSkge1xuICAgICAgICAvLyAwIC0+IE5hTlxuICAgICAgICBvcHRpb25zLmFzcGVjdFJhdGlvID0gTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8pIHx8IE5hTjtcblxuICAgICAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgICAgIHRoaXMuaW5pdENyb3BCb3goKTtcblxuICAgICAgICAgIGlmICh0aGlzLmNyb3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ3JvcEJveCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBkcmFnIG1vZGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGUgLSBUaGUgbmV3IGRyYWcgbW9kZS5cbiAgICAgKiBAcmV0dXJucyB7Q3JvcHBlcn0gdGhpc1xuICAgICAqL1xuICAgIHNldERyYWdNb2RlOiBmdW5jdGlvbiBzZXREcmFnTW9kZShtb2RlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICBkcmFnQm94ID0gdGhpcy5kcmFnQm94LFxuICAgICAgICAgIGZhY2UgPSB0aGlzLmZhY2U7XG5cbiAgICAgIGlmICh0aGlzLnJlYWR5ICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgIHZhciBjcm9wcGFibGUgPSBtb2RlID09PSBEUkFHX01PREVfQ1JPUDtcbiAgICAgICAgdmFyIG1vdmFibGUgPSBvcHRpb25zLm1vdmFibGUgJiYgbW9kZSA9PT0gRFJBR19NT0RFX01PVkU7XG4gICAgICAgIG1vZGUgPSBjcm9wcGFibGUgfHwgbW92YWJsZSA/IG1vZGUgOiBEUkFHX01PREVfTk9ORTtcbiAgICAgICAgb3B0aW9ucy5kcmFnTW9kZSA9IG1vZGU7XG4gICAgICAgIHNldERhdGEoZHJhZ0JveCwgREFUQV9BQ1RJT04sIG1vZGUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnQm94LCBDTEFTU19DUk9QLCBjcm9wcGFibGUpO1xuICAgICAgICB0b2dnbGVDbGFzcyhkcmFnQm94LCBDTEFTU19NT1ZFLCBtb3ZhYmxlKTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMuY3JvcEJveE1vdmFibGUpIHtcbiAgICAgICAgICAvLyBTeW5jIGRyYWcgbW9kZSB0byBjcm9wIGJveCB3aGVuIGl0IGlzIG5vdCBtb3ZhYmxlXG4gICAgICAgICAgc2V0RGF0YShmYWNlLCBEQVRBX0FDVElPTiwgbW9kZSk7XG4gICAgICAgICAgdG9nZ2xlQ2xhc3MoZmFjZSwgQ0xBU1NfQ1JPUCwgY3JvcHBhYmxlKTtcbiAgICAgICAgICB0b2dnbGVDbGFzcyhmYWNlLCBDTEFTU19NT1ZFLCBtb3ZhYmxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG5cbiAgdmFyIEFub3RoZXJDcm9wcGVyID0gV0lORE9XLkNyb3BwZXI7XG5cbiAgdmFyIENyb3BwZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQ3JvcHBlci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBUaGUgdGFyZ2V0IGVsZW1lbnQgZm9yIGNyb3BwaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gLSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENyb3BwZXIoZWxlbWVudCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3JvcHBlcik7XG5cbiAgICAgIGlmICghZWxlbWVudCB8fCAhUkVHRVhQX1RBR19OQU1FLnRlc3QoZWxlbWVudC50YWdOYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBmaXJzdCBhcmd1bWVudCBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhbiA8aW1nPiBvciA8Y2FudmFzPiBlbGVtZW50LicpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBERUZBVUxUUywgaXNQbGFpbk9iamVjdChvcHRpb25zKSAmJiBvcHRpb25zKTtcbiAgICAgIHRoaXMuY3JvcHBlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wb2ludGVycyA9IHt9O1xuICAgICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgICAgdGhpcy5yZWxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMucmVwbGFjZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2l6ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2l6aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ3JvcHBlciwgW3tcbiAgICAgIGtleTogXCJpbml0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIHZhciB0YWdOYW1lID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciB1cmw7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRbTkFNRVNQQUNFXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRbTkFNRVNQQUNFXSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRhZ05hbWUgPT09ICdpbWcnKSB7XG4gICAgICAgICAgdGhpcy5pc0ltZyA9IHRydWU7IC8vIGUuZy46IFwiaW1nL3BpY3R1cmUuanBnXCJcblxuICAgICAgICAgIHVybCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmMnKSB8fCAnJztcbiAgICAgICAgICB0aGlzLm9yaWdpbmFsVXJsID0gdXJsOyAvLyBTdG9wIHdoZW4gaXQncyBhIGJsYW5rIGltYWdlXG5cbiAgICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gZS5nLjogXCJodHRwOi8vZXhhbXBsZS5jb20vaW1nL3BpY3R1cmUuanBnXCJcblxuXG4gICAgICAgICAgdXJsID0gZWxlbWVudC5zcmM7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnTmFtZSA9PT0gJ2NhbnZhcycgJiYgd2luZG93LkhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgICAgdXJsID0gZWxlbWVudC50b0RhdGFVUkwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9hZCh1cmwpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJsb2FkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCh1cmwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xuICAgICAgICB0aGlzLmltYWdlRGF0YSA9IHt9O1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnJvdGF0YWJsZSAmJiAhb3B0aW9ucy5zY2FsYWJsZSkge1xuICAgICAgICAgIG9wdGlvbnMuY2hlY2tPcmllbnRhdGlvbiA9IGZhbHNlO1xuICAgICAgICB9IC8vIE9ubHkgSUUxMCsgc3VwcG9ydHMgVHlwZWQgQXJyYXlzXG5cblxuICAgICAgICBpZiAoIW9wdGlvbnMuY2hlY2tPcmllbnRhdGlvbiB8fCAhd2luZG93LkFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgdGhpcy5jbG9uZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBEZXRlY3QgdGhlIG1pbWUgdHlwZSBvZiB0aGUgaW1hZ2UgZGlyZWN0bHkgaWYgaXQgaXMgYSBEYXRhIFVSTFxuXG5cbiAgICAgICAgaWYgKFJFR0VYUF9EQVRBX1VSTC50ZXN0KHVybCkpIHtcbiAgICAgICAgICAvLyBSZWFkIEFycmF5QnVmZmVyIGZyb20gRGF0YSBVUkwgb2YgSlBFRyBpbWFnZXMgZGlyZWN0bHkgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgICAgICAgIGlmIChSRUdFWFBfREFUQV9VUkxfSlBFRy50ZXN0KHVybCkpIHtcbiAgICAgICAgICAgIHRoaXMucmVhZChkYXRhVVJMVG9BcnJheUJ1ZmZlcih1cmwpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT25seSBhIEpQRUcgaW1hZ2UgbWF5IGNvbnRhaW5zIEV4aWYgT3JpZW50YXRpb24gaW5mb3JtYXRpb24sXG4gICAgICAgICAgICAvLyB0aGUgcmVzdCB0eXBlcyBvZiBEYXRhIFVSTHMgYXJlIG5vdCBuZWNlc3NhcnkgdG8gY2hlY2sgb3JpZW50YXRpb24gYXQgYWxsLlxuICAgICAgICAgICAgdGhpcy5jbG9uZSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyAxLiBEZXRlY3QgdGhlIG1pbWUgdHlwZSBvZiB0aGUgaW1hZ2UgYnkgYSBYTUxIdHRwUmVxdWVzdC5cbiAgICAgICAgLy8gMi4gTG9hZCB0aGUgaW1hZ2UgYXMgQXJyYXlCdWZmZXIgZm9yIHJlYWRpbmcgb3JpZW50YXRpb24gaWYgaXRzIGEgSlBFRyBpbWFnZS5cblxuXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnJlbG9hZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMueGhyID0geGhyOyAvLyAxLiBDcm9zcyBvcmlnaW4gcmVxdWVzdHMgYXJlIG9ubHkgc3VwcG9ydGVkIGZvciBwcm90b2NvbCBzY2hlbWVzOlxuICAgICAgICAvLyBodHRwLCBodHRwcywgZGF0YSwgY2hyb21lLCBjaHJvbWUtZXh0ZW5zaW9uLlxuICAgICAgICAvLyAyLiBBY2Nlc3MgdG8gWE1MSHR0cFJlcXVlc3QgZnJvbSBhIERhdGEgVVJMIHdpbGwgYmUgYmxvY2tlZCBieSBDT1JTIHBvbGljeVxuICAgICAgICAvLyBpbiBzb21lIGJyb3dzZXJzIGFzIElFMTEgYW5kIFNhZmFyaS5cblxuICAgICAgICB4aHIub25hYm9ydCA9IGNsb25lO1xuICAgICAgICB4aHIub25lcnJvciA9IGNsb25lO1xuICAgICAgICB4aHIub250aW1lb3V0ID0gY2xvbmU7XG5cbiAgICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQWJvcnQgdGhlIHJlcXVlc3QgZGlyZWN0bHkgaWYgaXQgbm90IGEgSlBFRyBpbWFnZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgICAgaWYgKHhoci5nZXRSZXNwb25zZUhlYWRlcignY29udGVudC10eXBlJykgIT09IE1JTUVfVFlQRV9KUEVHKSB7XG4gICAgICAgICAgICB4aHIuYWJvcnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yZWFkKHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yZWxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBfdGhpcy54aHIgPSBudWxsO1xuICAgICAgICB9OyAvLyBCdXN0IGNhY2hlIHdoZW4gdGhlcmUgaXMgYSBcImNyb3NzT3JpZ2luXCIgcHJvcGVydHkgdG8gYXZvaWQgYnJvd3NlciBjYWNoZSBlcnJvclxuXG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hlY2tDcm9zc09yaWdpbiAmJiBpc0Nyb3NzT3JpZ2luVVJMKHVybCkgJiYgZWxlbWVudC5jcm9zc09yaWdpbikge1xuICAgICAgICAgIHVybCA9IGFkZFRpbWVzdGFtcCh1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZWxlbWVudC5jcm9zc09yaWdpbiA9PT0gJ3VzZS1jcmVkZW50aWFscyc7XG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInJlYWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKGFycmF5QnVmZmVyKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgaW1hZ2VEYXRhID0gdGhpcy5pbWFnZURhdGE7IC8vIFJlc2V0IHRoZSBvcmllbnRhdGlvbiB2YWx1ZSB0byBpdHMgZGVmYXVsdCB2YWx1ZSAxXG4gICAgICAgIC8vIGFzIHNvbWUgaU9TIGJyb3dzZXJzIHdpbGwgcmVuZGVyIGltYWdlIHdpdGggaXRzIG9yaWVudGF0aW9uXG5cbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gcmVzZXRBbmRHZXRPcmllbnRhdGlvbihhcnJheUJ1ZmZlcik7XG4gICAgICAgIHZhciByb3RhdGUgPSAwO1xuICAgICAgICB2YXIgc2NhbGVYID0gMTtcbiAgICAgICAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID4gMSkge1xuICAgICAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IFVSTCB3aGljaCBoYXMgdGhlIGRlZmF1bHQgb3JpZW50YXRpb24gdmFsdWVcbiAgICAgICAgICB0aGlzLnVybCA9IGFycmF5QnVmZmVyVG9EYXRhVVJMKGFycmF5QnVmZmVyLCBNSU1FX1RZUEVfSlBFRyk7XG5cbiAgICAgICAgICB2YXIgX3BhcnNlT3JpZW50YXRpb24gPSBwYXJzZU9yaWVudGF0aW9uKG9yaWVudGF0aW9uKTtcblxuICAgICAgICAgIHJvdGF0ZSA9IF9wYXJzZU9yaWVudGF0aW9uLnJvdGF0ZTtcbiAgICAgICAgICBzY2FsZVggPSBfcGFyc2VPcmllbnRhdGlvbi5zY2FsZVg7XG4gICAgICAgICAgc2NhbGVZID0gX3BhcnNlT3JpZW50YXRpb24uc2NhbGVZO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucm90YXRhYmxlKSB7XG4gICAgICAgICAgaW1hZ2VEYXRhLnJvdGF0ZSA9IHJvdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNjYWxhYmxlKSB7XG4gICAgICAgICAgaW1hZ2VEYXRhLnNjYWxlWCA9IHNjYWxlWDtcbiAgICAgICAgICBpbWFnZURhdGEuc2NhbGVZID0gc2NhbGVZO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbG9uZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJjbG9uZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIHVybCA9IHRoaXMudXJsO1xuICAgICAgICB2YXIgY3Jvc3NPcmlnaW4gPSBlbGVtZW50LmNyb3NzT3JpZ2luO1xuICAgICAgICB2YXIgY3Jvc3NPcmlnaW5VcmwgPSB1cmw7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jaGVja0Nyb3NzT3JpZ2luICYmIGlzQ3Jvc3NPcmlnaW5VUkwodXJsKSkge1xuICAgICAgICAgIGlmICghY3Jvc3NPcmlnaW4pIHtcbiAgICAgICAgICAgIGNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XG4gICAgICAgICAgfSAvLyBCdXN0IGNhY2hlIHdoZW4gdGhlcmUgaXMgbm90IGEgXCJjcm9zc09yaWdpblwiIHByb3BlcnR5ICgjNTE5KVxuXG5cbiAgICAgICAgICBjcm9zc09yaWdpblVybCA9IGFkZFRpbWVzdGFtcCh1cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jcm9zc09yaWdpbiA9IGNyb3NzT3JpZ2luO1xuICAgICAgICB0aGlzLmNyb3NzT3JpZ2luVXJsID0gY3Jvc3NPcmlnaW5Vcmw7XG4gICAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgIGlmIChjcm9zc09yaWdpbikge1xuICAgICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG4gICAgICAgIH1cblxuICAgICAgICBpbWFnZS5zcmMgPSBjcm9zc09yaWdpblVybCB8fCB1cmw7XG4gICAgICAgIGltYWdlLmFsdCA9IGVsZW1lbnQuYWx0IHx8ICdUaGUgaW1hZ2UgdG8gY3JvcCc7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gdGhpcy5zdGFydC5iaW5kKHRoaXMpO1xuICAgICAgICBpbWFnZS5vbmVycm9yID0gdGhpcy5zdG9wLmJpbmQodGhpcyk7XG4gICAgICAgIGFkZENsYXNzKGltYWdlLCBDTEFTU19ISURFKTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbWFnZSwgZWxlbWVudC5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInN0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7XG4gICAgICAgIGltYWdlLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICB0aGlzLnNpemluZyA9IHRydWU7IC8vIE1hdGNoIGFsbCBicm93c2VycyB0aGF0IHVzZSBXZWJLaXQgYXMgdGhlIGxheW91dCBlbmdpbmUgaW4gaU9TIGRldmljZXMsXG4gICAgICAgIC8vIHN1Y2ggYXMgU2FmYXJpIGZvciBpT1MsIENocm9tZSBmb3IgaU9TLCBhbmQgaW4tYXBwIGJyb3dzZXJzLlxuXG4gICAgICAgIHZhciBpc0lPU1dlYktpdCA9IFdJTkRPVy5uYXZpZ2F0b3IgJiYgLyg/OmlQYWR8aVBob25lfGlQb2QpLio/QXBwbGVXZWJLaXQvaS50ZXN0KFdJTkRPVy5uYXZpZ2F0b3IudXNlckFnZW50KTtcblxuICAgICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uIGRvbmUobmF0dXJhbFdpZHRoLCBuYXR1cmFsSGVpZ2h0KSB7XG4gICAgICAgICAgYXNzaWduKF90aGlzMi5pbWFnZURhdGEsIHtcbiAgICAgICAgICAgIG5hdHVyYWxXaWR0aDogbmF0dXJhbFdpZHRoLFxuICAgICAgICAgICAgbmF0dXJhbEhlaWdodDogbmF0dXJhbEhlaWdodCxcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvOiBuYXR1cmFsV2lkdGggLyBuYXR1cmFsSGVpZ2h0XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgX3RoaXMyLnNpemluZyA9IGZhbHNlO1xuICAgICAgICAgIF90aGlzMi5zaXplZCA9IHRydWU7XG5cbiAgICAgICAgICBfdGhpczIuYnVpbGQoKTtcbiAgICAgICAgfTsgLy8gTW9zdCBtb2Rlcm4gYnJvd3NlcnMgKGV4Y2VwdHMgaU9TIFdlYktpdClcblxuXG4gICAgICAgIGlmIChpbWFnZS5uYXR1cmFsV2lkdGggJiYgIWlzSU9TV2ViS2l0KSB7XG4gICAgICAgICAgZG9uZShpbWFnZS5uYXR1cmFsV2lkdGgsIGltYWdlLm5hdHVyYWxIZWlnaHQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaXppbmdJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB0aGlzLnNpemluZ0ltYWdlID0gc2l6aW5nSW1hZ2U7XG5cbiAgICAgICAgc2l6aW5nSW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvbmUoc2l6aW5nSW1hZ2Uud2lkdGgsIHNpemluZ0ltYWdlLmhlaWdodCk7XG5cbiAgICAgICAgICBpZiAoIWlzSU9TV2ViS2l0KSB7XG4gICAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKHNpemluZ0ltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2l6aW5nSW1hZ2Uuc3JjID0gaW1hZ2Uuc3JjOyAvLyBpT1MgV2ViS2l0IHdpbGwgY29udmVydCB0aGUgaW1hZ2UgYXV0b21hdGljYWxseVxuICAgICAgICAvLyB3aXRoIGl0cyBvcmllbnRhdGlvbiBvbmNlIGFwcGVuZCBpdCBpbnRvIERPTSAoIzI3OSlcblxuICAgICAgICBpZiAoIWlzSU9TV2ViS2l0KSB7XG4gICAgICAgICAgc2l6aW5nSW1hZ2Uuc3R5bGUuY3NzVGV4dCA9ICdsZWZ0OjA7JyArICdtYXgtaGVpZ2h0Om5vbmUhaW1wb3J0YW50OycgKyAnbWF4LXdpZHRoOm5vbmUhaW1wb3J0YW50OycgKyAnbWluLWhlaWdodDowIWltcG9ydGFudDsnICsgJ21pbi13aWR0aDowIWltcG9ydGFudDsnICsgJ29wYWNpdHk6MDsnICsgJ3Bvc2l0aW9uOmFic29sdXRlOycgKyAndG9wOjA7JyArICd6LWluZGV4Oi0xOyc7XG4gICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChzaXppbmdJbWFnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic3RvcFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIHZhciBpbWFnZSA9IHRoaXMuaW1hZ2U7XG4gICAgICAgIGltYWdlLm9ubG9hZCA9IG51bGw7XG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBudWxsO1xuICAgICAgICBpbWFnZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGltYWdlKTtcbiAgICAgICAgdGhpcy5pbWFnZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImJ1aWxkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGQoKSB7XG4gICAgICAgIGlmICghdGhpcy5zaXplZCB8fCB0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgaW1hZ2UgPSB0aGlzLmltYWdlOyAvLyBDcmVhdGUgY3JvcHBlciBlbGVtZW50c1xuXG4gICAgICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBURU1QTEFURTtcbiAgICAgICAgdmFyIGNyb3BwZXIgPSB0ZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWNvbnRhaW5lclwiKSk7XG4gICAgICAgIHZhciBjYW52YXMgPSBjcm9wcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItY2FudmFzXCIpKTtcbiAgICAgICAgdmFyIGRyYWdCb3ggPSBjcm9wcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KE5BTUVTUEFDRSwgXCItZHJhZy1ib3hcIikpO1xuICAgICAgICB2YXIgY3JvcEJveCA9IGNyb3BwZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1jcm9wLWJveFwiKSk7XG4gICAgICAgIHZhciBmYWNlID0gY3JvcEJveC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWZhY2VcIikpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jcm9wcGVyID0gY3JvcHBlcjtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMuZHJhZ0JveCA9IGRyYWdCb3g7XG4gICAgICAgIHRoaXMuY3JvcEJveCA9IGNyb3BCb3g7XG4gICAgICAgIHRoaXMudmlld0JveCA9IGNyb3BwZXIucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoTkFNRVNQQUNFLCBcIi12aWV3LWJveFwiKSk7XG4gICAgICAgIHRoaXMuZmFjZSA9IGZhY2U7XG4gICAgICAgIGNhbnZhcy5hcHBlbmRDaGlsZChpbWFnZSk7IC8vIEhpZGUgdGhlIG9yaWdpbmFsIGltYWdlXG5cbiAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgQ0xBU1NfSElEREVOKTsgLy8gSW5zZXJ0cyB0aGUgY3JvcHBlciBhZnRlciB0byB0aGUgY3VycmVudCBpbWFnZVxuXG4gICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoY3JvcHBlciwgZWxlbWVudC5uZXh0U2libGluZyk7IC8vIFNob3cgdGhlIGltYWdlIGlmIGlzIGhpZGRlblxuXG4gICAgICAgIGlmICghdGhpcy5pc0ltZykge1xuICAgICAgICAgIHJlbW92ZUNsYXNzKGltYWdlLCBDTEFTU19ISURFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdFByZXZpZXcoKTtcbiAgICAgICAgdGhpcy5iaW5kKCk7XG4gICAgICAgIG9wdGlvbnMuaW5pdGlhbEFzcGVjdFJhdGlvID0gTWF0aC5tYXgoMCwgb3B0aW9ucy5pbml0aWFsQXNwZWN0UmF0aW8pIHx8IE5hTjtcbiAgICAgICAgb3B0aW9ucy5hc3BlY3RSYXRpbyA9IE1hdGgubWF4KDAsIG9wdGlvbnMuYXNwZWN0UmF0aW8pIHx8IE5hTjtcbiAgICAgICAgb3B0aW9ucy52aWV3TW9kZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDMsIE1hdGgucm91bmQob3B0aW9ucy52aWV3TW9kZSkpKSB8fCAwO1xuICAgICAgICBhZGRDbGFzcyhjcm9wQm94LCBDTEFTU19ISURERU4pO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5ndWlkZXMpIHtcbiAgICAgICAgICBhZGRDbGFzcyhjcm9wQm94LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1kYXNoZWRcIikpLCBDTEFTU19ISURERU4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmNlbnRlcikge1xuICAgICAgICAgIGFkZENsYXNzKGNyb3BCb3guZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWNlbnRlclwiKSksIENMQVNTX0hJRERFTik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgYWRkQ2xhc3MoY3JvcHBlciwgXCJcIi5jb25jYXQoTkFNRVNQQUNFLCBcIi1iZ1wiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMuaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgYWRkQ2xhc3MoZmFjZSwgQ0xBU1NfSU5WSVNJQkxFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmNyb3BCb3hNb3ZhYmxlKSB7XG4gICAgICAgICAgYWRkQ2xhc3MoZmFjZSwgQ0xBU1NfTU9WRSk7XG4gICAgICAgICAgc2V0RGF0YShmYWNlLCBEQVRBX0FDVElPTiwgQUNUSU9OX0FMTCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMuY3JvcEJveFJlc2l6YWJsZSkge1xuICAgICAgICAgIGFkZENsYXNzKGNyb3BCb3guZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLWxpbmVcIikpLCBDTEFTU19ISURERU4pO1xuICAgICAgICAgIGFkZENsYXNzKGNyb3BCb3guZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcIlwiLmNvbmNhdChOQU1FU1BBQ0UsIFwiLXBvaW50XCIpKSwgQ0xBU1NfSElEREVOKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgIHRoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnNldERyYWdNb2RlKG9wdGlvbnMuZHJhZ01vZGUpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF1dG9Dcm9wKSB7XG4gICAgICAgICAgdGhpcy5jcm9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldERhdGEob3B0aW9ucy5kYXRhKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zLnJlYWR5KSkge1xuICAgICAgICAgIGFkZExpc3RlbmVyKGVsZW1lbnQsIEVWRU5UX1JFQURZLCBvcHRpb25zLnJlYWR5LCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkaXNwYXRjaEV2ZW50KGVsZW1lbnQsIEVWRU5UX1JFQURZKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidW5idWlsZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuYnVpbGQoKSB7XG4gICAgICAgIGlmICghdGhpcy5yZWFkeSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgdGhpcy5yZXNldFByZXZpZXcoKTtcbiAgICAgICAgdGhpcy5jcm9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jcm9wcGVyKTtcbiAgICAgICAgcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LCBDTEFTU19ISURERU4pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ1bmNyZWF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuY3JlYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgICAgIHRoaXMudW5idWlsZCgpO1xuICAgICAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNyb3BwZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNpemluZykge1xuICAgICAgICAgIHRoaXMuc2l6aW5nSW1hZ2Uub25sb2FkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnNpemluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuc2l6ZWQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlbG9hZGluZykge1xuICAgICAgICAgIHRoaXMueGhyLm9uYWJvcnQgPSBudWxsO1xuICAgICAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWFnZSkge1xuICAgICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIEdldCB0aGUgbm8gY29uZmxpY3QgY3JvcHBlciBjbGFzcy5cbiAgICAgICAqIEByZXR1cm5zIHtDcm9wcGVyfSBUaGUgY3JvcHBlciBjbGFzcy5cbiAgICAgICAqL1xuXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwibm9Db25mbGljdFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICAgIHdpbmRvdy5Dcm9wcGVyID0gQW5vdGhlckNyb3BwZXI7XG4gICAgICAgIHJldHVybiBDcm9wcGVyO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBDaGFuZ2UgdGhlIGRlZmF1bHQgb3B0aW9ucy5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIG5ldyBkZWZhdWx0IG9wdGlvbnMuXG4gICAgICAgKi9cblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXREZWZhdWx0c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERlZmF1bHRzKG9wdGlvbnMpIHtcbiAgICAgICAgYXNzaWduKERFRkFVTFRTLCBpc1BsYWluT2JqZWN0KG9wdGlvbnMpICYmIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBDcm9wcGVyO1xuICB9KCk7XG5cbiAgYXNzaWduKENyb3BwZXIucHJvdG90eXBlLCByZW5kZXIsIHByZXZpZXcsIGV2ZW50cywgaGFuZGxlcnMsIGNoYW5nZSwgbWV0aG9kcyk7XG5cbiAgcmV0dXJuIENyb3BwZXI7XG5cbn0pKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=